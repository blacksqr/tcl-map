/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.36
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<typename T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdio.h>
#include <tcl.h>
#include <errno.h>
#include <stdlib.h>
#include <stdarg.h>
#include <ctype.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic CAPI SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The swig conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old swig versions, you usually write code as:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit as:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   that seems to be the same, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   requires also to SWIG_ConvertPtr to return new result values, as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   swig errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()


 */
#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))


/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif




#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGINTERN const char*
SWIG_Tcl_ErrorType(int code) {
  const char* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = "MemoryError";
    break;
  case SWIG_IOError:
    type = "IOError";
    break;
  case SWIG_RuntimeError:
    type = "RuntimeError";
    break;
  case SWIG_IndexError:
    type = "IndexError";
    break;
  case SWIG_TypeError:
    type = "TypeError";
    break;
  case SWIG_DivisionByZero:
    type = "ZeroDivisionError";
    break;
  case SWIG_OverflowError:
    type = "OverflowError";
    break;
  case SWIG_SyntaxError:
    type = "SyntaxError";
    break;
  case SWIG_ValueError:
    type = "ValueError";
    break;
  case SWIG_SystemError:
    type = "SystemError";
    break;
  case SWIG_AttributeError:
    type = "AttributeError";
    break;
  default:
    type = "RuntimeError";
  }
  return type;
}


SWIGINTERN void
SWIG_Tcl_SetErrorObj(Tcl_Interp *interp, const char *ctype, Tcl_Obj *obj)
{
  Tcl_ResetResult(interp);
  Tcl_SetObjResult(interp, obj);
  Tcl_SetErrorCode(interp, "SWIG", ctype, NULL);
}

SWIGINTERN void
SWIG_Tcl_SetErrorMsg(Tcl_Interp *interp, const char *ctype, const char *mesg)
{
  Tcl_ResetResult(interp);
  Tcl_SetErrorCode(interp, "SWIG", ctype, NULL);
  Tcl_AppendResult(interp, ctype, " ", mesg, NULL);
  /*
  Tcl_AddErrorInfo(interp, ctype);
  Tcl_AddErrorInfo(interp, " ");
  Tcl_AddErrorInfo(interp, mesg);
  */
}

SWIGINTERNINLINE void
SWIG_Tcl_AddErrorMsg(Tcl_Interp *interp, const char* mesg)
{
  Tcl_AddErrorInfo(interp, mesg);
}



/* -----------------------------------------------------------------------------
 * SWIG API. Portion that goes into the runtime
 * ----------------------------------------------------------------------------- */
#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_TCL_POINTER 4
#define SWIG_TCL_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;

typedef int   (*swig_wrapper)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
typedef int   (*swig_wrapper_func)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
typedef char *(*swig_variable_func)(ClientData, Tcl_Interp *, char *, char *, int);
typedef void  (*swig_delete_func)(ClientData);

typedef struct swig_method {
  const char     *name;
  swig_wrapper   method;
} swig_method;

typedef struct swig_attribute {
  const char     *name;
  swig_wrapper   getmethod;
  swig_wrapper   setmethod;
} swig_attribute;

typedef struct swig_class {
  const char         *name;
  swig_type_info   **type;
  swig_wrapper       constructor;
  void              (*destructor)(void *);
  swig_method        *methods;
  swig_attribute     *attributes;
  struct swig_class **bases;
  const char              **base_names;
  swig_module_info   *module;
} swig_class;

typedef struct swig_instance {
  Tcl_Obj       *thisptr;
  void          *thisvalue;
  swig_class   *classptr;
  int            destroy;
  Tcl_Command    cmdtok;
} swig_instance;

/* Structure for command table */
typedef struct {
  const char *name;
  int       (*wrapper)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
  ClientData  clientdata;
} swig_command_info;

/* Structure for variable linking table */
typedef struct {
  const char *name;
  void *addr;
  char * (*get)(ClientData, Tcl_Interp *, char *, char *, int);
  char * (*set)(ClientData, Tcl_Interp *, char *, char *, int);
} swig_var_info;


/* -----------------------------------------------------------------------------*
 *  Install a constant object 
 * -----------------------------------------------------------------------------*/

static Tcl_HashTable   swigconstTable;
static int             swigconstTableinit = 0;

SWIGINTERN void
SWIG_Tcl_SetConstantObj(Tcl_Interp *interp, const char* name, Tcl_Obj *obj) {
  int newobj;
  Tcl_ObjSetVar2(interp,Tcl_NewStringObj(name,-1), NULL, obj, TCL_GLOBAL_ONLY);
  Tcl_SetHashValue(Tcl_CreateHashEntry(&swigconstTable, name, &newobj), (ClientData) obj);
}

SWIGINTERN Tcl_Obj *
SWIG_Tcl_GetConstantObj(const char *key) {
  Tcl_HashEntry *entryPtr;
  if (!swigconstTableinit) return 0;
  entryPtr = Tcl_FindHashEntry(&swigconstTable, key);
  if (entryPtr) {
    return (Tcl_Obj *) Tcl_GetHashValue(entryPtr);
  }
  return 0;
}

#ifdef __cplusplus
}
#endif



/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * tclrun.swg
 *
 * This file contains the runtime support for Tcl modules and includes
 * code for managing global variables and pointer type checking.
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_ConvertPtr(oc, ptr, ty, flags)             SWIG_Tcl_ConvertPtr(interp, oc, ptr, ty, flags)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Tcl_NewPointerObj(ptr, type, flags)

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Tcl_ConvertPacked(interp, obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Tcl_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_Tcl_ConvertPtr(interp, obj, pptr, type, flags)
#define SWIG_NewInstanceObj(thisvalue, type, flags)     SWIG_Tcl_NewInstanceObj(interp, thisvalue, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Tcl_ConvertPtr(interp, obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Tcl_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Tcl_ConvertPacked(interp,obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Tcl_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Tcl_GetModule((Tcl_Interp *) (clientdata))	     
#define SWIG_SetModule(clientdata, pointer)          	SWIG_Tcl_SetModule((Tcl_Interp *) (clientdata), pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Tcl_ErrorType(code)                                      
#define SWIG_Error(code, msg)            		SWIG_Tcl_SetErrorMsg(interp, SWIG_Tcl_ErrorType(code), msg)
#define SWIG_fail                        		goto fail						    


/* Tcl-specific SWIG API */

#define SWIG_Acquire(ptr)                               SWIG_Tcl_Acquire(ptr)                                     
#define SWIG_MethodCommand                           	SWIG_Tcl_MethodCommand				       
#define SWIG_Disown(ptr)                             	SWIG_Tcl_Disown(ptr)				       
#define SWIG_ConvertPtrFromString(c, ptr, ty, flags) 	SWIG_Tcl_ConvertPtrFromString(interp, c, ptr, ty, flags)  
#define SWIG_MakePtr(c, ptr, ty, flags)              	SWIG_Tcl_MakePtr(c, ptr, ty, flags)		       
#define SWIG_PointerTypeFromString(c)                	SWIG_Tcl_PointerTypeFromString(c)			       
#define SWIG_GetArgs                                 	SWIG_Tcl_GetArgs					       
#define SWIG_GetConstantObj(key)                     	SWIG_Tcl_GetConstantObj(key)			       
#define SWIG_ObjectConstructor                       	SWIG_Tcl_ObjectConstructor				       
#define SWIG_Thisown(ptr)                            	SWIG_Tcl_Thisown(ptr)				       
#define SWIG_ObjectDelete                            	SWIG_Tcl_ObjectDelete				       


#define SWIG_TCL_DECL_ARGS_2(arg1, arg2)                (Tcl_Interp *interp SWIGUNUSED, arg1, arg2)
#define SWIG_TCL_CALL_ARGS_2(arg1, arg2)                (interp, arg1, arg2)
/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_GetConstant        SWIG_GetConstantObj
#define SWIG_Tcl_GetConstant    SWIG_Tcl_GetConstantObj

#include "assert.h"

#ifdef __cplusplus
extern "C" {
#if 0
} /* cc-mode */
#endif
#endif

/* Object support */

SWIGRUNTIME Tcl_HashTable*
SWIG_Tcl_ObjectTable(void) {
  static Tcl_HashTable  swigobjectTable;
  static int            swigobjectTableinit = 0;
  if (!swigobjectTableinit) {
    Tcl_InitHashTable(&swigobjectTable, TCL_ONE_WORD_KEYS);
    swigobjectTableinit = 1;
  }
  return &swigobjectTable;
}

/* Acquire ownership of a pointer */
SWIGRUNTIME void
SWIG_Tcl_Acquire(void *ptr) {
  int newobj;
  Tcl_CreateHashEntry(SWIG_Tcl_ObjectTable(), (char *) ptr, &newobj);
}

SWIGRUNTIME int
SWIG_Tcl_Thisown(void *ptr) {
  if (Tcl_FindHashEntry(SWIG_Tcl_ObjectTable(), (char *) ptr)) {
    return 1;
  }
  return 0;
}

/* Disown a pointer.  Returns 1 if we owned it to begin with */
SWIGRUNTIME int
SWIG_Tcl_Disown(void *ptr) {
  Tcl_HashEntry *entryPtr = Tcl_FindHashEntry(SWIG_Tcl_ObjectTable(), (char *) ptr);
  if (entryPtr) {
    Tcl_DeleteHashEntry(entryPtr);
    return 1;
  }
  return 0;
}

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Tcl_ConvertPtrFromString(Tcl_Interp *interp, const char *c, void **ptr, swig_type_info *ty, int flags) {
  swig_cast_info *tc;
  /* Pointer values must start with leading underscore */
  while (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0) return SWIG_OK;

    /* Empty string: not a pointer */
    if (*c == 0) return SWIG_ERROR; 

    /* Hmmm. It could be an object name. */

    /* Check if this is a command at all. Prevents <c> cget -this         */
    /* from being called when c is not a command, firing the unknown proc */
    if (Tcl_VarEval(interp,"info commands ", c, (char *) NULL) == TCL_OK) {
      Tcl_Obj *result = Tcl_GetObjResult(interp);
      if (*(Tcl_GetStringFromObj(result, NULL)) == 0) {
        /* It's not a command, so it can't be a pointer */
        Tcl_ResetResult(interp);
        return SWIG_ERROR;
      }
    } else {
      /* This will only fail if the argument is multiple words. */
      /* Multiple words are also not commands.                  */
      Tcl_ResetResult(interp);
      return SWIG_ERROR;
    }

    /* Check if this is really a SWIG pointer */
    if (Tcl_VarEval(interp,c," cget -this", (char *) NULL) != TCL_OK) {
      Tcl_ResetResult(interp);
      return SWIG_ERROR;
    }

    c = Tcl_GetStringFromObj(Tcl_GetObjResult(interp), NULL);
  }

  c++;
  c = SWIG_UnpackData(c,ptr,sizeof(void *));
  if (ty) {
    tc = c ? SWIG_TypeCheck(c,ty) : 0;
    if (!tc) {
      return SWIG_ERROR;
    }
    if (flags & SWIG_POINTER_DISOWN) {
      SWIG_Disown((void *) *ptr);
    }
    {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,(void *) *ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    }
  }
  return SWIG_OK;
}

/* Convert a pointer value */
SWIGRUNTIMEINLINE int
SWIG_Tcl_ConvertPtr(Tcl_Interp *interp, Tcl_Obj *oc, void **ptr, swig_type_info *ty, int flags) {
  return SWIG_Tcl_ConvertPtrFromString(interp, Tcl_GetStringFromObj(oc,NULL), ptr, ty, flags);
}

/* Convert a pointer value */
SWIGRUNTIME char *
SWIG_Tcl_PointerTypeFromString(char *c) {
  char d;
  /* Pointer values must start with leading underscore. NULL has no type */
  if (*c != '_') {
    return 0;
  }
  c++;
  /* Extract hex value from pointer */
  while ((d = *c)) {
    if (!(((d >= '0') && (d <= '9')) || ((d >= 'a') && (d <= 'f')))) break;
    c++;
  }
  return c;
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Tcl_ConvertPacked(Tcl_Interp *SWIGUNUSEDPARM(interp) , Tcl_Obj *obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c;

  if (!obj) goto type_error;
  c = Tcl_GetStringFromObj(obj,NULL);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return SWIG_OK;

 type_error:

  return SWIG_ERROR;
}


/* Take a pointer and convert it to a string */
SWIGRUNTIME void
SWIG_Tcl_MakePtr(char *c, void *ptr, swig_type_info *ty, int flags) {
  if (ptr) {
    *(c++) = '_';
    c = SWIG_PackData(c,&ptr,sizeof(void *));
    strcpy(c,ty->name);
  } else {
    strcpy(c,(char *)"NULL");
  }
  flags = 0;
}

/* Create a new pointer object */
SWIGRUNTIMEINLINE Tcl_Obj *
SWIG_Tcl_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  Tcl_Obj *robj;
  char result[SWIG_BUFFER_SIZE];
  SWIG_MakePtr(result,ptr,type,flags);
  robj = Tcl_NewStringObj(result,-1);
  return robj;
}

SWIGRUNTIME Tcl_Obj *
SWIG_Tcl_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  return Tcl_NewStringObj(result,-1);
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

SWIGRUNTIME swig_module_info * 
SWIG_Tcl_GetModule(Tcl_Interp *interp) {
  const char *data;
  swig_module_info *ret = 0;
  
  /* first check if pointer already created */
  data = Tcl_GetVar(interp, (char *)"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, TCL_GLOBAL_ONLY);
  if (data) {
    SWIG_UnpackData(data, &ret, sizeof(swig_type_info **));
  }

  return ret;
}

SWIGRUNTIME void
SWIG_Tcl_SetModule(Tcl_Interp *interp, swig_module_info *module) {
  char buf[SWIG_BUFFER_SIZE];
  char *data;

  /* create a new pointer */
  data = SWIG_PackData(buf, &module, sizeof(swig_type_info **));
  *data = 0;
  Tcl_SetVar(interp, (char *)"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, buf, 0);
}

/* -----------------------------------------------------------------------------*
 *  Object auxiliars
 * -----------------------------------------------------------------------------*/


SWIGRUNTIME void
SWIG_Tcl_ObjectDelete(ClientData clientData) {
  swig_instance *si = (swig_instance *) clientData;
  if ((si) && (si->destroy) && (SWIG_Disown(si->thisvalue))) {
    if (si->classptr->destructor) {
      (si->classptr->destructor)(si->thisvalue);
    }
  }
  Tcl_DecrRefCount(si->thisptr);
  free(si);
}

/* Function to invoke object methods given an instance */
SWIGRUNTIME int
SWIG_Tcl_MethodCommand(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  char *method,   *attrname;
  swig_instance   *inst = (swig_instance *) clientData;
  swig_method     *meth;
  swig_attribute  *attr;
  Tcl_Obj         *oldarg;
  Tcl_Obj         **objv;
  int              rcode;
  swig_class      *cls;
  swig_class      *cls_stack[64];
  int              cls_stack_bi[64];
  int              cls_stack_top = 0;
  int              numconf = 2;
  int              bi;

  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
    return TCL_ERROR;
  }
  method = Tcl_GetStringFromObj(objv[1],NULL);
  if (strcmp(method,"-acquire") == 0) {
    inst->destroy = 1;
    SWIG_Acquire(inst->thisvalue);
    return TCL_OK;
  }
  if (strcmp(method,"-disown") == 0) {
    if (inst->destroy) {
      SWIG_Disown(inst->thisvalue);
    }
    inst->destroy = 0;
    return TCL_OK;
  }
  if (strcmp(method,"-delete") == 0) {
    Tcl_DeleteCommandFromToken(interp,inst->cmdtok);
    return TCL_OK;
  }
  cls_stack[cls_stack_top] = inst->classptr;
  cls_stack_bi[cls_stack_top] = -1;
  cls = inst->classptr;
  while (1) {
    bi = cls_stack_bi[cls_stack_top];
    cls = cls_stack[cls_stack_top];
    if (bi != -1) {
      if (!cls->bases[bi] && cls->base_names[bi]) {
        /* lookup and cache the base class */
	swig_type_info *info = SWIG_TypeQueryModule(cls->module, cls->module, cls->base_names[bi]);
	if (info) cls->bases[bi] = (swig_class *) info->clientdata;
      }
      cls = cls->bases[bi];
      if (cls) {
        cls_stack_bi[cls_stack_top]++;
        cls_stack_top++;
        cls_stack[cls_stack_top] = cls;
        cls_stack_bi[cls_stack_top] = -1;
        continue;
      }
    }
    if (!cls) {
      cls_stack_top--;
      if (cls_stack_top < 0) break;
      else continue;
    }
    cls_stack_bi[cls_stack_top]++;

    meth = cls->methods;
    /* Check for methods */
    while (meth && meth->name) {
      if (strcmp(meth->name,method) == 0) {
        oldarg = objv[1];
        objv[1] = inst->thisptr;
        Tcl_IncrRefCount(inst->thisptr);
        rcode = (*meth->method)(clientData,interp,objc,objv);
        objv[1] = oldarg;
        Tcl_DecrRefCount(inst->thisptr);
        return rcode;
      }
      meth++;
    }
    /* Check class methods for a match */
    if (strcmp(method,"cget") == 0) {
      if (objc < 3) {
        Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
        return TCL_ERROR;
      }
      attrname = Tcl_GetStringFromObj(objv[2],NULL);
      attr = cls->attributes;
      while (attr && attr->name) {
        if ((strcmp(attr->name, attrname) == 0) && (attr->getmethod)) {
          oldarg = objv[1];
          objv[1] = inst->thisptr;
          Tcl_IncrRefCount(inst->thisptr);
          rcode = (*attr->getmethod)(clientData,interp,2, objv);
          objv[1] = oldarg;
          Tcl_DecrRefCount(inst->thisptr);
          return rcode;
        }
        attr++;
      }
      if (strcmp(attrname, "-this") == 0) {
        Tcl_SetObjResult(interp, Tcl_DuplicateObj(inst->thisptr));
        return TCL_OK;
      }
      if (strcmp(attrname, "-thisown") == 0) {
        if (SWIG_Thisown(inst->thisvalue)) {
          Tcl_SetResult(interp,(char*)"1",TCL_STATIC);
        } else {
          Tcl_SetResult(interp,(char*)"0",TCL_STATIC);
        }
        return TCL_OK;
      }
    } else if (strcmp(method, "configure") == 0) {
      int i;
      if (objc < 4) {
        Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
        return TCL_ERROR;
      }
      i = 2;
      while (i < objc) {
        attrname = Tcl_GetStringFromObj(objv[i],NULL);
        attr = cls->attributes;
        while (attr && attr->name) {
          if ((strcmp(attr->name, attrname) == 0) && (attr->setmethod)) {
            oldarg = objv[i];
            objv[i] = inst->thisptr;
            Tcl_IncrRefCount(inst->thisptr);
            rcode = (*attr->setmethod)(clientData,interp,3, &objv[i-1]);
            objv[i] = oldarg;
            Tcl_DecrRefCount(inst->thisptr);
            if (rcode != TCL_OK) return rcode;
            numconf += 2;
          }
          attr++;
        }
        i+=2;
      }
    }
  }
  if (strcmp(method,"configure") == 0) {
    if (numconf >= objc) {
      return TCL_OK;
    } else {
      Tcl_SetResult(interp,(char *) "Invalid attribute name.", TCL_STATIC);
      return TCL_ERROR;
    }
  }
  if (strcmp(method,"cget") == 0) {
    Tcl_SetResult(interp,(char *) "Invalid attribute name.", TCL_STATIC);
    return TCL_ERROR;
  }
  Tcl_SetResult(interp, (char *) "Invalid method. Must be one of: configure cget -acquire -disown -delete", TCL_STATIC);
  cls = inst->classptr;
  bi = 0;
  while (cls) {
    meth = cls->methods;
    while (meth && meth->name) {
      char *cr = (char *) Tcl_GetStringResult(interp);
      size_t meth_len = strlen(meth->name);
      char* where = strchr(cr,':');
      while(where) {
        where = strstr(where, meth->name);
        if(where) {
          if(where[-1] == ' ' && (where[meth_len] == ' ' || where[meth_len]==0)) {
            break;
          } else {
            where++;
          }
        }
      }

      if (!where)
        Tcl_AppendElement(interp, (char *) meth->name);
      meth++;
    }
    cls = inst->classptr->bases[bi++];
  }
  return TCL_ERROR;
}

/* This function takes the current result and turns it into an object command */
SWIGRUNTIME Tcl_Obj *
SWIG_Tcl_NewInstanceObj(Tcl_Interp *interp, void *thisvalue, swig_type_info *type, int flags) {
  Tcl_Obj *robj = SWIG_NewPointerObj(thisvalue, type,0);
  /* Check to see if this pointer belongs to a class or not */
  if ((type->clientdata) && (interp)) {
    Tcl_CmdInfo    ci;
    char          *name;
    name = Tcl_GetStringFromObj(robj,NULL);
    if (!Tcl_GetCommandInfo(interp,name, &ci) || (flags)) {
      swig_instance *newinst = (swig_instance *) malloc(sizeof(swig_instance));
      newinst->thisptr = Tcl_DuplicateObj(robj);
      Tcl_IncrRefCount(newinst->thisptr);
      newinst->thisvalue = thisvalue;
      newinst->classptr = (swig_class *) type->clientdata;
      newinst->destroy = flags;
      newinst->cmdtok = Tcl_CreateObjCommand(interp, Tcl_GetStringFromObj(robj,NULL), (swig_wrapper_func) SWIG_MethodCommand, (ClientData) newinst, (swig_delete_func) SWIG_ObjectDelete);
      if (flags) {
        SWIG_Acquire(thisvalue);
      }
    }
  }
  return robj;
}

/* Function to create objects */
SWIGRUNTIME int
SWIG_Tcl_ObjectConstructor(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj          *newObj = 0;
  void             *thisvalue = 0;
  swig_instance   *newinst = 0;
  swig_class      *classptr = (swig_class *) clientData;
  swig_wrapper     cons = 0;
  char             *name = 0;
  int               firstarg = 0;
  int               thisarg = 0;
  int               destroy = 1;

  if (!classptr) {
    Tcl_SetResult(interp, (char *) "swig: internal runtime error. No class object defined.", TCL_STATIC);
    return TCL_ERROR;
  }
  cons = classptr->constructor;
  if (objc > 1) {
    char *s = Tcl_GetStringFromObj(objv[1],NULL);
    if (strcmp(s,"-this") == 0) {
      thisarg = 2;
      cons = 0;
    } else if (strcmp(s,"-args") == 0) {
      firstarg = 1;
    } else if (objc == 2) {
      firstarg = 1;
      name = s;
    } else if (objc >= 3) {
      char *s1;
      name = s;
      s1 = Tcl_GetStringFromObj(objv[2],NULL);
      if (strcmp(s1,"-this") == 0) {
	thisarg = 3;
	cons = 0;
      } else {
	firstarg = 1;
      }
    }
  }
  if (cons) {
    int result;
    result = (*cons)(0, interp, objc-firstarg, &objv[firstarg]);
    if (result != TCL_OK) {
      return result;
    }
    newObj = Tcl_DuplicateObj(Tcl_GetObjResult(interp));
    if (!name) name = Tcl_GetStringFromObj(newObj,NULL);
  } else if (thisarg > 0) {
    if (thisarg < objc) {
      destroy = 0;
      newObj = Tcl_DuplicateObj(objv[thisarg]);
      if (!name) name = Tcl_GetStringFromObj(newObj,NULL);
    } else {
      Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
      return TCL_ERROR;
    }
  } else {
    Tcl_SetResult(interp, (char *) "No constructor available.", TCL_STATIC);
    return TCL_ERROR;
  }
  if (SWIG_Tcl_ConvertPtr(interp,newObj, (void **) &thisvalue, *(classptr->type), 0) != SWIG_OK) {
    Tcl_DecrRefCount(newObj);
    return TCL_ERROR;
  }
  newinst = (swig_instance *) malloc(sizeof(swig_instance));
  newinst->thisptr = newObj;
  Tcl_IncrRefCount(newObj);
  newinst->thisvalue = thisvalue;
  newinst->classptr = classptr;
  newinst->destroy = destroy;
  if (destroy) {
    SWIG_Acquire(thisvalue);
  }
  newinst->cmdtok = Tcl_CreateObjCommand(interp,name, (swig_wrapper) SWIG_MethodCommand, (ClientData) newinst, (swig_delete_func) SWIG_ObjectDelete);
  return TCL_OK;
}

/* -----------------------------------------------------------------------------*
 *   Get arguments 
 * -----------------------------------------------------------------------------*/
SWIGRUNTIME int
SWIG_Tcl_GetArgs(Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[], const char *fmt, ...) {
  int        argno = 0, opt = 0;
  long       tempi;
  double     tempd;
  const char *c;
  va_list    ap;
  void      *vptr;
  Tcl_Obj   *obj = 0;
  swig_type_info *ty;

  va_start(ap,fmt);
  for (c = fmt; (*c && (*c != ':') && (*c != ';')); c++,argno++) {
    if (*c == '|') {
      opt = 1;
      c++;
    }
    if (argno >= (objc-1)) {
      if (!opt) {
        Tcl_SetResult(interp, (char *) "Wrong number of arguments ", TCL_STATIC);
        goto argerror;
      } else {
        va_end(ap);
        return TCL_OK;
      }
    }

    vptr = va_arg(ap,void *);
    if (vptr) {
      if (isupper(*c)) {
        obj = SWIG_Tcl_GetConstantObj(Tcl_GetStringFromObj(objv[argno+1],0));
        if (!obj) obj = objv[argno+1];
      } else {
        obj = objv[argno+1];
      }
      switch(*c) {
      case 'i': case 'I':
      case 'l': case 'L':
      case 'h': case 'H':
      case 'b': case 'B':
        if (Tcl_GetLongFromObj(interp,obj,&tempi) != TCL_OK) goto argerror;
        if ((*c == 'i') || (*c == 'I')) *((int *)vptr) = (int)tempi;
        else if ((*c == 'l') || (*c == 'L')) *((long *)vptr) = (long)tempi;
        else if ((*c == 'h') || (*c == 'H')) *((short*)vptr) = (short)tempi;
        else if ((*c == 'b') || (*c == 'B')) *((unsigned char *)vptr) = (unsigned char)tempi;
        break;
      case 'f': case 'F':
      case 'd': case 'D':
        if (Tcl_GetDoubleFromObj(interp,obj,&tempd) != TCL_OK) goto argerror;
        if ((*c == 'f') || (*c == 'F')) *((float *) vptr) = (float)tempd;
        else if ((*c == 'd') || (*c == 'D')) *((double*) vptr) = tempd;
        break;
      case 's': case 'S':
        if (*(c+1) == '#') {
          int *vlptr = (int *) va_arg(ap, void *);
          *((char **) vptr) = Tcl_GetStringFromObj(obj, vlptr);
          c++;
        } else {
          *((char **)vptr) = Tcl_GetStringFromObj(obj,NULL);
        }
        break;
      case 'c': case 'C':
        *((char *)vptr) = *(Tcl_GetStringFromObj(obj,NULL));
        break;
      case 'p': case 'P':
        ty = (swig_type_info *) va_arg(ap, void *);
        if (SWIG_Tcl_ConvertPtr(interp, obj, (void **) vptr, ty, 0) != SWIG_OK) goto argerror;
        break;
      case 'o': case 'O':
        *((Tcl_Obj **)vptr) = objv[argno+1];
        break;
      default:
        break;
      }
    }
  }

  if ((*c != ';') && ((objc-1) > argno)) {
    Tcl_SetResult(interp, (char *) "Wrong # args.", TCL_STATIC);
    goto argerror;
  }
  va_end(ap);
  return TCL_OK;

 argerror:
  {
    char temp[32];
    sprintf(temp,"%d", argno+1);
    c = strchr(fmt,':');
    if (!c) c = strchr(fmt,';');
    if (!c) c = (char *)"";
    Tcl_AppendResult(interp,c," argument ", temp, NULL);
    va_end(ap);
    return TCL_ERROR;
  }
}

#ifdef __cplusplus
#if 0
{ /* cc-mode */
#endif
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); return TCL_ERROR;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_CPLErrorHandler swig_types[0]
#define SWIGTYPE_p_CPLXMLNode swig_types[1]
#define SWIGTYPE_p_GByte swig_types[2]
#define SWIGTYPE_p_GDALColorEntry swig_types[3]
#define SWIGTYPE_p_GDALColorTableShadow swig_types[4]
#define SWIGTYPE_p_GDALDatasetShadow swig_types[5]
#define SWIGTYPE_p_GDALDriverShadow swig_types[6]
#define SWIGTYPE_p_GDALMajorObjectShadow swig_types[7]
#define SWIGTYPE_p_GDALProgressFunc swig_types[8]
#define SWIGTYPE_p_GDALRasterAttributeTableShadow swig_types[9]
#define SWIGTYPE_p_GDALRasterBandShadow swig_types[10]
#define SWIGTYPE_p_GDALTransformerInfoShadow swig_types[11]
#define SWIGTYPE_p_GDAL_GCP swig_types[12]
#define SWIGTYPE_p_OGRLayerShadow swig_types[13]
#define SWIGTYPE_p_char swig_types[14]
#define SWIGTYPE_p_double swig_types[15]
#define SWIGTYPE_p_f_double_p_q_const__char_p_void__int swig_types[16]
#define SWIGTYPE_p_int swig_types[17]
#define SWIGTYPE_p_p_GDALRasterBandShadow swig_types[18]
#define SWIGTYPE_p_p_GDAL_GCP swig_types[19]
#define SWIGTYPE_p_p_char swig_types[20]
#define SWIGTYPE_p_p_int swig_types[21]
static swig_type_info *swig_types[23];
static swig_module_info swig_module = {swig_types, 22, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Gdal_Init
#define SWIG_name    "gdal"
#define SWIG_prefix  "osgeo::"
#define SWIG_namespace "osgeo"

#define SWIG_version "1.0"

#define SWIGVERSION 0x010336 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>



#ifdef __cplusplus
extern "C" {
#endif
#ifdef MAC_TCL
#pragma export on
#endif
SWIGEXPORT int SWIG_init(Tcl_Interp *);
#ifdef MAC_TCL
#pragma export off
#endif
#ifdef __cplusplus
}
#endif



#include <iostream>
using namespace std;

#include "cpl_port.h"
#include "cpl_string.h"

#include "gdal.h"
#include "gdal_priv.h"
#include "gdal_alg.h"
#include "gdalwarper.h"

typedef void GDALMajorObjectShadow;
typedef void GDALDriverShadow;
typedef void GDALDatasetShadow;
typedef void GDALRasterBandShadow;
typedef void GDALColorTableShadow;
typedef void GDALRasterAttributeTableShadow;
typedef void GDALTransformerInfoShadow;

typedef int FALSE_IS_ERR;



#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_long SWIG_TCL_DECL_ARGS_2(Tcl_Obj *obj, long* val)
{
  long v;
  if (Tcl_GetLongFromObj(0,obj, &v) == TCL_OK) {
    if (val) *val = (long) v;
    return SWIG_OK;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE Tcl_Obj* 
SWIG_From_long  (long value)
{
  if (((long) INT_MIN <= value) && (value <= (long) INT_MAX)) {
    return Tcl_NewIntObj(static_cast< int >(value));
  } else {
    return Tcl_NewLongObj(value);
  }
}


SWIGINTERNINLINE Tcl_Obj *
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


void VeryQuiteErrorHandler(CPLErr eclass, int code, const char *msg ) {
  /* If the error class is CE_Fatal, we want to have a message issued
     because the CPL support code does an abort() before any exception
     can be generated */
  if (eclass == CE_Fatal ) {
    CPLDefaultErrorHandler(eclass, code, msg );
  }
}


void UseExceptions() {
  CPLSetErrorHandler( (CPLErrorHandler) VeryQuiteErrorHandler );
}

void DontUseExceptions() {
  CPLSetErrorHandler( CPLDefaultErrorHandler );
}



typedef struct {
    Tcl_Interp *interp;
    Tcl_Obj *psTclCallback;
    Tcl_Obj *psTclCallbackData;
    int nLastReported;
} TclProgressData;


/************************************************************************/
/*                         TclProgressProxy()                           */
/************************************************************************/

int CPL_STDCALL
TclProgressProxy( double dfComplete, const char *pszMessage, void *pData )
{
    TclProgressData *psInfo = (TclProgressData *) pData;

    if( psInfo->nLastReported == (int) (100.0 * dfComplete) )
        return TRUE;

    if( psInfo->psTclCallback == NULL || !strcmp(Tcl_GetString(psInfo->psTclCallback), "") )
        return TRUE;

    psInfo->nLastReported = (int) (100.0 * dfComplete);

    if( pszMessage == NULL )
        pszMessage = "";

    Tcl_Obj *objv[4];
    objv[0] = psInfo->psTclCallback;
    objv[1] = Tcl_NewDoubleObj(dfComplete);
    objv[2] = Tcl_NewStringObj(pszMessage, -1);
    objv[3] = psInfo->psTclCallbackData;

    int psResult;
    if( psInfo->psTclCallbackData == NULL )
        psResult = Tcl_EvalObjv( psInfo->interp, 3, objv, TCL_EVAL_GLOBAL ); 
    else
        psResult = Tcl_EvalObjv( psInfo->interp, 4, objv, TCL_EVAL_GLOBAL ); 

    Tcl_DecrRefCount(objv[1]);
    Tcl_DecrRefCount(objv[2]);

    if( psResult == TCL_BREAK )
        return FALSE;

    return TRUE;
}


  void Debug( const char *msg_class, const char *message ) {
    CPLDebug( msg_class, "%s", message );
  }
  void Error( CPLErr msg_class = CE_Failure, int err_code = 0, const char* msg = "error" ) {
    CPLError( msg_class, err_code, "%s", msg );
  }

  CPLErr PushErrorHandler( char const * pszCallbackName = "CPLQuietErrorHandler" ) {
    CPLErrorHandler pfnHandler = NULL;
    if( EQUAL(pszCallbackName,"CPLQuietErrorHandler") )
      pfnHandler = CPLQuietErrorHandler;
    else if( EQUAL(pszCallbackName,"CPLDefaultErrorHandler") )
      pfnHandler = CPLDefaultErrorHandler;
    else if( EQUAL(pszCallbackName,"CPLLoggingErrorHandler") )
      pfnHandler = CPLLoggingErrorHandler;

    if ( pfnHandler == NULL )
      return CE_Fatal;

    CPLPushErrorHandler( pfnHandler );

    return CE_None;
  }



SWIGINTERN int
SWIG_AsCharPtrAndSize(Tcl_Obj *obj, char** cptr, size_t* psize, int *alloc)
{ 
  int len = 0;
  char *cstr = Tcl_GetStringFromObj(obj, &len);
  if (cstr) {
    if (cptr)  *cptr = cstr;
    if (psize) *psize = len + 1;
    if (alloc) *alloc = SWIG_OLDOBJ;
    return SWIG_OK;
  }
  return SWIG_TypeError;
}





char* EscapeString(int len, char *bin_string , int scheme=CPLES_SQL) {
    return CPLEscapeString(bin_string, len, scheme);
} 


SWIGINTERNINLINE Tcl_Obj *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  return (size < INT_MAX) ? Tcl_NewStringObj(carray, static_cast< int >(size)) : NULL;
}


SWIGINTERNINLINE Tcl_Obj * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}

SWIGINTERN char const *GDALMajorObjectShadow_GetDescription(GDALMajorObjectShadow *self){
    return GDALGetDescription( self );
  }
SWIGINTERN void GDALMajorObjectShadow_SetDescription(GDALMajorObjectShadow *self,char const *pszNewDesc){
    GDALSetDescription( self, pszNewDesc );
  }
SWIGINTERN char **GDALMajorObjectShadow_GetMetadata_Dict(GDALMajorObjectShadow *self,char const *pszDomain=""){
    return GDALGetMetadata( self, pszDomain );
  }
SWIGINTERN char **GDALMajorObjectShadow_GetMetadata_List(GDALMajorObjectShadow *self,char const *pszDomain=""){
    return GDALGetMetadata( self, pszDomain );
  }
SWIGINTERN CPLErr GDALMajorObjectShadow_SetMetadata__SWIG_0(GDALMajorObjectShadow *self,char **papszMetadata,char const *pszDomain=""){
    return GDALSetMetadata( self, papszMetadata, pszDomain );
  }
SWIGINTERN CPLErr GDALMajorObjectShadow_SetMetadata__SWIG_1(GDALMajorObjectShadow *self,char *pszMetadataString,char const *pszDomain=""){
    char *tmpList[2];
    tmpList[0] = pszMetadataString;
    tmpList[1] = 0;
    return GDALSetMetadata( self, tmpList, pszDomain );
  }
SWIGINTERN char const *GDALMajorObjectShadow_GetMetadataItem(GDALMajorObjectShadow *self,char const *pszName,char const *pszDomain=""){
    return GDALGetMetadataItem( self, pszName, pszDomain);
  }
SWIGINTERN CPLErr GDALMajorObjectShadow_SetMetadataItem(GDALMajorObjectShadow *self,char const *pszName,char const *pszValue,char const *pszDomain=""){
    return GDALSetMetadataItem( self, pszName, pszValue, pszDomain);
  }
SWIGINTERN GDALDatasetShadow *GDALDriverShadow_Create(GDALDriverShadow *self,char const *name,int xsize,int ysize,int bands=1,GDALDataType eType=GDT_Byte,char **options=0){

    GDALDatasetShadow* ds = (GDALDatasetShadow*) GDALCreate(    self, 
                                                                name, 
                                                                xsize, 
                                                                ysize, 
                                                                bands, 
                                                                eType, 
                                                                options );
    return ds;
  }
SWIGINTERN GDALDatasetShadow *GDALDriverShadow_CreateCopy(GDALDriverShadow *self,char const *name,GDALDatasetShadow *src,int strict=1,char **options=0,GDALProgressFunc callback=NULL,void *callback_data=NULL){

    GDALDatasetShadow *ds = (GDALDatasetShadow*) GDALCreateCopy(    self, 
                                                                    name, 
                                                                    src, 
                                                                    strict, 
                                                                    options, 
                                                                    callback, 
                                                                    callback_data );
    return ds;
  }
SWIGINTERN int GDALDriverShadow_Delete(GDALDriverShadow *self,char const *name){
    return GDALDeleteDataset( self, name );
  }
SWIGINTERN int GDALDriverShadow_Rename(GDALDriverShadow *self,char const *newName,char const *oldName){
    return GDALRenameDataset( self, newName, oldName );
  }
SWIGINTERN int GDALDriverShadow_Register(GDALDriverShadow *self){
    return GDALRegisterDriver( self );
  }
SWIGINTERN void GDALDriverShadow_Deregister(GDALDriverShadow *self){
    GDALDeregisterDriver( self );
  }

char const *GDALDriverShadow_ShortName_get( GDALDriverShadow *h ) {
  return GDALGetDriverShortName( h );
}
char const *GDALDriverShadow_LongName_get( GDALDriverShadow *h ) {
  return GDALGetDriverLongName( h );
}
char const *GDALDriverShadow_HelpTopic_get( GDALDriverShadow *h ) {
  return GDALGetDriverHelpTopic( h );
}


SWIGINTERN int
SWIG_AsVal_short SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, short *val)
{
  long v;
  int res = SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < SHRT_MIN || v > SHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< short >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE Tcl_Obj *
SWIG_From_short  (short value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERN int
SWIG_AsVal_double SWIG_TCL_DECL_ARGS_2(Tcl_Obj *obj, double *val)
{
  double v;
  if (Tcl_GetDoubleFromObj(0, obj, &v) == TCL_OK) {
    if (val) *val = v;
    return SWIG_OK;
  }
  return SWIG_TypeError;
}


  #define SWIG_From_double   Tcl_NewDoubleObj 

SWIGINTERN GDAL_GCP *new_GDAL_GCP(double x=0.0,double y=0.0,double z=0.0,double pixel=0.0,double line=0.0,char const *info="",char const *id=""){
    GDAL_GCP *self = (GDAL_GCP*) CPLMalloc( sizeof( GDAL_GCP ) );
    self->dfGCPX = x;
    self->dfGCPY = y;
    self->dfGCPZ = z;
    self->dfGCPPixel = pixel;
    self->dfGCPLine = line;
    self->pszInfo =  CPLStrdup( (info == 0) ? "" : info );
    self->pszId = CPLStrdup( (id==0)? "" : id );
    return self;
  }
SWIGINTERN void delete_GDAL_GCP(GDAL_GCP *self){
    if ( self->pszInfo )
      CPLFree( self->pszInfo );
    if ( self->pszId )
      CPLFree( self->pszId );
    CPLFree( self );
  }


double GDAL_GCP_GCPX_get( GDAL_GCP *h ) {
  return h->dfGCPX;
}
void GDAL_GCP_GCPX_set( GDAL_GCP *h, double val ) {
  h->dfGCPX = val;
}
double GDAL_GCP_GCPY_get( GDAL_GCP *h ) {
  return h->dfGCPY;
}
void GDAL_GCP_GCPY_set( GDAL_GCP *h, double val ) {
  h->dfGCPY = val;
}
double GDAL_GCP_GCPZ_get( GDAL_GCP *h ) {
  return h->dfGCPZ;
}
void GDAL_GCP_GCPZ_set( GDAL_GCP *h, double val ) {
  h->dfGCPZ = val;
}
double GDAL_GCP_GCPPixel_get( GDAL_GCP *h ) {
  return h->dfGCPPixel;
}
void GDAL_GCP_GCPPixel_set( GDAL_GCP *h, double val ) {
  h->dfGCPPixel = val;
}
double GDAL_GCP_GCPLine_get( GDAL_GCP *h ) {
  return h->dfGCPLine;
}
void GDAL_GCP_GCPLine_set( GDAL_GCP *h, double val ) {
  h->dfGCPLine = val;
}
const char * GDAL_GCP_Info_get( GDAL_GCP *h ) {
  return h->pszInfo;
}
void GDAL_GCP_Info_set( GDAL_GCP *h, const char * val ) {
  if ( h->pszInfo ) 
    CPLFree( h->pszInfo );
  h->pszInfo = CPLStrdup(val);
}
const char * GDAL_GCP_Id_get( GDAL_GCP *h ) {
  return h->pszId;
}
void GDAL_GCP_Id_set( GDAL_GCP *h, const char * val ) {
  if ( h->pszId ) 
    CPLFree( h->pszId );
  h->pszId = CPLStrdup(val);
}



/* Duplicate, but transposed names for C# because 
*  the C# module outputs backwards names
*/
double GDAL_GCP_get_GCPX( GDAL_GCP *h ) {
  return h->dfGCPX;
}
void GDAL_GCP_set_GCPX( GDAL_GCP *h, double val ) {
  h->dfGCPX = val;
}
double GDAL_GCP_get_GCPY( GDAL_GCP *h ) {
  return h->dfGCPY;
}
void GDAL_GCP_set_GCPY( GDAL_GCP *h, double val ) {
  h->dfGCPY = val;
}
double GDAL_GCP_get_GCPZ( GDAL_GCP *h ) {
  return h->dfGCPZ;
}
void GDAL_GCP_set_GCPZ( GDAL_GCP *h, double val ) {
  h->dfGCPZ = val;
}
double GDAL_GCP_get_GCPPixel( GDAL_GCP *h ) {
  return h->dfGCPPixel;
}
void GDAL_GCP_set_GCPPixel( GDAL_GCP *h, double val ) {
  h->dfGCPPixel = val;
}
double GDAL_GCP_get_GCPLine( GDAL_GCP *h ) {
  return h->dfGCPLine;
}
void GDAL_GCP_set_GCPLine( GDAL_GCP *h, double val ) {
  h->dfGCPLine = val;
}
const char * GDAL_GCP_get_Info( GDAL_GCP *h ) {
  return h->pszInfo;
}
void GDAL_GCP_set_Info( GDAL_GCP *h, const char * val ) {
  if ( h->pszInfo ) 
    CPLFree( h->pszInfo );
  h->pszInfo = CPLStrdup(val);
}
const char * GDAL_GCP_get_Id( GDAL_GCP *h ) {
  return h->pszId;
}
void GDAL_GCP_set_Id( GDAL_GCP *h, const char * val ) {
  if ( h->pszId ) 
    CPLFree( h->pszId );
  h->pszId = CPLStrdup(val);
}



static Tcl_Obj*
CreateListFromDoubleArray(Tcl_Interp *interp, double *first, unsigned int size ) {
  Tcl_Obj *out = Tcl_NewListObj(0, NULL);
  for( unsigned int i=0; i<size; i++ ) {
    Tcl_Obj *val = Tcl_NewDoubleObj( *first );
    ++first;
    if (Tcl_ListObjAppendElement(interp, out, val) != TCL_OK) {
        Tcl_DecrRefCount(val);
        Tcl_DecrRefCount(out);
        /* Error msg in interp result */
        return NULL; /* signifies error */
    }
  }
  return out;
}




static
CPLErr DSReadRaster_internal( GDALDatasetShadow *obj, 
                            int xoff, int yoff, int xsize, int ysize,
                            int buf_xsize, int buf_ysize,
                            GDALDataType buf_type,
                            int *buf_size, char **buf,
                            int band_list, int *pband_list )
{
  CPLErr result;
  *buf_size = (size_t)buf_xsize * buf_ysize * (GDALGetDataTypeSize( buf_type ) / 8) * band_list;
  *buf = (char*) VSIMalloc3( buf_xsize, buf_ysize, (GDALGetDataTypeSize( buf_type ) / 8) * band_list );
  if (*buf)
  {
    result = GDALDatasetRasterIO(obj, GF_Read, xoff, yoff, xsize, ysize,
                                    (void*) *buf, buf_xsize, buf_ysize, buf_type,
                                    band_list, pband_list, 0, 0, 0 );
    if ( result != CE_None ) {
        free( *buf );
        *buf = 0;
        *buf_size = 0;
    }
  }
  else
  {
    result = CE_Failure;
    *buf = 0;
    *buf_size = 0;
  }
  return result;
}

SWIGINTERN void delete_GDALDatasetShadow(GDALDatasetShadow *self){
    if ( GDALDereferenceDataset( self ) <= 0 ) {
      GDALClose(self);
    }
  }
SWIGINTERN GDALDriverShadow *GDALDatasetShadow_GetDriver(GDALDatasetShadow *self){
    return (GDALDriverShadow*) GDALGetDatasetDriver( self );
  }
SWIGINTERN GDALRasterBandShadow *GDALDatasetShadow_GetRasterBand(GDALDatasetShadow *self,int nBand){
    return (GDALRasterBandShadow*) GDALGetRasterBand( self, nBand );
  }
SWIGINTERN char const *GDALDatasetShadow_GetProjection(GDALDatasetShadow *self){
    return GDALGetProjectionRef( self );
  }
SWIGINTERN char const *GDALDatasetShadow_GetProjectionRef(GDALDatasetShadow *self){
    return GDALGetProjectionRef( self );
  }
SWIGINTERN CPLErr GDALDatasetShadow_SetProjection(GDALDatasetShadow *self,char const *prj){
    return GDALSetProjection( self, prj );
  }
SWIGINTERN void GDALDatasetShadow_GetGeoTransform(GDALDatasetShadow *self,double argout[6]){
    if ( GDALGetGeoTransform( self, argout ) != 0 ) {
      argout[0] = 0.0;
      argout[1] = 1.0;
      argout[2] = 0.0;
      argout[3] = 0.0;
      argout[4] = 0.0;
      argout[5] = 1.0;
    }
  }
SWIGINTERN CPLErr GDALDatasetShadow_SetGeoTransform(GDALDatasetShadow *self,double argin[6]){
    return GDALSetGeoTransform( self, argin );
  }
SWIGINTERN int GDALDatasetShadow_BuildOverviews(GDALDatasetShadow *self,char const *resampling="NEAREST",int overviewlist=0,int *pOverviews=0,GDALProgressFunc callback=NULL,void *callback_data=NULL){
                      
    return GDALBuildOverviews(  self, 
                                resampling, 
                                overviewlist, 
                                pOverviews, 
                                0, 
                                0, 
                                callback, 
                                callback_data);
  }
SWIGINTERN int GDALDatasetShadow_GetGCPCount(GDALDatasetShadow *self){
    return GDALGetGCPCount( self );
  }
SWIGINTERN char const *GDALDatasetShadow_GetGCPProjection(GDALDatasetShadow *self){
    return GDALGetGCPProjection( self );
  }
SWIGINTERN void GDALDatasetShadow_GetGCPs(GDALDatasetShadow *self,int *nGCPs,GDAL_GCP const **pGCPs){
    *nGCPs = GDALGetGCPCount( self );
    *pGCPs = GDALGetGCPs( self );
  }
SWIGINTERN CPLErr GDALDatasetShadow_SetGCPs(GDALDatasetShadow *self,int nGCPs,GDAL_GCP const *pGCPs,char const *pszGCPProjection){
    return GDALSetGCPs( self, nGCPs, pGCPs, pszGCPProjection );
  }
SWIGINTERN void GDALDatasetShadow_FlushCache(GDALDatasetShadow *self){
    GDALFlushCache( self );
  }
SWIGINTERN CPLErr GDALDatasetShadow_AddBand(GDALDatasetShadow *self,GDALDataType datatype=GDT_Byte,char **options=0){
    return GDALAddBand( self, datatype, options );
  }
SWIGINTERN CPLErr GDALDatasetShadow_CreateMaskBand(GDALDatasetShadow *self,int nFlags){
      return GDALCreateDatasetMaskBand( self, nFlags );
  }
SWIGINTERN char **GDALDatasetShadow_GetFileList(GDALDatasetShadow *self){
    return GDALGetFileList( self );
  }
SWIGINTERN CPLErr GDALDatasetShadow_WriteRaster(GDALDatasetShadow *self,int xoff,int yoff,int xsize,int ysize,int buf_len,char *buf_string,int *buf_xsize=0,int *buf_ysize=0,GDALDataType *buf_type=0,int band_list=0,int *pband_list=0){
    int nxsize = (buf_xsize==0) ? xsize : *buf_xsize;
    int nysize = (buf_ysize==0) ? ysize : *buf_ysize;
    GDALDataType ntype;
    if ( buf_type != 0 ) {
      ntype = (GDALDataType) *buf_type;
    } else {
      int lastband = GDALGetRasterCount( self ) - 1;
      ntype = GDALGetRasterDataType( GDALGetRasterBand( self, lastband ) );
    }
    bool myBandList = false;
    int nBandCount;
    int *pBandList;
    if ( band_list != 0 ) {
      myBandList = false;
      nBandCount = band_list;
      pBandList = pband_list;
    }
    else {
      myBandList = true;
      nBandCount = GDALGetRasterCount( self );
      pBandList = (int*) CPLMalloc( sizeof(int) * nBandCount );
      for( int i = 0; i< nBandCount; ++i ) {
        pBandList[i] = i;
      }
    }
    return GDALDatasetRasterIO( self, GF_Write, xoff, yoff, xsize, ysize,
                                (void*) buf_string, nxsize, nysize, ntype,
                                band_list, pband_list, 0, 0, 0 );
    if ( myBandList ) {
       CPLFree( pBandList );
    }
  }
SWIGINTERN CPLErr GDALDatasetShadow_ReadRaster(GDALDatasetShadow *self,int xoff,int yoff,int xsize,int ysize,int *buf_len,char **buf,int *buf_xsize=0,int *buf_ysize=0,GDALDataType *buf_type=0,int band_list=0,int *pband_list=0){

    int nxsize = (buf_xsize==0) ? xsize : *buf_xsize;
    int nysize = (buf_ysize==0) ? ysize : *buf_ysize;
    GDALDataType ntype;
    if ( buf_type != 0 ) {
      ntype = (GDALDataType) *buf_type;
    } else {
      int lastband = GDALGetRasterCount( self ) - 1;
      ntype = GDALGetRasterDataType( GDALGetRasterBand( self, lastband ) );
    }
    bool myBandList = false;
    int nBandCount;
    int *pBandList;
    if ( band_list != 0 ) {
      myBandList = false;
      nBandCount = band_list;
      pBandList = pband_list;
    }
    else {
      myBandList = true;
      nBandCount = GDALGetRasterCount( self );
      pBandList = (int*) CPLMalloc( sizeof(int) * nBandCount );
      for( int i = 0; i< nBandCount; ++i ) {
        pBandList[i] = i;
      }
    }
                            
    return DSReadRaster_internal( self, xoff, yoff, xsize, ysize,
                                nxsize, nysize, ntype,
                                buf_len, buf, 
                                nBandCount, pBandList);
    if ( myBandList ) {
       CPLFree( pBandList );
    }

}

int GDALDatasetShadow_RasterXSize_get( GDALDatasetShadow *h ) {
  return GDALGetRasterXSize( h );
}
int GDALDatasetShadow_RasterYSize_get( GDALDatasetShadow *h ) {
  return GDALGetRasterYSize( h );
}
int GDALDatasetShadow_RasterCount_get( GDALDatasetShadow *h ) {
  return GDALGetRasterCount( h );
}


static
CPLErr ReadRaster_internal( GDALRasterBandShadow *obj, 
                            int xoff, int yoff, int xsize, int ysize,
                            int buf_xsize, int buf_ysize,
                            GDALDataType buf_type,
                            int *buf_size, char **buf )
{
  CPLErr result;
  *buf_size = (size_t)buf_xsize * buf_ysize * (GDALGetDataTypeSize( buf_type ) / 8);
  *buf = (char*) VSIMalloc3( buf_xsize, buf_ysize, GDALGetDataTypeSize( buf_type ) / 8 );
  if (*buf)
  {
    result =  GDALRasterIO( obj, GF_Read, xoff, yoff, xsize, ysize,
                                    (void *) *buf, buf_xsize, buf_ysize,
                                    buf_type, 0, 0 );
    if ( result != CE_None ) {
        free( *buf );
        *buf = 0;
        *buf_size = 0;
    }
  }
  else
  {
    result = CE_Failure;
    *buf = 0;
    *buf_size = 0;
  }
  return result;
}

static
CPLErr WriteRaster_internal( GDALRasterBandShadow *obj,
                             int xoff, int yoff, int xsize, int ysize,
                             int buf_xsize, int buf_ysize,
                             GDALDataType buf_type,
                             int buf_size, char *buffer )
{
    if ( buf_size < buf_xsize * buf_ysize * GDALGetDataTypeSize( buf_type) /8 ) {
      return CE_Failure;
    }

    return GDALRasterIO( obj, GF_Write, xoff, yoff, xsize, ysize, 
		        (void *) buffer, buf_xsize, buf_ysize, buf_type, 0, 0 );
}

SWIGINTERN void GDALRasterBandShadow_GetBlockSize(GDALRasterBandShadow *self,int *pnBlockXSize,int *pnBlockYSize){
      GDALGetBlockSize(self, pnBlockXSize, pnBlockYSize);
  }
SWIGINTERN GDALColorInterp GDALRasterBandShadow_GetRasterColorInterpretation(GDALRasterBandShadow *self){
    return GDALGetRasterColorInterpretation( self );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_SetRasterColorInterpretation(GDALRasterBandShadow *self,GDALColorInterp val){
    return GDALSetRasterColorInterpretation( self, val );
  }
SWIGINTERN void GDALRasterBandShadow_GetNoDataValue(GDALRasterBandShadow *self,double *val,int *hasval){
    *val = GDALGetRasterNoDataValue( self, hasval );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_SetNoDataValue(GDALRasterBandShadow *self,double d){
    return GDALSetRasterNoDataValue( self, d );
  }
SWIGINTERN char **GDALRasterBandShadow_GetRasterCategoryNames(GDALRasterBandShadow *self){
    return GDALGetRasterCategoryNames( self );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_SetRasterCategoryNames(GDALRasterBandShadow *self,char **names){
    return GDALSetRasterCategoryNames( self, names );
  }
SWIGINTERN void GDALRasterBandShadow_GetMinimum(GDALRasterBandShadow *self,double *val,int *hasval){
    *val = GDALGetRasterMinimum( self, hasval );
  }
SWIGINTERN void GDALRasterBandShadow_GetMaximum(GDALRasterBandShadow *self,double *val,int *hasval){
    *val = GDALGetRasterMaximum( self, hasval );
  }
SWIGINTERN void GDALRasterBandShadow_GetOffset(GDALRasterBandShadow *self,double *val,int *hasval){
    *val = GDALGetRasterOffset( self, hasval );
  }
SWIGINTERN void GDALRasterBandShadow_GetScale(GDALRasterBandShadow *self,double *val,int *hasval){
    *val = GDALGetRasterScale( self, hasval );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_GetStatistics(GDALRasterBandShadow *self,int approx_ok,int force,double *min,double *max,double *mean,double *stddev){
    return GDALGetRasterStatistics( self, approx_ok, force, 
				    min, max, mean, stddev );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_SetStatistics(GDALRasterBandShadow *self,double min,double max,double mean,double stddev){
    return GDALSetRasterStatistics( self, min, max, mean, stddev );
  }
SWIGINTERN int GDALRasterBandShadow_GetOverviewCount(GDALRasterBandShadow *self){
    return GDALGetOverviewCount( self );
  }
SWIGINTERN GDALRasterBandShadow *GDALRasterBandShadow_GetOverview(GDALRasterBandShadow *self,int i){
    return (GDALRasterBandShadow*) GDALGetOverview( self, i );
  }
SWIGINTERN int GDALRasterBandShadow_Checksum(GDALRasterBandShadow *self,int xoff=0,int yoff=0,int *xsize=0,int *ysize=0){
    int nxsize = (xsize!=0) ? *xsize : GDALGetRasterBandXSize( self );
    int nysize = (ysize!=0) ? *ysize : GDALGetRasterBandYSize( self );
    return GDALChecksumImage( self, xoff, yoff, nxsize, nysize );
  }
SWIGINTERN void GDALRasterBandShadow_ComputeRasterMinMax(GDALRasterBandShadow *self,double argout[2],int approx_ok=0){
    GDALComputeRasterMinMax( self, approx_ok, argout );
  }
SWIGINTERN void GDALRasterBandShadow_ComputeBandStats(GDALRasterBandShadow *self,double argout[2],int samplestep=1){
    GDALComputeBandStats( self, samplestep, argout+0, argout+1, 
                          NULL, NULL );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_Fill(GDALRasterBandShadow *self,double real_fill,double imag_fill=0.0){
    return GDALFillRaster( self, real_fill, imag_fill );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_ReadRaster(GDALRasterBandShadow *self,int xoff,int yoff,int xsize,int ysize,int *buf_len,char **buf,int *buf_xsize=0,int *buf_ysize=0,int *buf_type=0){
    int nxsize = (buf_xsize==0) ? xsize : *buf_xsize;
    int nysize = (buf_ysize==0) ? ysize : *buf_ysize;
    GDALDataType ntype  = (buf_type==0) ? GDALGetRasterDataType(self)
                                        : (GDALDataType)*buf_type;
    return ReadRaster_internal( self, xoff, yoff, xsize, ysize,
                                nxsize, nysize, ntype, buf_len, buf );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_WriteRaster(GDALRasterBandShadow *self,int xoff,int yoff,int xsize,int ysize,int buf_len,char *buf_string,int *buf_xsize=0,int *buf_ysize=0,int *buf_type=0){
    int nxsize = (buf_xsize==0) ? xsize : *buf_xsize;
    int nysize = (buf_ysize==0) ? ysize : *buf_ysize;
    GDALDataType ntype  = (buf_type==0) ? GDALGetRasterDataType(self)
                                        : (GDALDataType)*buf_type;
    return WriteRaster_internal( self, xoff, yoff, xsize, ysize,
                                 nxsize, nysize, ntype, buf_len, buf_string );
  }
SWIGINTERN void GDALRasterBandShadow_FlushCache(GDALRasterBandShadow *self){
    GDALFlushRasterCache( self );
  }
SWIGINTERN GDALColorTableShadow *GDALRasterBandShadow_GetRasterColorTable(GDALRasterBandShadow *self){
    return (GDALColorTableShadow*) GDALGetRasterColorTable( self );
  }
SWIGINTERN GDALColorTableShadow *GDALRasterBandShadow_GetColorTable(GDALRasterBandShadow *self){
    return (GDALColorTableShadow*) GDALGetRasterColorTable( self );
  }
SWIGINTERN int GDALRasterBandShadow_SetRasterColorTable(GDALRasterBandShadow *self,GDALColorTableShadow *arg){
    return GDALSetRasterColorTable( self, arg );
  }
SWIGINTERN int GDALRasterBandShadow_SetColorTable(GDALRasterBandShadow *self,GDALColorTableShadow *arg){
    return GDALSetRasterColorTable( self, arg );
  }
SWIGINTERN GDALRasterAttributeTableShadow *GDALRasterBandShadow_GetDefaultRAT(GDALRasterBandShadow *self){ 
      return (GDALRasterAttributeTableShadow*) GDALGetDefaultRAT(self);
  }
SWIGINTERN int GDALRasterBandShadow_SetDefaultRAT(GDALRasterBandShadow *self,GDALRasterAttributeTableShadow *table){
      return GDALSetDefaultRAT(self, table);
  }
SWIGINTERN GDALRasterBandShadow *GDALRasterBandShadow_GetMaskBand(GDALRasterBandShadow *self){
      return (GDALRasterBandShadow *) GDALGetMaskBand( self );
  }
SWIGINTERN int GDALRasterBandShadow_GetMaskFlags(GDALRasterBandShadow *self){
      return GDALGetMaskFlags( self );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_CreateMaskBand(GDALRasterBandShadow *self,int nFlags){
      return GDALCreateMaskBand( self, nFlags );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_GetHistogram(GDALRasterBandShadow *self,double min=-0.5,double max=255.5,int buckets=256,int *panHistogram=NULL,int include_out_of_range=0,int approx_ok=1,GDALProgressFunc callback=NULL,void *callback_data=NULL){
    CPLErrorReset(); 
    CPLErr err = GDALGetRasterHistogram( self, min, max, buckets, panHistogram,
                                         include_out_of_range, approx_ok,
                                         callback, callback_data );
    return err;
  }
SWIGINTERN CPLErr GDALRasterBandShadow_GetDefaultHistogram(GDALRasterBandShadow *self,double *min_ret=NULL,double *max_ret=NULL,int *buckets_ret=NULL,int **ppanHistogram=NULL,int force=1,GDALProgressFunc callback=NULL,void *callback_data=NULL){
    return GDALGetDefaultHistogram( self, min_ret, max_ret, buckets_ret,
                                    ppanHistogram, force, 
                                    callback, callback_data );
}
SWIGINTERN CPLErr GDALRasterBandShadow_SetDefaultHistogram(GDALRasterBandShadow *self,double min,double max,int buckets_in,int *panHistogram_in){
    return GDALSetDefaultHistogram( self, min, max, 
    	   			    buckets_in, panHistogram_in );
}

GDALDataType GDALRasterBandShadow_DataType_get( GDALRasterBandShadow *h ) {
  return GDALGetRasterDataType( h );
}
int GDALRasterBandShadow_XSize_get( GDALRasterBandShadow *h ) {
  return GDALGetRasterBandXSize( h );
}
int GDALRasterBandShadow_YSize_get( GDALRasterBandShadow *h ) {
  return GDALGetRasterBandYSize( h );
}

SWIGINTERN GDALColorTableShadow *new_GDALColorTableShadow(GDALPaletteInterp palette=GPI_RGB){
        return (GDALColorTableShadow*) GDALCreateColorTable(palette);
    }
SWIGINTERN void delete_GDALColorTableShadow(GDALColorTableShadow *self){
        GDALDestroyColorTable(self);
    }
SWIGINTERN GDALColorTableShadow *GDALColorTableShadow_Clone(GDALColorTableShadow *self){
        return (GDALColorTableShadow*) GDALCloneColorTable (self);
    }
SWIGINTERN GDALPaletteInterp GDALColorTableShadow_GetPaletteInterpretation(GDALColorTableShadow *self){
        return GDALGetPaletteInterpretation(self);
    }
SWIGINTERN int GDALColorTableShadow_GetColorEntryCount(GDALColorTableShadow *self){
        return GDALGetColorEntryCount(self);
    }
SWIGINTERN GDALColorEntry *GDALColorTableShadow_GetColorEntry(GDALColorTableShadow *self,int entry){
        return (GDALColorEntry*) GDALGetColorEntry(self, entry);
    }
SWIGINTERN int GDALColorTableShadow_GetColorEntryAsRGB(GDALColorTableShadow *self,int entry,GDALColorEntry *centry){
        return GDALGetColorEntryAsRGB(self, entry, centry);
    }
SWIGINTERN void GDALColorTableShadow_SetColorEntry(GDALColorTableShadow *self,int entry,GDALColorEntry const *centry){
        GDALSetColorEntry(self, entry, centry);
    }
SWIGINTERN void GDALColorTableShadow_CreateColorRamp(GDALColorTableShadow *self,int nStartIndex,GDALColorEntry const *startcolor,int nEndIndex,GDALColorEntry const *endcolor){
        GDALCreateColorRamp(self, nStartIndex, startcolor, nEndIndex, endcolor);
    }
SWIGINTERN GDALRasterAttributeTableShadow *new_GDALRasterAttributeTableShadow(){
        return (GDALRasterAttributeTableShadow*) 
		GDALCreateRasterAttributeTable();
    }
SWIGINTERN void delete_GDALRasterAttributeTableShadow(GDALRasterAttributeTableShadow *self){
        GDALDestroyRasterAttributeTable(self);
    }
SWIGINTERN GDALRasterAttributeTableShadow *GDALRasterAttributeTableShadow_Clone(GDALRasterAttributeTableShadow *self){
        return (GDALRasterAttributeTableShadow*) GDALRATClone(self);
    }
SWIGINTERN int GDALRasterAttributeTableShadow_GetColumnCount(GDALRasterAttributeTableShadow *self){ 
        return GDALRATGetColumnCount( self );
    }
SWIGINTERN char const *GDALRasterAttributeTableShadow_GetNameOfCol(GDALRasterAttributeTableShadow *self,int iCol){ 
        return GDALRATGetNameOfCol( self, iCol );
    }
SWIGINTERN GDALRATFieldUsage GDALRasterAttributeTableShadow_GetUsageOfCol(GDALRasterAttributeTableShadow *self,int iCol){
        return GDALRATGetUsageOfCol( self, iCol );
    }
SWIGINTERN GDALRATFieldType GDALRasterAttributeTableShadow_GetTypeOfCol(GDALRasterAttributeTableShadow *self,int iCol){
        return GDALRATGetTypeOfCol( self, iCol );
    }
SWIGINTERN int GDALRasterAttributeTableShadow_GetColOfUsage(GDALRasterAttributeTableShadow *self,GDALRATFieldUsage eUsage){
        return GDALRATGetColOfUsage( self, eUsage );
    }
SWIGINTERN int GDALRasterAttributeTableShadow_GetRowCount(GDALRasterAttributeTableShadow *self){ 
        return GDALRATGetRowCount( self );
    }
SWIGINTERN char const *GDALRasterAttributeTableShadow_GetValueAsString(GDALRasterAttributeTableShadow *self,int iRow,int iCol){ 
        return GDALRATGetValueAsString( self, iRow, iCol );
    }
SWIGINTERN int GDALRasterAttributeTableShadow_GetValueAsInt(GDALRasterAttributeTableShadow *self,int iRow,int iCol){ 
        return GDALRATGetValueAsInt( self, iRow, iCol );
    }
SWIGINTERN double GDALRasterAttributeTableShadow_GetValueAsDouble(GDALRasterAttributeTableShadow *self,int iRow,int iCol){ 
        return GDALRATGetValueAsDouble( self, iRow, iCol );
    }
SWIGINTERN void GDALRasterAttributeTableShadow_SetValueAsString(GDALRasterAttributeTableShadow *self,int iRow,int iCol,char const *pszValue){ 
        GDALRATSetValueAsString( self, iRow, iCol, pszValue );
    }
SWIGINTERN void GDALRasterAttributeTableShadow_SetValueAsInt(GDALRasterAttributeTableShadow *self,int iRow,int iCol,int nValue){ 
        GDALRATSetValueAsInt( self, iRow, iCol, nValue );
    }
SWIGINTERN void GDALRasterAttributeTableShadow_SetValueAsDouble(GDALRasterAttributeTableShadow *self,int iRow,int iCol,double dfValue){ 
        GDALRATSetValueAsDouble( self, iRow, iCol, dfValue );
    }
SWIGINTERN void GDALRasterAttributeTableShadow_SetRowCount(GDALRasterAttributeTableShadow *self,int nCount){
        GDALRATSetRowCount( self, nCount );
    }
SWIGINTERN int GDALRasterAttributeTableShadow_CreateColumn(GDALRasterAttributeTableShadow *self,char const *pszName,GDALRATFieldType eType,GDALRATFieldUsage eUsage){
        return GDALRATCreateColumn( self, pszName, eType, eUsage );
    }
SWIGINTERN int GDALRasterAttributeTableShadow_GetRowOfValue(GDALRasterAttributeTableShadow *self,double dfValue){
        return GDALRATGetRowOfValue( self, dfValue );
    }

#ifdef DEBUG 
typedef struct OGRLayerHS OGRLayerShadow;
typedef struct OGRGeometryHS OGRGeometryShadow;
#else
typedef void OGRLayerShadow;
typedef void OGRGeometryShadow;
#endif


int GDALTermProgress_nocb( double dfProgress, const char * pszMessage=NULL, void *pData=NULL ) {
  return GDALTermProgress( dfProgress, pszMessage, pData);
}


int  ComputeMedianCutPCT ( GDALRasterBandShadow *red,
                              GDALRasterBandShadow *green,
                              GDALRasterBandShadow *blue,
                              int num_colors,
                              GDALColorTableShadow* colors,
                              GDALProgressFunc callback = NULL,
                              void* callback_data=NULL) {

    CPLErrorReset();

    int err = GDALComputeMedianCutPCT( red,
                                          green,
                                          blue,
                                          NULL,
                                          num_colors,
                                          colors,
                                          callback,
                                          callback_data);
    
    return err;
}


int  DitherRGB2PCT ( GDALRasterBandShadow *red,
                     GDALRasterBandShadow *green,
                     GDALRasterBandShadow *blue,
                     GDALRasterBandShadow *target,
                     GDALColorTableShadow *colors,
                     GDALProgressFunc callback = NULL,
                     void* callback_data=NULL) {

    CPLErrorReset();
    int err;
    err = GDALDitherRGB2PCT(  red,
                                  green,
                                  blue,
                                  target,
                                  colors,
                                  callback,
                                  callback_data);
    
    return err;
}


CPLErr  ReprojectImage ( GDALDatasetShadow *src_ds,
                         GDALDatasetShadow *dst_ds,
                         const char *src_wkt=NULL,
                         const char *dst_wkt=NULL,
                         GDALResampleAlg eResampleAlg=GRA_NearestNeighbour,
                         double WarpMemoryLimit=0.0,
                         double maxerror = 0.0,
			 GDALProgressFunc callback = NULL,
                     	 void* callback_data=NULL) {

    CPLErrorReset();

    CPLErr err = GDALReprojectImage( src_ds,
                                     src_wkt,
                                     dst_ds,
                                     dst_wkt,
                                     eResampleAlg,
                                     WarpMemoryLimit,
                                     maxerror,
                                     callback,
                                     callback_data,
                                     NULL);
    
    return err;
}


int  ComputeProximity( GDALRasterBandShadow *srcBand,
                       GDALRasterBandShadow *proximityBand,
                       char **options = NULL,
                       GDALProgressFunc callback=NULL,
                       void* callback_data=NULL) {

    CPLErrorReset();

    return GDALComputeProximity( srcBand, proximityBand, options,
                                 callback, callback_data );
}


int  RasterizeLayer( GDALDatasetShadow *dataset,
                 int bands, int *band_list,
                 OGRLayerShadow *layer,
                 void *pfnTransformer = NULL,
                 void *pTransformArg = NULL, 
		 int burn_values = 0, double *burn_values_list = NULL, 
                 char **options = NULL,
                 GDALProgressFunc callback=NULL,
                 void* callback_data=NULL) {

    CPLErr eErr;

    CPLErrorReset();

    if( burn_values == 0 )
    {
        burn_values_list = (double *) CPLMalloc(sizeof(double)*bands);
        for( int i = 0; i < bands; i++ )
            burn_values_list[i] = 255.0;
    }
    else if( burn_values != bands )
    {
        CPLError( CE_Failure, CPLE_AppDefined, 
                  "Did not get the expected number of burn values in RasterizeLayer()" );
        return CE_Failure;
    }

    eErr = GDALRasterizeLayers( dataset, bands, band_list,
                                1, &layer, 
                                (GDALTransformerFunc) pfnTransformer, 
                                pTransformArg,
                                burn_values_list, options, 
                                callback, callback_data );

    if( burn_values == 0 )
        CPLFree( burn_values_list );

    return eErr;
}


int  Polygonize( GDALRasterBandShadow *srcBand,
     		 GDALRasterBandShadow *maskBand,
  	         OGRLayerShadow *outLayer, 
                 int iPixValField,
                 char **options = NULL,
                 GDALProgressFunc callback=NULL,
                 void* callback_data=NULL) {

    CPLErrorReset();

    return GDALPolygonize( srcBand, maskBand, outLayer, iPixValField,
                           options, callback, callback_data );
}


int  SieveFilter( GDALRasterBandShadow *srcBand,
     		  GDALRasterBandShadow *maskBand,
  	          GDALRasterBandShadow *dstBand,
                  int threshold, int connectedness=4,
                  char **options = NULL,
                  GDALProgressFunc callback=NULL,
                  void* callback_data=NULL) {

    CPLErrorReset();

    return GDALSieveFilter( srcBand, maskBand, dstBand, 
                            threshold, connectedness,
                            options, callback, callback_data );
}


int  RegenerateOverviews( GDALRasterBandShadow *srcBand,
     			  int overviewBandCount,
                          GDALRasterBandShadow **overviewBands,
                          char *resampling = "average",
                          GDALProgressFunc callback=NULL,
                          void* callback_data=NULL) {

    CPLErrorReset();

    return GDALRegenerateOverviews( srcBand, overviewBandCount, overviewBands,
    	   			    resampling, callback, callback_data );
}


int  RegenerateOverview( GDALRasterBandShadow *srcBand,
                          GDALRasterBandShadow *overviewBand,
                          char *resampling,
                          GDALProgressFunc callback=NULL,
                          void* callback_data=NULL) {

    CPLErrorReset();

    return GDALRegenerateOverviews( srcBand, 1, &overviewBand,
    	   			    resampling, callback, callback_data );
}


GDALDatasetShadow *AutoCreateWarpedVRT( GDALDatasetShadow *src_ds,
                                        const char *src_wkt = 0,
                                        const char *dst_wkt = 0,
                                        GDALResampleAlg eResampleAlg = GRA_NearestNeighbour,
                                        double maxerror = 0.0 ) {
  GDALDatasetShadow *ds = GDALAutoCreateWarpedVRT( src_ds, src_wkt,
                                                   dst_wkt,
                                                   eResampleAlg,
                                                   maxerror,
                                                   0 );
  if (ds == 0) {
    /*throw CPLGetLastErrorMsg(); causes a SWIG_exception later*/
  }
  return ds;
  
}

SWIGINTERN GDALTransformerInfoShadow *new_GDALTransformerInfoShadow(GDALDatasetShadow *src,GDALDatasetShadow *dst,char **options){
    GDALTransformerInfoShadow *obj = (GDALTransformerInfoShadow*) 
       GDALCreateGenImgProjTransformer2( (GDALDatasetH)src, (GDALDatasetH)dst, 
                                         options );
    return obj;
  }
SWIGINTERN void delete_GDALTransformerInfoShadow(GDALTransformerInfoShadow *self){
    GDALDestroyTransformer( self );
  }
SWIGINTERN int GDALTransformerInfoShadow_TransformPoint__SWIG_0(GDALTransformerInfoShadow *self,int bDstToSrc,double inout[3]){
    int nRet, nSuccess = TRUE;

    nRet = GDALUseTransformer( self, bDstToSrc, 
                               1, &inout[0], &inout[1], &inout[2], 
                               &nSuccess );

    return nRet && nSuccess;
  }
SWIGINTERN int GDALTransformerInfoShadow_TransformPoint__SWIG_1(GDALTransformerInfoShadow *self,double argout[3],int bDstToSrc,double x,double y,double z=0.0){
    int nRet, nSuccess = TRUE;
    
    argout[0] = x;
    argout[1] = y;
    argout[2] = z;
    nRet = GDALUseTransformer( self, bDstToSrc, 
                               1, &argout[0], &argout[1], &argout[2], 
                               &nSuccess );

    return nRet && nSuccess;
  }
SWIGINTERN int GDALTransformerInfoShadow_TransformPoints(GDALTransformerInfoShadow *self,int bDstToSrc,int nCount,double *x,double *y,double *z,int *panSuccess){
    int nRet;

    nRet = GDALUseTransformer( self, bDstToSrc, nCount, x, y, z, panSuccess );

    return nRet;
  }

/************************************************************************/
/*                          XMLTreeToTclList()                           */
/************************************************************************/
static Tcl_Obj *XMLTreeToTclList( Tcl_Interp *interp, CPLXMLNode *psTree )
{
    Tcl_Obj *tclList;
    int      nChildCount = 0, iChild;
    CPLXMLNode *psChild;

    for( psChild = psTree->psChild; 
         psChild != NULL; 
         psChild = psChild->psNext )
        nChildCount++;

    tclList = Tcl_NewListObj(0, NULL);
    if (Tcl_ListObjAppendElement(interp, tclList, Tcl_NewIntObj((int) psTree->eType)) != TCL_OK) {
        Tcl_DecrRefCount(tclList);
        /* Error msg in interp result */
        return NULL; /* signifies error */
    }
    if (Tcl_ListObjAppendElement(interp, tclList, Tcl_NewStringObj(psTree->pszValue, -1)) != TCL_OK) {
        Tcl_DecrRefCount(tclList);
        /* Error msg in interp result */
        return NULL; /* signifies error */
    }

    for( psChild = psTree->psChild, iChild = 2; 
         psChild != NULL; 
         psChild = psChild->psNext, iChild++ )
    {
        if (Tcl_ListObjAppendElement(interp, tclList, XMLTreeToTclList( interp, psChild )) != TCL_OK) {
            Tcl_DecrRefCount(tclList);
            /* Error msg in interp result */
            return NULL; /* signifies error */
        }
    }

    return tclList; 
}


/************************************************************************/
/*                          TclListToXMLTree()                           */
/************************************************************************/
static CPLXMLNode *TclListToXMLTree( Tcl_Interp *interp, Tcl_Obj *tclList )
{
    int      nChildCount = 0, iChild, nType;
    CPLXMLNode *psThisNode;
    CPLXMLNode *psChild;
    char       *pszText = NULL;

    if (Tcl_ListObjLength(interp, tclList, &nChildCount) != TCL_OK) {
        /* Error msg in interp result */
        return NULL;
    }
    nChildCount = nChildCount - 2;
    if( nChildCount < 0 )
    {
        Tcl_SetResult(interp, (char*) "Error in input XMLTree.", TCL_STATIC);
        return NULL;
    }

    Tcl_Obj **o = NULL;
    if (Tcl_ListObjIndex(interp, tclList, 0, o) != TCL_OK) { /* ref count is not incremented */
        /* Error msg in interp result */
        return NULL;
    }
    if (Tcl_GetIntFromObj(interp, *o, &nType) != TCL_OK) {
        /* Error msg in interp result */
        return NULL;
    }
    if (Tcl_ListObjIndex(interp, tclList, 1, o) != TCL_OK) { /* ref count is not incremented */
        /* Error msg in interp result */
        return NULL;
    }
    pszText = Tcl_GetStringFromObj(*o, NULL);
    psThisNode = CPLCreateXMLNode( NULL, (CPLXMLNodeType) nType, pszText );

    for( iChild = 0; iChild < nChildCount; iChild++ )
    {
        if (Tcl_ListObjIndex(interp, tclList, iChild+2, o) != TCL_OK) { /* ref count is not incremented */
            /* Error msg in interp result */
            return NULL;
        }
        psChild = TclListToXMLTree( interp, *o );
        CPLAddXMLChild( psThisNode, psChild );
    }

    return psThisNode;
}


int GetDriverCount() {
  return GDALGetDriverCount();
}


GDALDriverShadow* GetDriverByName( char const *name ) {
  return (GDALDriverShadow*) GDALGetDriverByName( name );
}


GDALDriverShadow* GetDriver( int i ) {
  return (GDALDriverShadow*) GDALGetDriver( i );
}


GDALDatasetShadow* Open( char const* name, GDALAccess eAccess = GA_ReadOnly ) {
  CPLErrorReset();
  GDALDatasetShadow *ds = GDALOpen( name, eAccess );
  if( ds != NULL && CPLGetLastErrorType() == CE_Failure )
  {
      if ( GDALDereferenceDataset( ds ) <= 0 )
          GDALClose(ds);
      ds = NULL;
  }
  return (GDALDatasetShadow*) ds;
}


GDALDatasetShadow* OpenShared( char const* name, GDALAccess eAccess = GA_ReadOnly ) {
  CPLErrorReset();
  GDALDatasetShadow *ds = GDALOpenShared( name, eAccess );
  if( ds != NULL && CPLGetLastErrorType() == CE_Failure )
  {
      if ( GDALDereferenceDataset( ds ) <= 0 )
          GDALClose(ds);
      ds = NULL;
  }
  return (GDALDatasetShadow*) ds;
}


GDALDriverShadow *IdentifyDriver( const char *pszDatasource, 
				  char **papszSiblings = NULL ) {
    return (GDALDriverShadow *) GDALIdentifyDriver( pszDatasource, 
	                                            papszSiblings );
}


  char **GeneralCmdLineProcessor( char **papszArgv, int nOptions = 0 ) {
    int nResArgCount;

    nResArgCount = 
      GDALGeneralCmdLineProcessor( CSLCount(papszArgv), &papszArgv, nOptions ); 

    if( nResArgCount <= 0 )
        return NULL;
    else
        return papszArgv;
  }

#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN int
_wrap_DataTypeUnion(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALDataType arg1 ;
  GDALDataType arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  GDALDataType result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::DataTypeUnion GDALDataType GDALDataType ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DataTypeUnion" "', argument " "1"" of type '" "GDALDataType""'");
  } 
  arg1 = static_cast< GDALDataType >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataTypeUnion" "', argument " "2"" of type '" "GDALDataType""'");
  } 
  arg2 = static_cast< GDALDataType >(val2);
  result = (GDALDataType)GDALDataTypeUnion(arg1,arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_UseExceptions(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  if (SWIG_GetArgs(interp, objc, objv,":osgeo::UseExceptions ") == TCL_ERROR) SWIG_fail;
  UseExceptions();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_DontUseExceptions(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  if (SWIG_GetArgs(interp, objc, objv,":osgeo::DontUseExceptions ") == TCL_ERROR) SWIG_fail;
  DontUseExceptions();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Debug(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::Debug msg_class message ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Debug" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Debug" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    CPLErrorReset();
    Debug((char const *)arg1,(char const *)arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Error(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CPLErr arg1 = (CPLErr) CE_Failure ;
  int arg2 = (int) 0 ;
  char *arg3 = (char *) "error" ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"|ooo:osgeo::Error ?msg_class? ?err_code? ?msg? ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  if (objc > 1) {
    ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Error" "', argument " "1"" of type '" "CPLErr""'");
    } 
    arg1 = static_cast< CPLErr >(val1);
  }
  if (objc > 2) {
    ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Error" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  if (objc > 3) {
    res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Error" "', argument " "3"" of type '" "char const *""'");
    }
    arg3 = reinterpret_cast< char * >(buf3);
  }
  {
    CPLErrorReset();
    Error(arg1,arg2,(char const *)arg3);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_PushErrorHandler__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) "CPLQuietErrorHandler" ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  CPLErr result;
  
  if (SWIG_GetArgs(interp, objc, objv,"|o:osgeo::PushErrorHandler ?pszCallbackName? ",(void *)0) == TCL_ERROR) SWIG_fail;
  if (objc > 1) {
    res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PushErrorHandler" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
  }
  {
    CPLErrorReset();
    result = (CPLErr)PushErrorHandler((char const *)arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_PushErrorHandler__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CPLErrorHandler arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::PushErrorHandler CPLErrorHandler ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_CPLErrorHandler,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PushErrorHandler" "', argument " "1"" of type '" "CPLErrorHandler""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PushErrorHandler" "', argument " "1"" of type '" "CPLErrorHandler""'");
    } else {
      arg1 = *(reinterpret_cast< CPLErrorHandler * >(argp1));
    }
  }
  {
    CPLErrorReset();
    CPLPushErrorHandler(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_PushErrorHandler(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if ((argc >= 0) && (argc <= 1)) {
    int _v;
    if (argc <= 0) {
      return _wrap_PushErrorHandler__SWIG_0(clientData, interp, objc, argv - 1);
    }
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_PushErrorHandler__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CPLErrorHandler, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_PushErrorHandler__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'PushErrorHandler'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_PopErrorHandler(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  if (SWIG_GetArgs(interp, objc, objv,":osgeo::PopErrorHandler ") == TCL_ERROR) SWIG_fail;
  {
    CPLErrorReset();
    CPLPopErrorHandler();
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ErrorReset(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  if (SWIG_GetArgs(interp, objc, objv,":osgeo::ErrorReset ") == TCL_ERROR) SWIG_fail;
  {
    CPLErrorReset();
    CPLErrorReset();
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_EscapeString(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 = (int) CPLES_SQL ;
  int val3 ;
  int ecode3 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o|o:osgeo::EscapeString len ?bin_string? ?scheme? ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  {
    /* %typemap(in,numinputs=1) (int nLen, char *pBuf ) */
    /* Storage is handled by the respective Tcl_Obj. It should considered read-only. */
    arg2 = Tcl_GetStringFromObj(objv[1], &arg1);
  }
  if (objc > 2) {
    ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EscapeString" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  {
    CPLErrorReset();
    result = (char *)EscapeString(arg1,arg2,arg3);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetLastErrorNo(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,":osgeo::GetLastErrorNo ") == TCL_ERROR) SWIG_fail;
  {
    CPLErrorReset();
    result = (int)CPLGetLastErrorNo();
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetLastErrorType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CPLErr result;
  
  if (SWIG_GetArgs(interp, objc, objv,":osgeo::GetLastErrorType ") == TCL_ERROR) SWIG_fail;
  {
    CPLErrorReset();
    result = (CPLErr)CPLGetLastErrorType();
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetLastErrorMsg(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":osgeo::GetLastErrorMsg ") == TCL_ERROR) SWIG_fail;
  {
    CPLErrorReset();
    result = (char *)CPLGetLastErrorMsg();
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_PushFinderLocation(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::PushFinderLocation char const * ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PushFinderLocation" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    CPLErrorReset();
    CPLPushFinderLocation((char const *)arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_PopFinderLocation(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  if (SWIG_GetArgs(interp, objc, objv,":osgeo::PopFinderLocation ") == TCL_ERROR) SWIG_fail;
  {
    CPLErrorReset();
    CPLPopFinderLocation();
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_FinderClean(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  if (SWIG_GetArgs(interp, objc, objv,":osgeo::FinderClean ") == TCL_ERROR) SWIG_fail;
  {
    CPLErrorReset();
    CPLFinderClean();
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_FindFile(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::FindFile char const * char const * ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FindFile" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FindFile" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    CPLErrorReset();
    result = (char *)CPLFindFile((char const *)arg1,(char const *)arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ReadDir(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  char **result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::ReadDir char const * ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReadDir" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    CPLErrorReset();
    result = (char **)VSIReadDir((char const *)arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  {
    /* %typemap(out) char **options -> ( string ) */
    char **stringarray = result;
    if ( stringarray == NULL ) {
      Tcl_ResetResult(interp); /* NONE = Empty string */
    } else {
      int len = CSLCount( stringarray );
      Tcl_Obj *out = Tcl_NewListObj(0, NULL);
      for ( int i = 0; i < len; ++i ) {
        Tcl_Obj *o = Tcl_NewStringObj( stringarray[i], -1 );
        if (Tcl_ListObjAppendElement(interp, out, o) != TCL_OK) {
          Tcl_DecrRefCount(o);
          Tcl_DecrRefCount(out);
          /* Error msg in interp result */
          SWIG_fail;
        }
      }
      Tcl_SetObjResult(interp, out);
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetConfigOption(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::SetConfigOption char const * char const * ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetConfigOption" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SetConfigOption" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    CPLErrorReset();
    CPLSetConfigOption((char const *)arg1,(char const *)arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetConfigOption(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::GetConfigOption char const * char const * ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetConfigOption" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetConfigOption" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    CPLErrorReset();
    result = (char *)CPLGetConfigOption((char const *)arg1,(char const *)arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CPLBinaryToHex(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  GByte *arg2 = (GByte *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::CPLBinaryToHex nBytes pabyData ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CPLBinaryToHex" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_GByte, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPLBinaryToHex" "', argument " "2"" of type '" "GByte const *""'"); 
  }
  arg2 = reinterpret_cast< GByte * >(argp2);
  {
    CPLErrorReset();
    result = (char *)CPLBinaryToHex(arg1,(GByte const *)arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CPLHexToBinary(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  GByte *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::CPLHexToBinary pszHex pnBytes ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPLHexToBinary" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPLHexToBinary" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  {
    CPLErrorReset();
    result = (GByte *)CPLHexToBinary((char const *)arg1,arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_GByte,0));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MajorObject_GetDescription(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALMajorObjectShadow *arg1 = (GDALMajorObjectShadow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::MajorObject_GetDescription self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALMajorObjectShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MajorObject_GetDescription" "', argument " "1"" of type '" "GDALMajorObjectShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALMajorObjectShadow * >(argp1);
  {
    CPLErrorReset();
    result = (char *)GDALMajorObjectShadow_GetDescription(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MajorObject_SetDescription(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALMajorObjectShadow *arg1 = (GDALMajorObjectShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::MajorObject_SetDescription self pszNewDesc ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALMajorObjectShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MajorObject_SetDescription" "', argument " "1"" of type '" "GDALMajorObjectShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALMajorObjectShadow * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MajorObject_SetDescription" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    /* %typemap(check) (OGRFeatureShadow *feature) */
    if (!arg2) {
      Tcl_SetResult(interp, (char*) "Variable cannot be None", TCL_STATIC);
      SWIG_fail;
    }
  }
  {
    CPLErrorReset();
    GDALMajorObjectShadow_SetDescription(arg1,(char const *)arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MajorObject_GetMetadata_Dict(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALMajorObjectShadow *arg1 = (GDALMajorObjectShadow *) 0 ;
  char *arg2 = (char *) "" ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  char **result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o|o:osgeo::MajorObject_GetMetadata_Dict self ?pszDomain? ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALMajorObjectShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MajorObject_GetMetadata_Dict" "', argument " "1"" of type '" "GDALMajorObjectShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALMajorObjectShadow * >(argp1);
  if (objc > 2) {
    res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MajorObject_GetMetadata_Dict" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
  }
  {
    CPLErrorReset();
    result = (char **)GDALMajorObjectShadow_GetMetadata_Dict(arg1,(char const *)arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  {
    /* %typemap(out) char **dict */
    char **stringarray = result;
    Tcl_Obj *out = Tcl_NewDictObj();
    if ( stringarray != NULL ) {
      while (*stringarray != NULL ) {
        char const *valptr;
        char *keyptr;
        valptr = CPLParseNameValue( *stringarray, &keyptr );
        if ( valptr != 0 ) {
          Tcl_Obj *nm = Tcl_NewStringObj( keyptr, -1 );
          Tcl_Obj *val = Tcl_NewStringObj( valptr, -1 );
          if (Tcl_DictObjPut(interp, out, nm, val) != TCL_OK) {
            Tcl_DecrRefCount(nm);
            Tcl_DecrRefCount(val);
            Tcl_DecrRefCount(out);
            /* Error msg in interp result */
            SWIG_fail;
          }
          CPLFree( keyptr );
        }
        stringarray++;
      }
    }
    Tcl_SetObjResult(interp, out);
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MajorObject_GetMetadata_List(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALMajorObjectShadow *arg1 = (GDALMajorObjectShadow *) 0 ;
  char *arg2 = (char *) "" ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  char **result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o|o:osgeo::MajorObject_GetMetadata_List self ?pszDomain? ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALMajorObjectShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MajorObject_GetMetadata_List" "', argument " "1"" of type '" "GDALMajorObjectShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALMajorObjectShadow * >(argp1);
  if (objc > 2) {
    res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MajorObject_GetMetadata_List" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
  }
  {
    CPLErrorReset();
    result = (char **)GDALMajorObjectShadow_GetMetadata_List(arg1,(char const *)arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  {
    /* %typemap(out) char **options -> ( string ) */
    char **stringarray = result;
    if ( stringarray == NULL ) {
      Tcl_ResetResult(interp); /* NONE = Empty string */
    } else {
      int len = CSLCount( stringarray );
      Tcl_Obj *out = Tcl_NewListObj(0, NULL);
      for ( int i = 0; i < len; ++i ) {
        Tcl_Obj *o = Tcl_NewStringObj( stringarray[i], -1 );
        if (Tcl_ListObjAppendElement(interp, out, o) != TCL_OK) {
          Tcl_DecrRefCount(o);
          Tcl_DecrRefCount(out);
          /* Error msg in interp result */
          SWIG_fail;
        }
      }
      Tcl_SetObjResult(interp, out);
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MajorObject_SetMetadata__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALMajorObjectShadow *arg1 = (GDALMajorObjectShadow *) 0 ;
  char **arg2 = (char **) 0 ;
  char *arg3 = (char *) "" ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  CPLErr result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo|o:osgeo::MajorObject_SetMetadata self papszMetadata ?pszDomain? ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALMajorObjectShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MajorObject_SetMetadata" "', argument " "1"" of type '" "GDALMajorObjectShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALMajorObjectShadow * >(argp1);
  {
    /* %typemap(in) char **dict */
    arg2 = NULL;
    int size;
    if (Tcl_DictObjSize(interp, objv[2], &size) != TCL_OK) {
      if ( size > 0 ) {
        Tcl_DictSearch search;
        Tcl_Obj *key, *value;
        int done;
        
        if (Tcl_DictObjFirst(interp, objv[2], &search, &key, &value, &done) != TCL_OK) {
          SWIG_fail;;
        }
        for (; !done ; Tcl_DictObjNext(&search, &key, &value, &done)) {
          char *nm = Tcl_GetString(key);
          char *val = Tcl_GetString(value);
          arg2 = CSLAddNameValue( arg2, nm, val );
        }
        Tcl_DictObjDone(&search);
      }
    }
    else {
      Tcl_SetResult(interp, (char*) "Argument must be a dictionary", TCL_STATIC);
      SWIG_fail;
    }
  }
  if (objc > 3) {
    res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MajorObject_SetMetadata" "', argument " "3"" of type '" "char const *""'");
    }
    arg3 = reinterpret_cast< char * >(buf3);
  }
  {
    CPLErrorReset();
    result = (CPLErr)GDALMajorObjectShadow_SetMetadata__SWIG_0(arg1,arg2,(char const *)arg3);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  {
    /* %typemap(freearg) char **dict */
    CSLDestroy( arg2 );
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  {
    /* %typemap(freearg) char **dict */
    CSLDestroy( arg2 );
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MajorObject_SetMetadata__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALMajorObjectShadow *arg1 = (GDALMajorObjectShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) "" ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  CPLErr result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo|o:osgeo::MajorObject_SetMetadata self pszMetadataString ?pszDomain? ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALMajorObjectShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MajorObject_SetMetadata" "', argument " "1"" of type '" "GDALMajorObjectShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALMajorObjectShadow * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MajorObject_SetMetadata" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (objc > 3) {
    res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MajorObject_SetMetadata" "', argument " "3"" of type '" "char const *""'");
    }
    arg3 = reinterpret_cast< char * >(buf3);
  }
  {
    CPLErrorReset();
    result = (CPLErr)GDALMajorObjectShadow_SetMetadata__SWIG_1(arg1,arg2,(char const *)arg3);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MajorObject_SetMetadata(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if ((argc >= 2) && (argc <= 3)) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GDALMajorObjectShadow, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        /* %typecheck(SWIG_TYPECHECK_POINTER) (char **dict) */
        int size;
        _v = (Tcl_DictObjSize(interp, argv[1], &size) == TCL_OK || Tcl_ListObjLength(interp, argv[1], &size) == TCL_OK) ? 1 : 0;
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_MajorObject_SetMetadata__SWIG_0(clientData, interp, objc, argv - 1);
        }
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MajorObject_SetMetadata__SWIG_0(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  if ((argc >= 2) && (argc <= 3)) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GDALMajorObjectShadow, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        if (argc <= 2) {
          return _wrap_MajorObject_SetMetadata__SWIG_1(clientData, interp, objc, argv - 1);
        }
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MajorObject_SetMetadata__SWIG_1(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'MajorObject_SetMetadata'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MajorObject_GetMetadataItem(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALMajorObjectShadow *arg1 = (GDALMajorObjectShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) "" ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo|o:osgeo::MajorObject_GetMetadataItem self pszName ?pszDomain? ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALMajorObjectShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MajorObject_GetMetadataItem" "', argument " "1"" of type '" "GDALMajorObjectShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALMajorObjectShadow * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MajorObject_GetMetadataItem" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (objc > 3) {
    res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MajorObject_GetMetadataItem" "', argument " "3"" of type '" "char const *""'");
    }
    arg3 = reinterpret_cast< char * >(buf3);
  }
  {
    CPLErrorReset();
    result = (char *)GDALMajorObjectShadow_GetMetadataItem(arg1,(char const *)arg2,(char const *)arg3);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MajorObject_SetMetadataItem(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALMajorObjectShadow *arg1 = (GDALMajorObjectShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) "" ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  CPLErr result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo|o:osgeo::MajorObject_SetMetadataItem self pszName pszValue ?pszDomain? ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALMajorObjectShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MajorObject_SetMetadataItem" "', argument " "1"" of type '" "GDALMajorObjectShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALMajorObjectShadow * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MajorObject_SetMetadataItem" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MajorObject_SetMetadataItem" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  if (objc > 4) {
    res4 = SWIG_AsCharPtrAndSize(objv[4], &buf4, NULL, &alloc4);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MajorObject_SetMetadataItem" "', argument " "4"" of type '" "char const *""'");
    }
    arg4 = reinterpret_cast< char * >(buf4);
  }
  {
    CPLErrorReset();
    result = (CPLErr)GDALMajorObjectShadow_SetMetadataItem(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return TCL_ERROR;
}


static swig_method swig_GDALMajorObjectShadow_methods[] = {
    {"GetDescription", _wrap_MajorObject_GetDescription}, 
    {"SetDescription", _wrap_MajorObject_SetDescription}, 
    {"GetMetadata_Dict", _wrap_MajorObject_GetMetadata_Dict}, 
    {"GetMetadata_List", _wrap_MajorObject_GetMetadata_List}, 
    {"SetMetadata", _wrap_MajorObject_SetMetadata}, 
    {"GetMetadataItem", _wrap_MajorObject_GetMetadataItem}, 
    {"SetMetadataItem", _wrap_MajorObject_SetMetadataItem}, 
    {0,0}
};
static swig_attribute swig_GDALMajorObjectShadow_attributes[] = {
    {0,0,0}
};
static swig_class *swig_GDALMajorObjectShadow_bases[] = {0};
static const char * swig_GDALMajorObjectShadow_base_names[] = {0};
static swig_class _wrap_class_GDALMajorObjectShadow = { "MajorObject", &SWIGTYPE_p_GDALMajorObjectShadow,0,0, swig_GDALMajorObjectShadow_methods, swig_GDALMajorObjectShadow_attributes, swig_GDALMajorObjectShadow_bases,swig_GDALMajorObjectShadow_base_names, &swig_module };
SWIGINTERN int
_wrap_Driver_ShortName_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALDriverShadow *arg1 = (GDALDriverShadow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::Driver_ShortName_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALDriverShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Driver_ShortName_get" "', argument " "1"" of type '" "GDALDriverShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALDriverShadow * >(argp1);
  {
    CPLErrorReset();
    result = (char *)GDALDriverShadow_ShortName_get(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Driver_LongName_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALDriverShadow *arg1 = (GDALDriverShadow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::Driver_LongName_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALDriverShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Driver_LongName_get" "', argument " "1"" of type '" "GDALDriverShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALDriverShadow * >(argp1);
  {
    CPLErrorReset();
    result = (char *)GDALDriverShadow_LongName_get(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Driver_HelpTopic_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALDriverShadow *arg1 = (GDALDriverShadow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::Driver_HelpTopic_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALDriverShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Driver_HelpTopic_get" "', argument " "1"" of type '" "GDALDriverShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALDriverShadow * >(argp1);
  {
    CPLErrorReset();
    result = (char *)GDALDriverShadow_HelpTopic_get(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Driver_Create(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALDriverShadow *arg1 = (GDALDriverShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 = (int) 1 ;
  GDALDataType arg6 = (GDALDataType) GDT_Byte ;
  char **arg7 = (char **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  GDALDatasetShadow *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo|ooo:osgeo::Driver_Create self name xsize ysize ?bands? ?eType? ?options? ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALDriverShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Driver_Create" "', argument " "1"" of type '" "GDALDriverShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALDriverShadow * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Driver_Create" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Driver_Create" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Driver_Create" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  if (objc > 5) {
    ecode5 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Driver_Create" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
  }
  if (objc > 6) {
    ecode6 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[6], &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Driver_Create" "', argument " "6"" of type '" "GDALDataType""'");
    } 
    arg6 = static_cast< GDALDataType >(val6);
  }
  if (objc > 7) {
    {
      /* %typemap(in) char **options */
      int size;
      if (Tcl_ListObjLength(interp, objv[7], &size) != TCL_OK) {
        /* Error msg in interp result */
        SWIG_fail;
      }
      if ( !size ) {
        Tcl_SetResult(interp, (char*) "Input list mustn't be empty", TCL_STATIC);
        SWIG_fail;
      }
      
      for (int i = 0; i < size; i++) {
        Tcl_Obj **o = NULL;
        /* The reference count for the list element is not incremented with the following */
        if (Tcl_ListObjIndex(interp, objv[7], i, o) != TCL_OK) {
          /* Error msg in interp result */
          SWIG_fail;
        }
        char *pszItem = Tcl_GetString(*o);
        arg7 = CSLAddString( arg7, pszItem );
      }
    }
  }
  {
    CPLErrorReset();
    result = (GDALDatasetShadow *)GDALDriverShadow_Create(arg1,(char const *)arg2,arg3,arg4,arg5,arg6,arg7);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_GDALDatasetShadow,0));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg7 );
  }
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg7 );
  }
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Driver_CreateCopy(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALDriverShadow *arg1 = (GDALDriverShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  GDALDatasetShadow *arg3 = (GDALDatasetShadow *) 0 ;
  int arg4 = (int) 1 ;
  char **arg5 = (char **) 0 ;
  GDALProgressFunc arg6 = (GDALProgressFunc) NULL ;
  void *arg7 = (void *) NULL ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  GDALDatasetShadow *result = 0 ;
  
  /* %typemap(arginit) ( const char* callback_data=NULL)  */
  TclProgressData *psProgressInfo;
  psProgressInfo = (TclProgressData *) CPLCalloc(1,sizeof(TclProgressData));
  psProgressInfo->nLastReported = -1;
  psProgressInfo->interp = interp;
  psProgressInfo->psTclCallback = NULL;
  psProgressInfo->psTclCallbackData = NULL;
  if (SWIG_GetArgs(interp, objc, objv,"ooo|oooo:osgeo::Driver_CreateCopy self name src ?strict? ?options? ?callback? ?callback_data? ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALDriverShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Driver_CreateCopy" "', argument " "1"" of type '" "GDALDriverShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALDriverShadow * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Driver_CreateCopy" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Driver_CreateCopy" "', argument " "3"" of type '" "GDALDatasetShadow *""'"); 
  }
  arg3 = reinterpret_cast< GDALDatasetShadow * >(argp3);
  if (objc > 4) {
    ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Driver_CreateCopy" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
  }
  if (objc > 5) {
    {
      /* %typemap(in) char **options */
      int size;
      if (Tcl_ListObjLength(interp, objv[5], &size) != TCL_OK) {
        /* Error msg in interp result */
        SWIG_fail;
      }
      if ( !size ) {
        Tcl_SetResult(interp, (char*) "Input list mustn't be empty", TCL_STATIC);
        SWIG_fail;
      }
      
      for (int i = 0; i < size; i++) {
        Tcl_Obj **o = NULL;
        /* The reference count for the list element is not incremented with the following */
        if (Tcl_ListObjIndex(interp, objv[5], i, o) != TCL_OK) {
          /* Error msg in interp result */
          SWIG_fail;
        }
        char *pszItem = Tcl_GetString(*o);
        arg5 = CSLAddString( arg5, pszItem );
      }
    }
  }
  if (objc > 6) {
    {
      /* %typemap(in) (GDALProgressFunc callback = NULL) */
      /* callback_func typemap */
      if (objv[6] && !strcmp(Tcl_GetString(objv[6]), "")) {
        void* cbfunction = NULL;
        SWIG_ConvertPtr( objv[6], 
          (void**)&cbfunction, 
          SWIGTYPE_p_f_double_p_q_const__char_p_void__int, 
          SWIG_POINTER_EXCEPTION | 0 );
        
        if ( cbfunction == GDALTermProgress ) {
          arg6 = GDALTermProgress;
        } else if ( cbfunction == GDALDummyProgress) {
          arg6 = GDALDummyProgress;
        } else if ( cbfunction == GDALScaledProgress) {
          arg6 = GDALScaledProgress;
        } else {
          psProgressInfo->psTclCallback = objv[6];
          Tcl_IncrRefCount(psProgressInfo->psTclCallback);
          arg6 = TclProgressProxy;
        }
      }
    }
  }
  if (objc > 7) {
    {
      /* %typemap(in) ( void* callback_data=NULL)  */
      psProgressInfo->psTclCallbackData = objv[7];
      Tcl_IncrRefCount(psProgressInfo->psTclCallbackData);
      arg7 = psProgressInfo;
      
    }
  }
  {
    CPLErrorReset();
    result = (GDALDatasetShadow *)GDALDriverShadow_CreateCopy(arg1,(char const *)arg2,arg3,arg4,arg5,arg6,arg7);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_GDALDatasetShadow,0));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg5 );
  }
  {
    /* %typemap(freearg) ( void* callback_data=NULL)  */
    Tcl_DecrRefCount(psProgressInfo->psTclCallback);
    Tcl_DecrRefCount(psProgressInfo->psTclCallbackData);
    CPLFree(psProgressInfo);
  }
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg5 );
  }
  {
    /* %typemap(freearg) ( void* callback_data=NULL)  */
    Tcl_DecrRefCount(psProgressInfo->psTclCallback);
    Tcl_DecrRefCount(psProgressInfo->psTclCallbackData);
    CPLFree(psProgressInfo);
  }
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Driver_Delete(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALDriverShadow *arg1 = (GDALDriverShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::Driver_Delete self name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALDriverShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Driver_Delete" "', argument " "1"" of type '" "GDALDriverShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALDriverShadow * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Driver_Delete" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    CPLErrorReset();
    result = (int)GDALDriverShadow_Delete(arg1,(char const *)arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Driver_Rename(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALDriverShadow *arg1 = (GDALDriverShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:osgeo::Driver_Rename self newName oldName ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALDriverShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Driver_Rename" "', argument " "1"" of type '" "GDALDriverShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALDriverShadow * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Driver_Rename" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Driver_Rename" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    CPLErrorReset();
    result = (int)GDALDriverShadow_Rename(arg1,(char const *)arg2,(char const *)arg3);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Driver_Register(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALDriverShadow *arg1 = (GDALDriverShadow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::Driver_Register self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALDriverShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Driver_Register" "', argument " "1"" of type '" "GDALDriverShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALDriverShadow * >(argp1);
  {
    CPLErrorReset();
    result = (int)GDALDriverShadow_Register(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Driver_Deregister(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALDriverShadow *arg1 = (GDALDriverShadow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::Driver_Deregister self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALDriverShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Driver_Deregister" "', argument " "1"" of type '" "GDALDriverShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALDriverShadow * >(argp1);
  {
    CPLErrorReset();
    GDALDriverShadow_Deregister(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


static swig_method swig_GDALDriverShadow_methods[] = {
    {"Create", _wrap_Driver_Create}, 
    {"CreateCopy", _wrap_Driver_CreateCopy}, 
    {"Delete", _wrap_Driver_Delete}, 
    {"Rename", _wrap_Driver_Rename}, 
    {"Register", _wrap_Driver_Register}, 
    {"Deregister", _wrap_Driver_Deregister}, 
    {0,0}
};
static swig_attribute swig_GDALDriverShadow_attributes[] = {
    { "-ShortName",_wrap_Driver_ShortName_get, 0 },
    { "-LongName",_wrap_Driver_LongName_get, 0 },
    { "-HelpTopic",_wrap_Driver_HelpTopic_get, 0 },
    {0,0,0}
};
static swig_class *swig_GDALDriverShadow_bases[] = {0,0};
static const char * swig_GDALDriverShadow_base_names[] = {"GDALMajorObjectShadow *",0};
static swig_class _wrap_class_GDALDriverShadow = { "Driver", &SWIGTYPE_p_GDALDriverShadow,0,0, swig_GDALDriverShadow_methods, swig_GDALDriverShadow_attributes, swig_GDALDriverShadow_bases,swig_GDALDriverShadow_base_names, &swig_module };
SWIGINTERN int
_wrap_ColorEntry_c1_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALColorEntry *arg1 = (GDALColorEntry *) 0 ;
  short arg2 ;
  GDALColorEntry ce1 ;
  short val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::ColorEntry_c1_set self c1 ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  {
    /* %typemap(in) GDALColorEntry* */
    ce1.c1 = 0;
    ce1.c2 = 0;
    ce1.c3 = 0;
    ce1.c4 = 255;
    /* The following also checks if input is a list */
    int size;
    if (Tcl_ListObjLength(interp, objv[1], &size) != TCL_OK) {
      /* Error msg in interp result */
      SWIG_fail;
    }
    if ( size > 4 ) {
      Tcl_SetResult(interp, (char*) "ColorEntry sequence too long", TCL_STATIC);
      SWIG_fail;
    }
    if ( size < 3 ) {
      Tcl_SetResult(interp, (char*) "ColorEntry sequence too short", TCL_STATIC);
      SWIG_fail;
    }
    for( int i = 0; i<size; i++ ) {
      Tcl_Obj **o = NULL;
      int val;
      /* The reference count for the list element is not incremented with the following */
      if (Tcl_ListObjIndex(interp, objv[1], i, o) != TCL_OK) {
        /* Error msg in interp result */
        SWIG_fail;
      }
      
      if (Tcl_GetIntFromObj(interp, *o, &val) != TCL_OK) {
        /* Error msg in interp result */
        SWIG_fail;
      }
      switch (i) {
        case 1: ce1.c1 = (short) val; break;
        case 2: ce1.c2 = (short) val; break;
        case 3: ce1.c3 = (short) val; break;
        case 4: ce1.c4 = (short) val; break;
      }
    }
    arg1 = &ce1;
  }
  ecode2 = SWIG_AsVal_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ColorEntry_c1_set" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  if (arg1) (arg1)->c1 = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ColorEntry_c1_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALColorEntry *arg1 = (GDALColorEntry *) 0 ;
  GDALColorEntry ce1 ;
  short result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::ColorEntry_c1_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    /* %typemap(in) GDALColorEntry* */
    ce1.c1 = 0;
    ce1.c2 = 0;
    ce1.c3 = 0;
    ce1.c4 = 255;
    /* The following also checks if input is a list */
    int size;
    if (Tcl_ListObjLength(interp, objv[1], &size) != TCL_OK) {
      /* Error msg in interp result */
      SWIG_fail;
    }
    if ( size > 4 ) {
      Tcl_SetResult(interp, (char*) "ColorEntry sequence too long", TCL_STATIC);
      SWIG_fail;
    }
    if ( size < 3 ) {
      Tcl_SetResult(interp, (char*) "ColorEntry sequence too short", TCL_STATIC);
      SWIG_fail;
    }
    for( int i = 0; i<size; i++ ) {
      Tcl_Obj **o = NULL;
      int val;
      /* The reference count for the list element is not incremented with the following */
      if (Tcl_ListObjIndex(interp, objv[1], i, o) != TCL_OK) {
        /* Error msg in interp result */
        SWIG_fail;
      }
      
      if (Tcl_GetIntFromObj(interp, *o, &val) != TCL_OK) {
        /* Error msg in interp result */
        SWIG_fail;
      }
      switch (i) {
        case 1: ce1.c1 = (short) val; break;
        case 2: ce1.c2 = (short) val; break;
        case 3: ce1.c3 = (short) val; break;
        case 4: ce1.c4 = (short) val; break;
      }
    }
    arg1 = &ce1;
  }
  result = (short) ((arg1)->c1);
  Tcl_SetObjResult(interp,SWIG_From_short(static_cast< short >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ColorEntry_c2_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALColorEntry *arg1 = (GDALColorEntry *) 0 ;
  short arg2 ;
  GDALColorEntry ce1 ;
  short val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::ColorEntry_c2_set self c2 ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  {
    /* %typemap(in) GDALColorEntry* */
    ce1.c1 = 0;
    ce1.c2 = 0;
    ce1.c3 = 0;
    ce1.c4 = 255;
    /* The following also checks if input is a list */
    int size;
    if (Tcl_ListObjLength(interp, objv[1], &size) != TCL_OK) {
      /* Error msg in interp result */
      SWIG_fail;
    }
    if ( size > 4 ) {
      Tcl_SetResult(interp, (char*) "ColorEntry sequence too long", TCL_STATIC);
      SWIG_fail;
    }
    if ( size < 3 ) {
      Tcl_SetResult(interp, (char*) "ColorEntry sequence too short", TCL_STATIC);
      SWIG_fail;
    }
    for( int i = 0; i<size; i++ ) {
      Tcl_Obj **o = NULL;
      int val;
      /* The reference count for the list element is not incremented with the following */
      if (Tcl_ListObjIndex(interp, objv[1], i, o) != TCL_OK) {
        /* Error msg in interp result */
        SWIG_fail;
      }
      
      if (Tcl_GetIntFromObj(interp, *o, &val) != TCL_OK) {
        /* Error msg in interp result */
        SWIG_fail;
      }
      switch (i) {
        case 1: ce1.c1 = (short) val; break;
        case 2: ce1.c2 = (short) val; break;
        case 3: ce1.c3 = (short) val; break;
        case 4: ce1.c4 = (short) val; break;
      }
    }
    arg1 = &ce1;
  }
  ecode2 = SWIG_AsVal_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ColorEntry_c2_set" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  if (arg1) (arg1)->c2 = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ColorEntry_c2_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALColorEntry *arg1 = (GDALColorEntry *) 0 ;
  GDALColorEntry ce1 ;
  short result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::ColorEntry_c2_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    /* %typemap(in) GDALColorEntry* */
    ce1.c1 = 0;
    ce1.c2 = 0;
    ce1.c3 = 0;
    ce1.c4 = 255;
    /* The following also checks if input is a list */
    int size;
    if (Tcl_ListObjLength(interp, objv[1], &size) != TCL_OK) {
      /* Error msg in interp result */
      SWIG_fail;
    }
    if ( size > 4 ) {
      Tcl_SetResult(interp, (char*) "ColorEntry sequence too long", TCL_STATIC);
      SWIG_fail;
    }
    if ( size < 3 ) {
      Tcl_SetResult(interp, (char*) "ColorEntry sequence too short", TCL_STATIC);
      SWIG_fail;
    }
    for( int i = 0; i<size; i++ ) {
      Tcl_Obj **o = NULL;
      int val;
      /* The reference count for the list element is not incremented with the following */
      if (Tcl_ListObjIndex(interp, objv[1], i, o) != TCL_OK) {
        /* Error msg in interp result */
        SWIG_fail;
      }
      
      if (Tcl_GetIntFromObj(interp, *o, &val) != TCL_OK) {
        /* Error msg in interp result */
        SWIG_fail;
      }
      switch (i) {
        case 1: ce1.c1 = (short) val; break;
        case 2: ce1.c2 = (short) val; break;
        case 3: ce1.c3 = (short) val; break;
        case 4: ce1.c4 = (short) val; break;
      }
    }
    arg1 = &ce1;
  }
  result = (short) ((arg1)->c2);
  Tcl_SetObjResult(interp,SWIG_From_short(static_cast< short >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ColorEntry_c3_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALColorEntry *arg1 = (GDALColorEntry *) 0 ;
  short arg2 ;
  GDALColorEntry ce1 ;
  short val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::ColorEntry_c3_set self c3 ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  {
    /* %typemap(in) GDALColorEntry* */
    ce1.c1 = 0;
    ce1.c2 = 0;
    ce1.c3 = 0;
    ce1.c4 = 255;
    /* The following also checks if input is a list */
    int size;
    if (Tcl_ListObjLength(interp, objv[1], &size) != TCL_OK) {
      /* Error msg in interp result */
      SWIG_fail;
    }
    if ( size > 4 ) {
      Tcl_SetResult(interp, (char*) "ColorEntry sequence too long", TCL_STATIC);
      SWIG_fail;
    }
    if ( size < 3 ) {
      Tcl_SetResult(interp, (char*) "ColorEntry sequence too short", TCL_STATIC);
      SWIG_fail;
    }
    for( int i = 0; i<size; i++ ) {
      Tcl_Obj **o = NULL;
      int val;
      /* The reference count for the list element is not incremented with the following */
      if (Tcl_ListObjIndex(interp, objv[1], i, o) != TCL_OK) {
        /* Error msg in interp result */
        SWIG_fail;
      }
      
      if (Tcl_GetIntFromObj(interp, *o, &val) != TCL_OK) {
        /* Error msg in interp result */
        SWIG_fail;
      }
      switch (i) {
        case 1: ce1.c1 = (short) val; break;
        case 2: ce1.c2 = (short) val; break;
        case 3: ce1.c3 = (short) val; break;
        case 4: ce1.c4 = (short) val; break;
      }
    }
    arg1 = &ce1;
  }
  ecode2 = SWIG_AsVal_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ColorEntry_c3_set" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  if (arg1) (arg1)->c3 = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ColorEntry_c3_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALColorEntry *arg1 = (GDALColorEntry *) 0 ;
  GDALColorEntry ce1 ;
  short result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::ColorEntry_c3_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    /* %typemap(in) GDALColorEntry* */
    ce1.c1 = 0;
    ce1.c2 = 0;
    ce1.c3 = 0;
    ce1.c4 = 255;
    /* The following also checks if input is a list */
    int size;
    if (Tcl_ListObjLength(interp, objv[1], &size) != TCL_OK) {
      /* Error msg in interp result */
      SWIG_fail;
    }
    if ( size > 4 ) {
      Tcl_SetResult(interp, (char*) "ColorEntry sequence too long", TCL_STATIC);
      SWIG_fail;
    }
    if ( size < 3 ) {
      Tcl_SetResult(interp, (char*) "ColorEntry sequence too short", TCL_STATIC);
      SWIG_fail;
    }
    for( int i = 0; i<size; i++ ) {
      Tcl_Obj **o = NULL;
      int val;
      /* The reference count for the list element is not incremented with the following */
      if (Tcl_ListObjIndex(interp, objv[1], i, o) != TCL_OK) {
        /* Error msg in interp result */
        SWIG_fail;
      }
      
      if (Tcl_GetIntFromObj(interp, *o, &val) != TCL_OK) {
        /* Error msg in interp result */
        SWIG_fail;
      }
      switch (i) {
        case 1: ce1.c1 = (short) val; break;
        case 2: ce1.c2 = (short) val; break;
        case 3: ce1.c3 = (short) val; break;
        case 4: ce1.c4 = (short) val; break;
      }
    }
    arg1 = &ce1;
  }
  result = (short) ((arg1)->c3);
  Tcl_SetObjResult(interp,SWIG_From_short(static_cast< short >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ColorEntry_c4_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALColorEntry *arg1 = (GDALColorEntry *) 0 ;
  short arg2 ;
  GDALColorEntry ce1 ;
  short val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::ColorEntry_c4_set self c4 ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  {
    /* %typemap(in) GDALColorEntry* */
    ce1.c1 = 0;
    ce1.c2 = 0;
    ce1.c3 = 0;
    ce1.c4 = 255;
    /* The following also checks if input is a list */
    int size;
    if (Tcl_ListObjLength(interp, objv[1], &size) != TCL_OK) {
      /* Error msg in interp result */
      SWIG_fail;
    }
    if ( size > 4 ) {
      Tcl_SetResult(interp, (char*) "ColorEntry sequence too long", TCL_STATIC);
      SWIG_fail;
    }
    if ( size < 3 ) {
      Tcl_SetResult(interp, (char*) "ColorEntry sequence too short", TCL_STATIC);
      SWIG_fail;
    }
    for( int i = 0; i<size; i++ ) {
      Tcl_Obj **o = NULL;
      int val;
      /* The reference count for the list element is not incremented with the following */
      if (Tcl_ListObjIndex(interp, objv[1], i, o) != TCL_OK) {
        /* Error msg in interp result */
        SWIG_fail;
      }
      
      if (Tcl_GetIntFromObj(interp, *o, &val) != TCL_OK) {
        /* Error msg in interp result */
        SWIG_fail;
      }
      switch (i) {
        case 1: ce1.c1 = (short) val; break;
        case 2: ce1.c2 = (short) val; break;
        case 3: ce1.c3 = (short) val; break;
        case 4: ce1.c4 = (short) val; break;
      }
    }
    arg1 = &ce1;
  }
  ecode2 = SWIG_AsVal_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ColorEntry_c4_set" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  if (arg1) (arg1)->c4 = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ColorEntry_c4_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALColorEntry *arg1 = (GDALColorEntry *) 0 ;
  GDALColorEntry ce1 ;
  short result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::ColorEntry_c4_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    /* %typemap(in) GDALColorEntry* */
    ce1.c1 = 0;
    ce1.c2 = 0;
    ce1.c3 = 0;
    ce1.c4 = 255;
    /* The following also checks if input is a list */
    int size;
    if (Tcl_ListObjLength(interp, objv[1], &size) != TCL_OK) {
      /* Error msg in interp result */
      SWIG_fail;
    }
    if ( size > 4 ) {
      Tcl_SetResult(interp, (char*) "ColorEntry sequence too long", TCL_STATIC);
      SWIG_fail;
    }
    if ( size < 3 ) {
      Tcl_SetResult(interp, (char*) "ColorEntry sequence too short", TCL_STATIC);
      SWIG_fail;
    }
    for( int i = 0; i<size; i++ ) {
      Tcl_Obj **o = NULL;
      int val;
      /* The reference count for the list element is not incremented with the following */
      if (Tcl_ListObjIndex(interp, objv[1], i, o) != TCL_OK) {
        /* Error msg in interp result */
        SWIG_fail;
      }
      
      if (Tcl_GetIntFromObj(interp, *o, &val) != TCL_OK) {
        /* Error msg in interp result */
        SWIG_fail;
      }
      switch (i) {
        case 1: ce1.c1 = (short) val; break;
        case 2: ce1.c2 = (short) val; break;
        case 3: ce1.c3 = (short) val; break;
        case 4: ce1.c4 = (short) val; break;
      }
    }
    arg1 = &ce1;
  }
  result = (short) ((arg1)->c4);
  Tcl_SetObjResult(interp,SWIG_From_short(static_cast< short >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_ColorEntry(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALColorEntry *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":osgeo::new_ColorEntry ") == TCL_ERROR) SWIG_fail;
  {
    CPLErrorReset();
    result = (GDALColorEntry *)new GDALColorEntry();
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  {
    /* %typemap(out) GDALColorEntry* */
    Tcl_Obj *out = Tcl_NewListObj(0, NULL);
    Tcl_Obj *val;
    val  = Tcl_NewIntObj((*result).c1);
    if (Tcl_ListObjAppendElement(interp, out, val) != TCL_OK) {
      Tcl_DecrRefCount(val);
      Tcl_DecrRefCount(out);
      SWIG_fail;
    }
    val = Tcl_NewIntObj((*result).c2);
    if (Tcl_ListObjAppendElement(interp, out, val) != TCL_OK) {
      Tcl_DecrRefCount(val);
      Tcl_DecrRefCount(out);
      SWIG_fail;
    }
    val = Tcl_NewIntObj((*result).c3);
    if (Tcl_ListObjAppendElement(interp, out, val) != TCL_OK) {
      Tcl_DecrRefCount(val);
      Tcl_DecrRefCount(out);
      SWIG_fail;
    }
    val = Tcl_NewIntObj((*result).c4);
    if (Tcl_ListObjAppendElement(interp, out, val) != TCL_OK) {
      Tcl_DecrRefCount(val);
      Tcl_DecrRefCount(out);
      SWIG_fail;
    }
    Tcl_SetObjResult(interp, out);
    
    /* More compact: (If used, the next typemap must be modified as well)
           Tcl_SetObjResult(interp, Tcl_ObjPrintf("%x%x%x%x", (*result).c1, (*result).c2, (*result).c3, (*result).c4));
         */
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_ColorEntry(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALColorEntry *arg1 = (GDALColorEntry *) 0 ;
  GDALColorEntry ce1 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::delete_ColorEntry self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    /* %typemap(in) GDALColorEntry* */
    ce1.c1 = 0;
    ce1.c2 = 0;
    ce1.c3 = 0;
    ce1.c4 = 255;
    /* The following also checks if input is a list */
    int size;
    if (Tcl_ListObjLength(interp, objv[1], &size) != TCL_OK) {
      /* Error msg in interp result */
      SWIG_fail;
    }
    if ( size > 4 ) {
      Tcl_SetResult(interp, (char*) "ColorEntry sequence too long", TCL_STATIC);
      SWIG_fail;
    }
    if ( size < 3 ) {
      Tcl_SetResult(interp, (char*) "ColorEntry sequence too short", TCL_STATIC);
      SWIG_fail;
    }
    for( int i = 0; i<size; i++ ) {
      Tcl_Obj **o = NULL;
      int val;
      /* The reference count for the list element is not incremented with the following */
      if (Tcl_ListObjIndex(interp, objv[1], i, o) != TCL_OK) {
        /* Error msg in interp result */
        SWIG_fail;
      }
      
      if (Tcl_GetIntFromObj(interp, *o, &val) != TCL_OK) {
        /* Error msg in interp result */
        SWIG_fail;
      }
      switch (i) {
        case 1: ce1.c1 = (short) val; break;
        case 2: ce1.c2 = (short) val; break;
        case 3: ce1.c3 = (short) val; break;
        case 4: ce1.c4 = (short) val; break;
      }
    }
    arg1 = &ce1;
  }
  {
    CPLErrorReset();
    delete arg1;
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_ColorEntry(void *obj) {
GDALColorEntry *arg1 = (GDALColorEntry *) obj;
delete arg1;
}
static swig_method swig_GDALColorEntry_methods[] = {
    {0,0}
};
static swig_attribute swig_GDALColorEntry_attributes[] = {
    { "-c1",_wrap_ColorEntry_c1_get, _wrap_ColorEntry_c1_set},
    { "-c2",_wrap_ColorEntry_c2_get, _wrap_ColorEntry_c2_set},
    { "-c3",_wrap_ColorEntry_c3_get, _wrap_ColorEntry_c3_set},
    { "-c4",_wrap_ColorEntry_c4_get, _wrap_ColorEntry_c4_set},
    {0,0,0}
};
static swig_class *swig_GDALColorEntry_bases[] = {0};
static const char * swig_GDALColorEntry_base_names[] = {0};
static swig_class _wrap_class_GDALColorEntry = { "ColorEntry", &SWIGTYPE_p_GDALColorEntry,_wrap_new_ColorEntry, swig_delete_ColorEntry, swig_GDALColorEntry_methods, swig_GDALColorEntry_attributes, swig_GDALColorEntry_bases,swig_GDALColorEntry_base_names, &swig_module };
SWIGINTERN int
_wrap_GCP_GCPX_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::GCP_GCPX_set self GCPX ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GCP_GCPX_set" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
  }
  arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GCP_GCPX_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    CPLErrorReset();
    GDAL_GCP_GCPX_set(arg1,arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GCP_GCPX_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::GCP_GCPX_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GCP_GCPX_get" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
  }
  arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
  {
    CPLErrorReset();
    result = (double)GDAL_GCP_GCPX_get(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GCP_GCPY_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::GCP_GCPY_set self GCPY ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GCP_GCPY_set" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
  }
  arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GCP_GCPY_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    CPLErrorReset();
    GDAL_GCP_GCPY_set(arg1,arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GCP_GCPY_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::GCP_GCPY_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GCP_GCPY_get" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
  }
  arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
  {
    CPLErrorReset();
    result = (double)GDAL_GCP_GCPY_get(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GCP_GCPZ_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::GCP_GCPZ_set self GCPZ ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GCP_GCPZ_set" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
  }
  arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GCP_GCPZ_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    CPLErrorReset();
    GDAL_GCP_GCPZ_set(arg1,arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GCP_GCPZ_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::GCP_GCPZ_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GCP_GCPZ_get" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
  }
  arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
  {
    CPLErrorReset();
    result = (double)GDAL_GCP_GCPZ_get(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GCP_GCPPixel_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::GCP_GCPPixel_set self GCPPixel ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GCP_GCPPixel_set" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
  }
  arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GCP_GCPPixel_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    CPLErrorReset();
    GDAL_GCP_GCPPixel_set(arg1,arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GCP_GCPPixel_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::GCP_GCPPixel_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GCP_GCPPixel_get" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
  }
  arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
  {
    CPLErrorReset();
    result = (double)GDAL_GCP_GCPPixel_get(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GCP_GCPLine_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::GCP_GCPLine_set self GCPLine ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GCP_GCPLine_set" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
  }
  arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GCP_GCPLine_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    CPLErrorReset();
    GDAL_GCP_GCPLine_set(arg1,arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GCP_GCPLine_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::GCP_GCPLine_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GCP_GCPLine_get" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
  }
  arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
  {
    CPLErrorReset();
    result = (double)GDAL_GCP_GCPLine_get(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GCP_Info_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::GCP_Info_set self Info ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GCP_Info_set" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
  }
  arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GCP_Info_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    CPLErrorReset();
    GDAL_GCP_Info_set(arg1,arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GCP_Info_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::GCP_Info_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GCP_Info_get" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
  }
  arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
  {
    CPLErrorReset();
    result = (char *)GDAL_GCP_Info_get(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GCP_Id_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::GCP_Id_set self Id ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GCP_Id_set" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
  }
  arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GCP_Id_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    CPLErrorReset();
    GDAL_GCP_Id_set(arg1,arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GCP_Id_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::GCP_Id_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GCP_Id_get" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
  }
  arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
  {
    CPLErrorReset();
    result = (char *)GDAL_GCP_Id_get(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_GCP(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 = (double) 0.0 ;
  double arg2 = (double) 0.0 ;
  double arg3 = (double) 0.0 ;
  double arg4 = (double) 0.0 ;
  double arg5 = (double) 0.0 ;
  char *arg6 = (char *) "" ;
  char *arg7 = (char *) "" ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  GDAL_GCP *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"|ooooooo:osgeo::new_GCP ?x? ?y? ?z? ?pixel? ?line? ?info? ?id? ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  if (objc > 1) {
    ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_GCP" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
  }
  if (objc > 2) {
    ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GCP" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
  }
  if (objc > 3) {
    ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_GCP" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
  }
  if (objc > 4) {
    ecode4 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_GCP" "', argument " "4"" of type '" "double""'");
    } 
    arg4 = static_cast< double >(val4);
  }
  if (objc > 5) {
    ecode5 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_GCP" "', argument " "5"" of type '" "double""'");
    } 
    arg5 = static_cast< double >(val5);
  }
  if (objc > 6) {
    res6 = SWIG_AsCharPtrAndSize(objv[6], &buf6, NULL, &alloc6);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_GCP" "', argument " "6"" of type '" "char const *""'");
    }
    arg6 = reinterpret_cast< char * >(buf6);
  }
  if (objc > 7) {
    res7 = SWIG_AsCharPtrAndSize(objv[7], &buf7, NULL, &alloc7);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_GCP" "', argument " "7"" of type '" "char const *""'");
    }
    arg7 = reinterpret_cast< char * >(buf7);
  }
  {
    CPLErrorReset();
    result = (GDAL_GCP *)new_GDAL_GCP(arg1,arg2,arg3,arg4,arg5,(char const *)arg6,(char const *)arg7);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_GDAL_GCP,0));
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return TCL_OK;
fail:
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_GCP(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::delete_GCP self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDAL_GCP, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GCP" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
  }
  arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
  {
    CPLErrorReset();
    delete_GDAL_GCP(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_GCP(void *obj) {
GDAL_GCP *arg1 = (GDAL_GCP *) obj;
delete_GDAL_GCP(arg1);
}
static swig_method swig_GDAL_GCP_methods[] = {
    {0,0}
};
static swig_attribute swig_GDAL_GCP_attributes[] = {
    { "-GCPX",_wrap_GCP_GCPX_get, _wrap_GCP_GCPX_set},
    { "-GCPY",_wrap_GCP_GCPY_get, _wrap_GCP_GCPY_set},
    { "-GCPZ",_wrap_GCP_GCPZ_get, _wrap_GCP_GCPZ_set},
    { "-GCPPixel",_wrap_GCP_GCPPixel_get, _wrap_GCP_GCPPixel_set},
    { "-GCPLine",_wrap_GCP_GCPLine_get, _wrap_GCP_GCPLine_set},
    { "-Info",_wrap_GCP_Info_get, _wrap_GCP_Info_set},
    { "-Id",_wrap_GCP_Id_get, _wrap_GCP_Id_set},
    {0,0,0}
};
static swig_class *swig_GDAL_GCP_bases[] = {0};
static const char * swig_GDAL_GCP_base_names[] = {0};
static swig_class _wrap_class_GDAL_GCP = { "GCP", &SWIGTYPE_p_GDAL_GCP,_wrap_new_GCP, swig_delete_GCP, swig_GDAL_GCP_methods, swig_GDAL_GCP_attributes, swig_GDAL_GCP_bases,swig_GDAL_GCP_base_names, &swig_module };
SWIGINTERN int
_wrap_GDAL_GCP_GCPX_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::GDAL_GCP_GCPX_get h ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GDAL_GCP_GCPX_get" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
  }
  arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
  {
    CPLErrorReset();
    result = (double)GDAL_GCP_GCPX_get(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GDAL_GCP_GCPX_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::GDAL_GCP_GCPX_set h val ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GDAL_GCP_GCPX_set" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
  }
  arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GDAL_GCP_GCPX_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    CPLErrorReset();
    GDAL_GCP_GCPX_set(arg1,arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GDAL_GCP_GCPY_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::GDAL_GCP_GCPY_get h ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GDAL_GCP_GCPY_get" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
  }
  arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
  {
    CPLErrorReset();
    result = (double)GDAL_GCP_GCPY_get(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GDAL_GCP_GCPY_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::GDAL_GCP_GCPY_set h val ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GDAL_GCP_GCPY_set" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
  }
  arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GDAL_GCP_GCPY_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    CPLErrorReset();
    GDAL_GCP_GCPY_set(arg1,arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GDAL_GCP_GCPZ_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::GDAL_GCP_GCPZ_get h ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GDAL_GCP_GCPZ_get" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
  }
  arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
  {
    CPLErrorReset();
    result = (double)GDAL_GCP_GCPZ_get(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GDAL_GCP_GCPZ_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::GDAL_GCP_GCPZ_set h val ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GDAL_GCP_GCPZ_set" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
  }
  arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GDAL_GCP_GCPZ_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    CPLErrorReset();
    GDAL_GCP_GCPZ_set(arg1,arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GDAL_GCP_GCPPixel_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::GDAL_GCP_GCPPixel_get h ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GDAL_GCP_GCPPixel_get" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
  }
  arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
  {
    CPLErrorReset();
    result = (double)GDAL_GCP_GCPPixel_get(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GDAL_GCP_GCPPixel_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::GDAL_GCP_GCPPixel_set h val ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GDAL_GCP_GCPPixel_set" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
  }
  arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GDAL_GCP_GCPPixel_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    CPLErrorReset();
    GDAL_GCP_GCPPixel_set(arg1,arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GDAL_GCP_GCPLine_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::GDAL_GCP_GCPLine_get h ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GDAL_GCP_GCPLine_get" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
  }
  arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
  {
    CPLErrorReset();
    result = (double)GDAL_GCP_GCPLine_get(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GDAL_GCP_GCPLine_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::GDAL_GCP_GCPLine_set h val ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GDAL_GCP_GCPLine_set" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
  }
  arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GDAL_GCP_GCPLine_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    CPLErrorReset();
    GDAL_GCP_GCPLine_set(arg1,arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GDAL_GCP_Info_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::GDAL_GCP_Info_get h ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GDAL_GCP_Info_get" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
  }
  arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
  {
    CPLErrorReset();
    result = (char *)GDAL_GCP_Info_get(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GDAL_GCP_Info_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::GDAL_GCP_Info_set h val ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GDAL_GCP_Info_set" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
  }
  arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GDAL_GCP_Info_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    CPLErrorReset();
    GDAL_GCP_Info_set(arg1,(char const *)arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GDAL_GCP_Id_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::GDAL_GCP_Id_get h ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GDAL_GCP_Id_get" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
  }
  arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
  {
    CPLErrorReset();
    result = (char *)GDAL_GCP_Id_get(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GDAL_GCP_Id_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::GDAL_GCP_Id_set h val ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GDAL_GCP_Id_set" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
  }
  arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GDAL_GCP_Id_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    CPLErrorReset();
    GDAL_GCP_Id_set(arg1,(char const *)arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GDAL_GCP_get_GCPX(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::GDAL_GCP_get_GCPX h ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GDAL_GCP_get_GCPX" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
  }
  arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
  {
    CPLErrorReset();
    result = (double)GDAL_GCP_get_GCPX(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GDAL_GCP_set_GCPX(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::GDAL_GCP_set_GCPX h val ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GDAL_GCP_set_GCPX" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
  }
  arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GDAL_GCP_set_GCPX" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    CPLErrorReset();
    GDAL_GCP_set_GCPX(arg1,arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GDAL_GCP_get_GCPY(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::GDAL_GCP_get_GCPY h ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GDAL_GCP_get_GCPY" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
  }
  arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
  {
    CPLErrorReset();
    result = (double)GDAL_GCP_get_GCPY(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GDAL_GCP_set_GCPY(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::GDAL_GCP_set_GCPY h val ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GDAL_GCP_set_GCPY" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
  }
  arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GDAL_GCP_set_GCPY" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    CPLErrorReset();
    GDAL_GCP_set_GCPY(arg1,arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GDAL_GCP_get_GCPZ(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::GDAL_GCP_get_GCPZ h ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GDAL_GCP_get_GCPZ" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
  }
  arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
  {
    CPLErrorReset();
    result = (double)GDAL_GCP_get_GCPZ(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GDAL_GCP_set_GCPZ(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::GDAL_GCP_set_GCPZ h val ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GDAL_GCP_set_GCPZ" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
  }
  arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GDAL_GCP_set_GCPZ" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    CPLErrorReset();
    GDAL_GCP_set_GCPZ(arg1,arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GDAL_GCP_get_GCPPixel(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::GDAL_GCP_get_GCPPixel h ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GDAL_GCP_get_GCPPixel" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
  }
  arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
  {
    CPLErrorReset();
    result = (double)GDAL_GCP_get_GCPPixel(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GDAL_GCP_set_GCPPixel(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::GDAL_GCP_set_GCPPixel h val ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GDAL_GCP_set_GCPPixel" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
  }
  arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GDAL_GCP_set_GCPPixel" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    CPLErrorReset();
    GDAL_GCP_set_GCPPixel(arg1,arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GDAL_GCP_get_GCPLine(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::GDAL_GCP_get_GCPLine h ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GDAL_GCP_get_GCPLine" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
  }
  arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
  {
    CPLErrorReset();
    result = (double)GDAL_GCP_get_GCPLine(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GDAL_GCP_set_GCPLine(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::GDAL_GCP_set_GCPLine h val ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GDAL_GCP_set_GCPLine" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
  }
  arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GDAL_GCP_set_GCPLine" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    CPLErrorReset();
    GDAL_GCP_set_GCPLine(arg1,arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GDAL_GCP_get_Info(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::GDAL_GCP_get_Info h ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GDAL_GCP_get_Info" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
  }
  arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
  {
    CPLErrorReset();
    result = (char *)GDAL_GCP_get_Info(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GDAL_GCP_set_Info(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::GDAL_GCP_set_Info h val ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GDAL_GCP_set_Info" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
  }
  arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GDAL_GCP_set_Info" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    CPLErrorReset();
    GDAL_GCP_set_Info(arg1,(char const *)arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GDAL_GCP_get_Id(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::GDAL_GCP_get_Id h ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GDAL_GCP_get_Id" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
  }
  arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
  {
    CPLErrorReset();
    result = (char *)GDAL_GCP_get_Id(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GDAL_GCP_set_Id(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::GDAL_GCP_set_Id h val ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GDAL_GCP_set_Id" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
  }
  arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GDAL_GCP_set_Id" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    CPLErrorReset();
    GDAL_GCP_set_Id(arg1,(char const *)arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GCPsToGeoTransform(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  GDAL_GCP *arg2 = (GDAL_GCP *) 0 ;
  double *arg3 ;
  int arg4 = (int) 1 ;
  GDAL_GCP *tmpGCPList1 ;
  double argout3[6] ;
  int val4 ;
  int ecode4 = 0 ;
  FALSE_IS_ERR result;
  
  {
    /* %typemap(in,numinputs=0) (double argout3[ANY]) */
    arg3 = argout3;
  }
  if (SWIG_GetArgs(interp, objc, objv,"o|o:osgeo::GCPsToGeoTransform nGCPs ?pGCPs? ?bApproxOK? ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  {
    /* %typemap(in,numinputs=1) (int nGCPs, GDAL_GCP const *pGCPs ) */
    /* The following also checks if input is a list */
    if (Tcl_ListObjLength(interp, objv[1], &arg1) != TCL_OK) {
      /* Error msg in interp result */
      SWIG_fail;
    }
    if ( !arg1 ) {
      Tcl_SetResult(interp, (char*) "Input list mustn't be empty", TCL_STATIC);
      SWIG_fail;
    }
    
    tmpGCPList1 = (GDAL_GCP*) CPLMalloc(arg1*sizeof(GDAL_GCP));
    arg2 = tmpGCPList1;
    for( int i = 0; i<arg1; i++ ) {
      Tcl_Obj **o = NULL;
      /* The reference count for the list element is not incremented with the following */
      if (Tcl_ListObjIndex(interp, objv[1], i, o) != TCL_OK) {
        /* Error msg in interp result */
        SWIG_fail;
      }
      
      GDAL_GCP *item = 0;
      SWIG_ConvertPtr( *o, (void**)&item, SWIGTYPE_p_GDAL_GCP, SWIG_POINTER_EXCEPTION | 0 );
      if ( ! item ) {
        SWIG_fail;
      }
      
      memcpy( (void*) tmpGCPList1, (void*) item, sizeof( GDAL_GCP ) );
      ++tmpGCPList1;
    }
  }
  if (objc > 2) {
    ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GCPsToGeoTransform" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
  }
  {
    CPLErrorReset();
    result = GDALGCPsToGeoTransform(arg1,(GDAL_GCP const *)arg2,arg3,arg4);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  /*%typemap(out) IF_FALSE_RETURN_NONE */
  {
    /* %typemap(argout) (double argout[ANY]) */
    Tcl_Obj *out = CreateListFromDoubleArray( interp, arg3, 6 );
    if (out == NULL) SWIG_fail;
    Tcl_ListObjAppendElement(interp,Tcl_GetObjResult(interp),out);
  }
  {
    /* %typemap(freearg) (int nGCPs, GDAL_GCP const *pGCPs ) */
    if (arg2) {
      CPLFree( (void*) arg2 );
    }
  }
  {
    /* %typemap(ret) IF_FALSE_RETURN_NONE */
    if (result == 0 ) {
      Tcl_ResetResult(interp); /* NONE = Empty string */
    }
  }
  return TCL_OK;
fail:
  {
    /* %typemap(freearg) (int nGCPs, GDAL_GCP const *pGCPs ) */
    if (arg2) {
      CPLFree( (void*) arg2 );
    }
  }
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Dataset_RasterXSize_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::Dataset_RasterXSize_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dataset_RasterXSize_get" "', argument " "1"" of type '" "GDALDatasetShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALDatasetShadow * >(argp1);
  {
    CPLErrorReset();
    result = (int)GDALDatasetShadow_RasterXSize_get(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Dataset_RasterYSize_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::Dataset_RasterYSize_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dataset_RasterYSize_get" "', argument " "1"" of type '" "GDALDatasetShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALDatasetShadow * >(argp1);
  {
    CPLErrorReset();
    result = (int)GDALDatasetShadow_RasterYSize_get(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Dataset_RasterCount_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::Dataset_RasterCount_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dataset_RasterCount_get" "', argument " "1"" of type '" "GDALDatasetShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALDatasetShadow * >(argp1);
  {
    CPLErrorReset();
    result = (int)GDALDatasetShadow_RasterCount_get(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_Dataset(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::delete_Dataset self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALDatasetShadow, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Dataset" "', argument " "1"" of type '" "GDALDatasetShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALDatasetShadow * >(argp1);
  {
    CPLErrorReset();
    delete_GDALDatasetShadow(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Dataset_GetDriver(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GDALDriverShadow *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::Dataset_GetDriver self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dataset_GetDriver" "', argument " "1"" of type '" "GDALDatasetShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALDatasetShadow * >(argp1);
  {
    CPLErrorReset();
    result = (GDALDriverShadow *)GDALDatasetShadow_GetDriver(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_GDALDriverShadow,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Dataset_GetRasterBand(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  GDALRasterBandShadow *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::Dataset_GetRasterBand self nBand ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dataset_GetRasterBand" "', argument " "1"" of type '" "GDALDatasetShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALDatasetShadow * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Dataset_GetRasterBand" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    CPLErrorReset();
    result = (GDALRasterBandShadow *)GDALDatasetShadow_GetRasterBand(arg1,arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_GDALRasterBandShadow,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Dataset_GetProjection(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::Dataset_GetProjection self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dataset_GetProjection" "', argument " "1"" of type '" "GDALDatasetShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALDatasetShadow * >(argp1);
  {
    CPLErrorReset();
    result = (char *)GDALDatasetShadow_GetProjection(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Dataset_GetProjectionRef(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::Dataset_GetProjectionRef self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dataset_GetProjectionRef" "', argument " "1"" of type '" "GDALDatasetShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALDatasetShadow * >(argp1);
  {
    CPLErrorReset();
    result = (char *)GDALDatasetShadow_GetProjectionRef(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Dataset_SetProjection(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  CPLErr result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::Dataset_SetProjection self prj ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dataset_SetProjection" "', argument " "1"" of type '" "GDALDatasetShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALDatasetShadow * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dataset_SetProjection" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    CPLErrorReset();
    result = (CPLErr)GDALDatasetShadow_SetProjection(arg1,(char const *)arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Dataset_GetGeoTransform(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double argout2[6] ;
  
  {
    /* %typemap(in,numinputs=0) (double argout2[ANY]) */
    arg2 = argout2;
  }
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::Dataset_GetGeoTransform self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dataset_GetGeoTransform" "', argument " "1"" of type '" "GDALDatasetShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALDatasetShadow * >(argp1);
  {
    CPLErrorReset();
    GDALDatasetShadow_GetGeoTransform(arg1,arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  {
    /* %typemap(argout) (double argout[ANY]) */
    Tcl_Obj *out = CreateListFromDoubleArray( interp, arg2, 6 );
    if (out == NULL) SWIG_fail;
    Tcl_ListObjAppendElement(interp,Tcl_GetObjResult(interp),out);
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Dataset_SetGeoTransform(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double argin2[6] ;
  CPLErr result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::Dataset_SetGeoTransform self argin ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dataset_SetGeoTransform" "', argument " "1"" of type '" "GDALDatasetShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALDatasetShadow * >(argp1);
  {
    /* %typemap(in) (double argin2[ANY]) */
    arg2 = argin2;
    int lst_size;
    /* The following also checks if input is a list */
    if (Tcl_ListObjLength(interp, objv[2], &lst_size) != TCL_OK) {
      /* Error msg in interp result */
      SWIG_fail;
    }
    if ( lst_size != 6 ) {
      Tcl_SetResult(interp, (char*) "List must have length ##size", TCL_STATIC);
      SWIG_fail;
    }
    for (unsigned int i=0; i<6; i++) {
      Tcl_Obj **o = NULL;
      if (Tcl_ListObjIndex(interp, objv[2], i, o) != TCL_OK) {
        /* ref count is not incremented */
        /* Error msg in interp result */
        SWIG_fail;
      }
      
      double val;
      if (Tcl_GetDoubleFromObj(interp, *o, &val ) != TCL_OK) {
        /* Error msg in interp result */
        SWIG_fail;
      }
      arg2[i] = val;
    }
  }
  {
    CPLErrorReset();
    result = (CPLErr)GDALDatasetShadow_SetGeoTransform(arg1,arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Dataset_BuildOverviews(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  char *arg2 = (char *) "NEAREST" ;
  int arg3 = (int) 0 ;
  int *arg4 = (int *) 0 ;
  GDALProgressFunc arg5 = (GDALProgressFunc) NULL ;
  void *arg6 = (void *) NULL ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int result;
  
  /* %typemap(arginit) ( const char* callback_data=NULL)  */
  TclProgressData *psProgressInfo;
  psProgressInfo = (TclProgressData *) CPLCalloc(1,sizeof(TclProgressData));
  psProgressInfo->nLastReported = -1;
  psProgressInfo->interp = interp;
  psProgressInfo->psTclCallback = NULL;
  psProgressInfo->psTclCallbackData = NULL;
  if (SWIG_GetArgs(interp, objc, objv,"o|oooo:osgeo::Dataset_BuildOverviews self ?resampling? ?overviewlist? ?pOverviews? ?callback? ?callback_data? ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dataset_BuildOverviews" "', argument " "1"" of type '" "GDALDatasetShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALDatasetShadow * >(argp1);
  if (objc > 2) {
    res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dataset_BuildOverviews" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
  }
  if (objc > 3) {
    {
      /* %typemap(in,numinputs=1) (int nList, int* pList)*/
      /* The following also checks if input is a list */
      if (Tcl_ListObjLength(interp, objv[3], &arg3) != TCL_OK) {
        /* Error msg in interp result */
        SWIG_fail;
      }
      if ( !arg3 ) {
        Tcl_SetResult(interp, (char*) "Input list mustn't be empty", TCL_STATIC);
        SWIG_fail;
      }
      
      arg4 = (int*) CPLMalloc(arg3*sizeof(int));
      
      for( int i = 0; i<arg3; i++ ) {
        Tcl_Obj **o = NULL;
        if (Tcl_ListObjIndex(interp, objv[3], i, o) != TCL_OK) {
          /* ref count is not incremented */
          /* Error msg in interp result */
          SWIG_fail;
        }
        
        int val;
        if (Tcl_GetIntFromObj(interp, *o, &val ) != TCL_OK) {
          /* Error msg in interp result */
          SWIG_fail;
        }
        arg4[i] = val;
      }
    }
  }
  if (objc > 4) {
    {
      /* %typemap(in) (GDALProgressFunc callback = NULL) */
      /* callback_func typemap */
      if (objv[4] && !strcmp(Tcl_GetString(objv[4]), "")) {
        void* cbfunction = NULL;
        SWIG_ConvertPtr( objv[4], 
          (void**)&cbfunction, 
          SWIGTYPE_p_f_double_p_q_const__char_p_void__int, 
          SWIG_POINTER_EXCEPTION | 0 );
        
        if ( cbfunction == GDALTermProgress ) {
          arg5 = GDALTermProgress;
        } else if ( cbfunction == GDALDummyProgress) {
          arg5 = GDALDummyProgress;
        } else if ( cbfunction == GDALScaledProgress) {
          arg5 = GDALScaledProgress;
        } else {
          psProgressInfo->psTclCallback = objv[4];
          Tcl_IncrRefCount(psProgressInfo->psTclCallback);
          arg5 = TclProgressProxy;
        }
      }
    }
  }
  if (objc > 5) {
    {
      /* %typemap(in) ( void* callback_data=NULL)  */
      psProgressInfo->psTclCallbackData = objv[5];
      Tcl_IncrRefCount(psProgressInfo->psTclCallbackData);
      arg6 = psProgressInfo;
      
    }
  }
  {
    CPLErrorReset();
    result = (int)GDALDatasetShadow_BuildOverviews(arg1,(char const *)arg2,arg3,arg4,arg5,arg6);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg4) {
      CPLFree((void*) arg4);
    }
  }
  {
    /* %typemap(freearg) ( void* callback_data=NULL)  */
    Tcl_DecrRefCount(psProgressInfo->psTclCallback);
    Tcl_DecrRefCount(psProgressInfo->psTclCallbackData);
    CPLFree(psProgressInfo);
  }
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg4) {
      CPLFree((void*) arg4);
    }
  }
  {
    /* %typemap(freearg) ( void* callback_data=NULL)  */
    Tcl_DecrRefCount(psProgressInfo->psTclCallback);
    Tcl_DecrRefCount(psProgressInfo->psTclCallbackData);
    CPLFree(psProgressInfo);
  }
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Dataset_GetGCPCount(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::Dataset_GetGCPCount self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dataset_GetGCPCount" "', argument " "1"" of type '" "GDALDatasetShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALDatasetShadow * >(argp1);
  {
    CPLErrorReset();
    result = (int)GDALDatasetShadow_GetGCPCount(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Dataset_GetGCPProjection(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::Dataset_GetGCPProjection self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dataset_GetGCPProjection" "', argument " "1"" of type '" "GDALDatasetShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALDatasetShadow * >(argp1);
  {
    CPLErrorReset();
    result = (char *)GDALDatasetShadow_GetGCPProjection(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Dataset_GetGCPs(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int *arg2 = (int *) 0 ;
  GDAL_GCP **arg3 = (GDAL_GCP **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int nGCPs2 = 0 ;
  GDAL_GCP *pGCPs2 = 0 ;
  
  {
    /* %typemap(in,numinputs=0) (int *nGCPs2, GDAL_GCP const **pGCPs2 ) */
    arg2 = &nGCPs2;
    arg3 = &pGCPs2;
  }
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::Dataset_GetGCPs self ?pGCPs? ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dataset_GetGCPs" "', argument " "1"" of type '" "GDALDatasetShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALDatasetShadow * >(argp1);
  {
    CPLErrorReset();
    GDALDatasetShadow_GetGCPs(arg1,arg2,(GDAL_GCP const **)arg3);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  {
    /* %typemap(argout) (int *nGCPs, GDAL_GCP const **pGCPs ) */
    Tcl_Obj *out = Tcl_NewListObj(0, NULL);
    for( int i = 0; i < *arg2; i++ ) {
      /* We dublicate every GCP (seperate object in memory) */
      GDAL_GCP *o = new_GDAL_GCP( (*arg3)[i].dfGCPX,
        (*arg3)[i].dfGCPY,
        (*arg3)[i].dfGCPZ,
        (*arg3)[i].dfGCPPixel,
        (*arg3)[i].dfGCPLine,
        (*arg3)[i].pszInfo,
        (*arg3)[i].pszId );
      if (Tcl_ListObjAppendElement(interp, out, SWIG_NewPointerObj((void*)o,SWIGTYPE_p_GDAL_GCP,1)) != TCL_OK) {
        delete_GDAL_GCP(o);
        /* Note: XXX I assume here that by freeing this list, the respective GDAL_GCP memory of each pointer is fred automatically */
        Tcl_DecrRefCount(out);
        /* Error msg in interp result */
        SWIG_fail;
      }
    }
    Tcl_SetObjResult(interp, out);
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Dataset_SetGCPs(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  GDAL_GCP *arg3 = (GDAL_GCP *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GDAL_GCP *tmpGCPList2 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  CPLErr result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:osgeo::Dataset_SetGCPs self nGCPs pGCPs ?pszGCPProjection? ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dataset_SetGCPs" "', argument " "1"" of type '" "GDALDatasetShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALDatasetShadow * >(argp1);
  {
    /* %typemap(in,numinputs=1) (int nGCPs, GDAL_GCP const *pGCPs ) */
    /* The following also checks if input is a list */
    if (Tcl_ListObjLength(interp, objv[2], &arg2) != TCL_OK) {
      /* Error msg in interp result */
      SWIG_fail;
    }
    if ( !arg2 ) {
      Tcl_SetResult(interp, (char*) "Input list mustn't be empty", TCL_STATIC);
      SWIG_fail;
    }
    
    tmpGCPList2 = (GDAL_GCP*) CPLMalloc(arg2*sizeof(GDAL_GCP));
    arg3 = tmpGCPList2;
    for( int i = 0; i<arg2; i++ ) {
      Tcl_Obj **o = NULL;
      /* The reference count for the list element is not incremented with the following */
      if (Tcl_ListObjIndex(interp, objv[2], i, o) != TCL_OK) {
        /* Error msg in interp result */
        SWIG_fail;
      }
      
      GDAL_GCP *item = 0;
      SWIG_ConvertPtr( *o, (void**)&item, SWIGTYPE_p_GDAL_GCP, SWIG_POINTER_EXCEPTION | 0 );
      if ( ! item ) {
        SWIG_fail;
      }
      
      memcpy( (void*) tmpGCPList2, (void*) item, sizeof( GDAL_GCP ) );
      ++tmpGCPList2;
    }
  }
  res4 = SWIG_AsCharPtrAndSize(objv[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Dataset_SetGCPs" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  {
    CPLErrorReset();
    result = (CPLErr)GDALDatasetShadow_SetGCPs(arg1,arg2,(GDAL_GCP const *)arg3,(char const *)arg4);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  {
    /* %typemap(freearg) (int nGCPs, GDAL_GCP const *pGCPs ) */
    if (arg3) {
      CPLFree( (void*) arg3 );
    }
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return TCL_OK;
fail:
  {
    /* %typemap(freearg) (int nGCPs, GDAL_GCP const *pGCPs ) */
    if (arg3) {
      CPLFree( (void*) arg3 );
    }
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Dataset_FlushCache(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::Dataset_FlushCache self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dataset_FlushCache" "', argument " "1"" of type '" "GDALDatasetShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALDatasetShadow * >(argp1);
  {
    CPLErrorReset();
    GDALDatasetShadow_FlushCache(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Dataset_AddBand(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  GDALDataType arg2 = (GDALDataType) GDT_Byte ;
  char **arg3 = (char **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  CPLErr result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o|oo:osgeo::Dataset_AddBand self ?datatype? ?options? ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dataset_AddBand" "', argument " "1"" of type '" "GDALDatasetShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALDatasetShadow * >(argp1);
  if (objc > 2) {
    ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Dataset_AddBand" "', argument " "2"" of type '" "GDALDataType""'");
    } 
    arg2 = static_cast< GDALDataType >(val2);
  }
  if (objc > 3) {
    {
      /* %typemap(in) char **options */
      int size;
      if (Tcl_ListObjLength(interp, objv[3], &size) != TCL_OK) {
        /* Error msg in interp result */
        SWIG_fail;
      }
      if ( !size ) {
        Tcl_SetResult(interp, (char*) "Input list mustn't be empty", TCL_STATIC);
        SWIG_fail;
      }
      
      for (int i = 0; i < size; i++) {
        Tcl_Obj **o = NULL;
        /* The reference count for the list element is not incremented with the following */
        if (Tcl_ListObjIndex(interp, objv[3], i, o) != TCL_OK) {
          /* Error msg in interp result */
          SWIG_fail;
        }
        char *pszItem = Tcl_GetString(*o);
        arg3 = CSLAddString( arg3, pszItem );
      }
    }
  }
  {
    CPLErrorReset();
    result = (CPLErr)GDALDatasetShadow_AddBand(arg1,arg2,arg3);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg3 );
  }
  return TCL_OK;
fail:
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg3 );
  }
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Dataset_CreateMaskBand(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  CPLErr result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::Dataset_CreateMaskBand self nFlags ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dataset_CreateMaskBand" "', argument " "1"" of type '" "GDALDatasetShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALDatasetShadow * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Dataset_CreateMaskBand" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    CPLErrorReset();
    result = (CPLErr)GDALDatasetShadow_CreateMaskBand(arg1,arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Dataset_GetFileList(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char **result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::Dataset_GetFileList self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dataset_GetFileList" "', argument " "1"" of type '" "GDALDatasetShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALDatasetShadow * >(argp1);
  {
    CPLErrorReset();
    result = (char **)GDALDatasetShadow_GetFileList(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  {
    /* %typemap(out) char **options -> ( string ) */
    char **stringarray = result;
    if ( stringarray == NULL ) {
      Tcl_ResetResult(interp); /* NONE = Empty string */
    } else {
      int len = CSLCount( stringarray );
      Tcl_Obj *out = Tcl_NewListObj(0, NULL);
      for ( int i = 0; i < len; ++i ) {
        Tcl_Obj *o = Tcl_NewStringObj( stringarray[i], -1 );
        if (Tcl_ListObjAppendElement(interp, out, o) != TCL_OK) {
          Tcl_DecrRefCount(o);
          Tcl_DecrRefCount(out);
          /* Error msg in interp result */
          SWIG_fail;
        }
      }
      Tcl_SetObjResult(interp, out);
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Dataset_WriteRaster(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  char *arg7 = (char *) 0 ;
  int *arg8 = (int *) 0 ;
  int *arg9 = (int *) 0 ;
  GDALDataType *arg10 = (GDALDataType *) 0 ;
  int arg11 = (int) 0 ;
  int *arg12 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int temp8 ;
  int res8 = 0 ;
  int temp9 ;
  int res9 = 0 ;
  GDALDataType temp10 ;
  int res10 = 0 ;
  CPLErr result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooooo|oooo:osgeo::Dataset_WriteRaster self xoff yoff xsize ysize buf_len ?buf_string? ?buf_xsize? ?buf_ysize? ?buf_type? ?band_list? ?pband_list? ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dataset_WriteRaster" "', argument " "1"" of type '" "GDALDatasetShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALDatasetShadow * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Dataset_WriteRaster" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Dataset_WriteRaster" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Dataset_WriteRaster" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Dataset_WriteRaster" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    /* %typemap(in,numinputs=1) (int nLen, char *pBuf ) */
    /* Storage is handled by the respective Tcl_Obj. It should considered read-only. */
    arg7 = Tcl_GetStringFromObj(objv[6], &arg6);
  }
  if (objc > 7) {
    if (!(SWIG_IsOK((res8 = SWIG_ConvertPtr(objv[7],SWIG_as_voidptrptr(&arg8),SWIGTYPE_p_int,0))))) {
      int val; 
      int ecode = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[7], &val);
      if (!SWIG_IsOK(ecode)) {
        SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Dataset_WriteRaster" "', argument " "8"" of type '" "int""'");
      }
      temp8 = static_cast< int >(val);
      arg8 = &temp8;
      res8 = SWIG_AddTmpMask(ecode);
    }
  }
  if (objc > 8) {
    if (!(SWIG_IsOK((res9 = SWIG_ConvertPtr(objv[8],SWIG_as_voidptrptr(&arg9),SWIGTYPE_p_int,0))))) {
      int val; 
      int ecode = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[8], &val);
      if (!SWIG_IsOK(ecode)) {
        SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Dataset_WriteRaster" "', argument " "9"" of type '" "int""'");
      }
      temp9 = static_cast< int >(val);
      arg9 = &temp9;
      res9 = SWIG_AddTmpMask(ecode);
    }
  }
  if (objc > 9) {
    if (!(SWIG_IsOK((res10 = SWIG_ConvertPtr(objv[9],SWIG_as_voidptrptr(&arg10),SWIGTYPE_p_int,0))))) {
      int val; 
      int ecode = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[9], &val);
      if (!SWIG_IsOK(ecode)) {
        SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Dataset_WriteRaster" "', argument " "10"" of type '" "GDALDataType""'");
      }
      temp10 = static_cast< GDALDataType >(val);
      arg10 = &temp10;
      res10 = SWIG_AddTmpMask(ecode);
    }
  }
  if (objc > 10) {
    {
      /* %typemap(in,numinputs=1) (int nList, int* pList)*/
      /* The following also checks if input is a list */
      if (Tcl_ListObjLength(interp, objv[10], &arg11) != TCL_OK) {
        /* Error msg in interp result */
        SWIG_fail;
      }
      if ( !arg11 ) {
        Tcl_SetResult(interp, (char*) "Input list mustn't be empty", TCL_STATIC);
        SWIG_fail;
      }
      
      arg12 = (int*) CPLMalloc(arg11*sizeof(int));
      
      for( int i = 0; i<arg11; i++ ) {
        Tcl_Obj **o = NULL;
        if (Tcl_ListObjIndex(interp, objv[10], i, o) != TCL_OK) {
          /* ref count is not incremented */
          /* Error msg in interp result */
          SWIG_fail;
        }
        
        int val;
        if (Tcl_GetIntFromObj(interp, *o, &val ) != TCL_OK) {
          /* Error msg in interp result */
          SWIG_fail;
        }
        arg12[i] = val;
      }
    }
  }
  {
    CPLErrorReset();
    result = (CPLErr)GDALDatasetShadow_WriteRaster(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  if (SWIG_IsNewObj(res8)) delete arg8;
  if (SWIG_IsNewObj(res9)) delete arg9;
  if (SWIG_IsNewObj(res10)) delete arg10;
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg12) {
      CPLFree((void*) arg12);
    }
  }
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res8)) delete arg8;
  if (SWIG_IsNewObj(res9)) delete arg9;
  if (SWIG_IsNewObj(res10)) delete arg10;
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg12) {
      CPLFree((void*) arg12);
    }
  }
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Dataset_ReadRaster(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int *arg6 = (int *) 0 ;
  char **arg7 = (char **) 0 ;
  int *arg8 = (int *) 0 ;
  int *arg9 = (int *) 0 ;
  GDALDataType *arg10 = (GDALDataType *) 0 ;
  int arg11 = (int) 0 ;
  int *arg12 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int nLen6 = 0 ;
  char *pBuf6 = 0 ;
  int temp8 ;
  int res8 = 0 ;
  int temp9 ;
  int res9 = 0 ;
  GDALDataType temp10 ;
  int res10 = 0 ;
  CPLErr result;
  
  {
    /* %typemap(in,numinputs=0) (int *nLen6, char **pBuf6 ) */
    arg6 = &nLen6;
    arg7 = &pBuf6;
  }
  if (SWIG_GetArgs(interp, objc, objv,"ooooo|oooo:osgeo::Dataset_ReadRaster self xoff yoff xsize ysize ?buf? ?buf_xsize? ?buf_ysize? ?buf_type? ?band_list? ?pband_list? ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dataset_ReadRaster" "', argument " "1"" of type '" "GDALDatasetShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALDatasetShadow * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Dataset_ReadRaster" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Dataset_ReadRaster" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Dataset_ReadRaster" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Dataset_ReadRaster" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  if (objc > 6) {
    if (!(SWIG_IsOK((res8 = SWIG_ConvertPtr(objv[6],SWIG_as_voidptrptr(&arg8),SWIGTYPE_p_int,0))))) {
      int val; 
      int ecode = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[6], &val);
      if (!SWIG_IsOK(ecode)) {
        SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Dataset_ReadRaster" "', argument " "8"" of type '" "int""'");
      }
      temp8 = static_cast< int >(val);
      arg8 = &temp8;
      res8 = SWIG_AddTmpMask(ecode);
    }
  }
  if (objc > 7) {
    if (!(SWIG_IsOK((res9 = SWIG_ConvertPtr(objv[7],SWIG_as_voidptrptr(&arg9),SWIGTYPE_p_int,0))))) {
      int val; 
      int ecode = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[7], &val);
      if (!SWIG_IsOK(ecode)) {
        SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Dataset_ReadRaster" "', argument " "9"" of type '" "int""'");
      }
      temp9 = static_cast< int >(val);
      arg9 = &temp9;
      res9 = SWIG_AddTmpMask(ecode);
    }
  }
  if (objc > 8) {
    if (!(SWIG_IsOK((res10 = SWIG_ConvertPtr(objv[8],SWIG_as_voidptrptr(&arg10),SWIGTYPE_p_int,0))))) {
      int val; 
      int ecode = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[8], &val);
      if (!SWIG_IsOK(ecode)) {
        SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Dataset_ReadRaster" "', argument " "10"" of type '" "GDALDataType""'");
      }
      temp10 = static_cast< GDALDataType >(val);
      arg10 = &temp10;
      res10 = SWIG_AddTmpMask(ecode);
    }
  }
  if (objc > 9) {
    {
      /* %typemap(in,numinputs=1) (int nList, int* pList)*/
      /* The following also checks if input is a list */
      if (Tcl_ListObjLength(interp, objv[9], &arg11) != TCL_OK) {
        /* Error msg in interp result */
        SWIG_fail;
      }
      if ( !arg11 ) {
        Tcl_SetResult(interp, (char*) "Input list mustn't be empty", TCL_STATIC);
        SWIG_fail;
      }
      
      arg12 = (int*) CPLMalloc(arg11*sizeof(int));
      
      for( int i = 0; i<arg11; i++ ) {
        Tcl_Obj **o = NULL;
        if (Tcl_ListObjIndex(interp, objv[9], i, o) != TCL_OK) {
          /* ref count is not incremented */
          /* Error msg in interp result */
          SWIG_fail;
        }
        
        int val;
        if (Tcl_GetIntFromObj(interp, *o, &val ) != TCL_OK) {
          /* Error msg in interp result */
          SWIG_fail;
        }
        arg12[i] = val;
      }
    }
  }
  {
    CPLErrorReset();
    result = (CPLErr)GDALDatasetShadow_ReadRaster(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  {
    /* %typemap(argout) (int *nLen, char **pBuf ) */
    Tcl_SetObjResult(interp, Tcl_NewByteArrayObj( (unsigned char*) *arg7, *arg6 ));
  }
  if (SWIG_IsNewObj(res8)) delete arg8;
  if (SWIG_IsNewObj(res9)) delete arg9;
  if (SWIG_IsNewObj(res10)) delete arg10;
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg12) {
      CPLFree((void*) arg12);
    }
  }
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res8)) delete arg8;
  if (SWIG_IsNewObj(res9)) delete arg9;
  if (SWIG_IsNewObj(res10)) delete arg10;
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg12) {
      CPLFree((void*) arg12);
    }
  }
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_Dataset(void *obj) {
GDALDatasetShadow *arg1 = (GDALDatasetShadow *) obj;
delete_GDALDatasetShadow(arg1);
}
static swig_method swig_GDALDatasetShadow_methods[] = {
    {"GetDriver", _wrap_Dataset_GetDriver}, 
    {"GetRasterBand", _wrap_Dataset_GetRasterBand}, 
    {"GetProjection", _wrap_Dataset_GetProjection}, 
    {"GetProjectionRef", _wrap_Dataset_GetProjectionRef}, 
    {"SetProjection", _wrap_Dataset_SetProjection}, 
    {"GetGeoTransform", _wrap_Dataset_GetGeoTransform}, 
    {"SetGeoTransform", _wrap_Dataset_SetGeoTransform}, 
    {"BuildOverviews", _wrap_Dataset_BuildOverviews}, 
    {"GetGCPCount", _wrap_Dataset_GetGCPCount}, 
    {"GetGCPProjection", _wrap_Dataset_GetGCPProjection}, 
    {"GetGCPs", _wrap_Dataset_GetGCPs}, 
    {"SetGCPs", _wrap_Dataset_SetGCPs}, 
    {"FlushCache", _wrap_Dataset_FlushCache}, 
    {"AddBand", _wrap_Dataset_AddBand}, 
    {"CreateMaskBand", _wrap_Dataset_CreateMaskBand}, 
    {"GetFileList", _wrap_Dataset_GetFileList}, 
    {"WriteRaster", _wrap_Dataset_WriteRaster}, 
    {"ReadRaster", _wrap_Dataset_ReadRaster}, 
    {0,0}
};
static swig_attribute swig_GDALDatasetShadow_attributes[] = {
    { "-RasterXSize",_wrap_Dataset_RasterXSize_get, 0 },
    { "-RasterYSize",_wrap_Dataset_RasterYSize_get, 0 },
    { "-RasterCount",_wrap_Dataset_RasterCount_get, 0 },
    {0,0,0}
};
static swig_class *swig_GDALDatasetShadow_bases[] = {0,0};
static const char * swig_GDALDatasetShadow_base_names[] = {"GDALMajorObjectShadow *",0};
static swig_class _wrap_class_GDALDatasetShadow = { "Dataset", &SWIGTYPE_p_GDALDatasetShadow,0, swig_delete_Dataset, swig_GDALDatasetShadow_methods, swig_GDALDatasetShadow_attributes, swig_GDALDatasetShadow_bases,swig_GDALDatasetShadow_base_names, &swig_module };
SWIGINTERN int
_wrap_Band_XSize_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::Band_XSize_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_XSize_get" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
  {
    CPLErrorReset();
    result = (int)GDALRasterBandShadow_XSize_get(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Band_YSize_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::Band_YSize_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_YSize_get" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
  {
    CPLErrorReset();
    result = (int)GDALRasterBandShadow_YSize_get(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Band_DataType_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GDALDataType result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::Band_DataType_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_DataType_get" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
  {
    CPLErrorReset();
    result = (GDALDataType)GDALRasterBandShadow_DataType_get(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Band_GetBlockSize(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int res2 = SWIG_TMPOBJ ;
  int temp3 ;
  int res3 = SWIG_TMPOBJ ;
  
  arg2 = &temp2;
  arg3 = &temp3;
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::Band_GetBlockSize self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_GetBlockSize" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
  {
    CPLErrorReset();
    GDALRasterBandShadow_GetBlockSize(arg1,arg2,arg3);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  if (SWIG_IsTmpObj(res2)) {
    Tcl_ListObjAppendElement(interp,Tcl_GetObjResult(interp),SWIG_From_int((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    Tcl_ListObjAppendElement(interp,Tcl_GetObjResult(interp),SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res3)) {
    Tcl_ListObjAppendElement(interp,Tcl_GetObjResult(interp),SWIG_From_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    Tcl_ListObjAppendElement(interp,Tcl_GetObjResult(interp),SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, new_flags));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Band_GetRasterColorInterpretation(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GDALColorInterp result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::Band_GetRasterColorInterpretation self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_GetRasterColorInterpretation" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
  {
    CPLErrorReset();
    result = (GDALColorInterp)GDALRasterBandShadow_GetRasterColorInterpretation(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Band_SetRasterColorInterpretation(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALColorInterp arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  CPLErr result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::Band_SetRasterColorInterpretation self val ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_SetRasterColorInterpretation" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Band_SetRasterColorInterpretation" "', argument " "2"" of type '" "GDALColorInterp""'");
  } 
  arg2 = static_cast< GDALColorInterp >(val2);
  {
    CPLErrorReset();
    result = (CPLErr)GDALRasterBandShadow_SetRasterColorInterpretation(arg1,arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Band_GetNoDataValue(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double *arg2 = (double *) 0 ;
  int *arg3 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double tmpval2 ;
  int tmphasval2 ;
  
  {
    /* %typemap(tcl,in,numinputs=0) (double *val, int*hasval) */
    arg2 = &tmpval2;
    arg3 = &tmphasval2;
  }
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::Band_GetNoDataValue self ?hasval? ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_GetNoDataValue" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
  {
    CPLErrorReset();
    GDALRasterBandShadow_GetNoDataValue(arg1,arg2,arg3);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  {
    /* %typemap(tcl,argout) (double *val, int*hasval) */
    Tcl_Obj *r;
    if ( !*arg3 ) {
      r = Tcl_NewObj(); /* NONE */
    } else {
      r = Tcl_NewDoubleObj( *arg2 );
    }
    Tcl_ListObjAppendElement(interp,Tcl_GetObjResult(interp),r);
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Band_SetNoDataValue(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  CPLErr result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::Band_SetNoDataValue self d ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_SetNoDataValue" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Band_SetNoDataValue" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    CPLErrorReset();
    result = (CPLErr)GDALRasterBandShadow_SetNoDataValue(arg1,arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Band_GetRasterCategoryNames(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char **result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::Band_GetRasterCategoryNames self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_GetRasterCategoryNames" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
  {
    CPLErrorReset();
    result = (char **)GDALRasterBandShadow_GetRasterCategoryNames(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  {
    /* %typemap(out) char **options -> ( string ) */
    char **stringarray = result;
    if ( stringarray == NULL ) {
      Tcl_ResetResult(interp); /* NONE = Empty string */
    } else {
      int len = CSLCount( stringarray );
      Tcl_Obj *out = Tcl_NewListObj(0, NULL);
      for ( int i = 0; i < len; ++i ) {
        Tcl_Obj *o = Tcl_NewStringObj( stringarray[i], -1 );
        if (Tcl_ListObjAppendElement(interp, out, o) != TCL_OK) {
          Tcl_DecrRefCount(o);
          Tcl_DecrRefCount(out);
          /* Error msg in interp result */
          SWIG_fail;
        }
      }
      Tcl_SetObjResult(interp, out);
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Band_SetRasterCategoryNames(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  char **arg2 = (char **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CPLErr result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::Band_SetRasterCategoryNames self names ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_SetRasterCategoryNames" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
  {
    /* %typemap(in) char **options */
    int size;
    if (Tcl_ListObjLength(interp, objv[2], &size) != TCL_OK) {
      /* Error msg in interp result */
      SWIG_fail;
    }
    if ( !size ) {
      Tcl_SetResult(interp, (char*) "Input list mustn't be empty", TCL_STATIC);
      SWIG_fail;
    }
    
    for (int i = 0; i < size; i++) {
      Tcl_Obj **o = NULL;
      /* The reference count for the list element is not incremented with the following */
      if (Tcl_ListObjIndex(interp, objv[2], i, o) != TCL_OK) {
        /* Error msg in interp result */
        SWIG_fail;
      }
      char *pszItem = Tcl_GetString(*o);
      arg2 = CSLAddString( arg2, pszItem );
    }
  }
  {
    CPLErrorReset();
    result = (CPLErr)GDALRasterBandShadow_SetRasterCategoryNames(arg1,arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg2 );
  }
  return TCL_OK;
fail:
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg2 );
  }
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Band_GetMinimum(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double *arg2 = (double *) 0 ;
  int *arg3 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double tmpval2 ;
  int tmphasval2 ;
  
  {
    /* %typemap(tcl,in,numinputs=0) (double *val, int*hasval) */
    arg2 = &tmpval2;
    arg3 = &tmphasval2;
  }
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::Band_GetMinimum self ?hasval? ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_GetMinimum" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
  {
    CPLErrorReset();
    GDALRasterBandShadow_GetMinimum(arg1,arg2,arg3);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  {
    /* %typemap(tcl,argout) (double *val, int*hasval) */
    Tcl_Obj *r;
    if ( !*arg3 ) {
      r = Tcl_NewObj(); /* NONE */
    } else {
      r = Tcl_NewDoubleObj( *arg2 );
    }
    Tcl_ListObjAppendElement(interp,Tcl_GetObjResult(interp),r);
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Band_GetMaximum(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double *arg2 = (double *) 0 ;
  int *arg3 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double tmpval2 ;
  int tmphasval2 ;
  
  {
    /* %typemap(tcl,in,numinputs=0) (double *val, int*hasval) */
    arg2 = &tmpval2;
    arg3 = &tmphasval2;
  }
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::Band_GetMaximum self ?hasval? ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_GetMaximum" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
  {
    CPLErrorReset();
    GDALRasterBandShadow_GetMaximum(arg1,arg2,arg3);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  {
    /* %typemap(tcl,argout) (double *val, int*hasval) */
    Tcl_Obj *r;
    if ( !*arg3 ) {
      r = Tcl_NewObj(); /* NONE */
    } else {
      r = Tcl_NewDoubleObj( *arg2 );
    }
    Tcl_ListObjAppendElement(interp,Tcl_GetObjResult(interp),r);
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Band_GetOffset(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double *arg2 = (double *) 0 ;
  int *arg3 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double tmpval2 ;
  int tmphasval2 ;
  
  {
    /* %typemap(tcl,in,numinputs=0) (double *val, int*hasval) */
    arg2 = &tmpval2;
    arg3 = &tmphasval2;
  }
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::Band_GetOffset self ?hasval? ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_GetOffset" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
  {
    CPLErrorReset();
    GDALRasterBandShadow_GetOffset(arg1,arg2,arg3);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  {
    /* %typemap(tcl,argout) (double *val, int*hasval) */
    Tcl_Obj *r;
    if ( !*arg3 ) {
      r = Tcl_NewObj(); /* NONE */
    } else {
      r = Tcl_NewDoubleObj( *arg2 );
    }
    Tcl_ListObjAppendElement(interp,Tcl_GetObjResult(interp),r);
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Band_GetScale(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double *arg2 = (double *) 0 ;
  int *arg3 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double tmpval2 ;
  int tmphasval2 ;
  
  {
    /* %typemap(tcl,in,numinputs=0) (double *val, int*hasval) */
    arg2 = &tmpval2;
    arg3 = &tmphasval2;
  }
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::Band_GetScale self ?hasval? ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_GetScale" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
  {
    CPLErrorReset();
    GDALRasterBandShadow_GetScale(arg1,arg2,arg3);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  {
    /* %typemap(tcl,argout) (double *val, int*hasval) */
    Tcl_Obj *r;
    if ( !*arg3 ) {
      r = Tcl_NewObj(); /* NONE */
    } else {
      r = Tcl_NewDoubleObj( *arg2 );
    }
    Tcl_ListObjAppendElement(interp,Tcl_GetObjResult(interp),r);
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Band_GetStatistics(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double temp4 ;
  int res4 = SWIG_TMPOBJ ;
  double temp5 ;
  int res5 = SWIG_TMPOBJ ;
  double temp6 ;
  int res6 = SWIG_TMPOBJ ;
  double temp7 ;
  int res7 = SWIG_TMPOBJ ;
  CPLErr result;
  
  arg4 = &temp4;
  arg5 = &temp5;
  arg6 = &temp6;
  arg7 = &temp7;
  if (SWIG_GetArgs(interp, objc, objv,"ooo:osgeo::Band_GetStatistics self approx_ok force ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_GetStatistics" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Band_GetStatistics" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Band_GetStatistics" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    CPLErrorReset();
    result = (CPLErr)GDALRasterBandShadow_GetStatistics(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  {
    /* %typemap(out) IF_ERROR_RETURN_NONE */
    /* (do not return the error code) */
  }
  if (SWIG_IsTmpObj(res4)) {
    Tcl_ListObjAppendElement(interp,Tcl_GetObjResult(interp),SWIG_From_double((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    Tcl_ListObjAppendElement(interp,Tcl_GetObjResult(interp),SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res5)) {
    Tcl_ListObjAppendElement(interp,Tcl_GetObjResult(interp),SWIG_From_double((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    Tcl_ListObjAppendElement(interp,Tcl_GetObjResult(interp),SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res6)) {
    Tcl_ListObjAppendElement(interp,Tcl_GetObjResult(interp),SWIG_From_double((*arg6)));
  } else {
    int new_flags = SWIG_IsNewObj(res6) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    Tcl_ListObjAppendElement(interp,Tcl_GetObjResult(interp),SWIG_NewPointerObj((void*)(arg6), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res7)) {
    Tcl_ListObjAppendElement(interp,Tcl_GetObjResult(interp),SWIG_From_double((*arg7)));
  } else {
    int new_flags = SWIG_IsNewObj(res7) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    Tcl_ListObjAppendElement(interp,Tcl_GetObjResult(interp),SWIG_NewPointerObj((void*)(arg7), SWIGTYPE_p_double, new_flags));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Band_SetStatistics(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  CPLErr result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooo:osgeo::Band_SetStatistics self min max mean stddev ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_SetStatistics" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Band_SetStatistics" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Band_SetStatistics" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Band_SetStatistics" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Band_SetStatistics" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    CPLErrorReset();
    result = (CPLErr)GDALRasterBandShadow_SetStatistics(arg1,arg2,arg3,arg4,arg5);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Band_GetOverviewCount(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::Band_GetOverviewCount self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_GetOverviewCount" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
  {
    CPLErrorReset();
    result = (int)GDALRasterBandShadow_GetOverviewCount(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Band_GetOverview(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  GDALRasterBandShadow *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::Band_GetOverview self i ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_GetOverview" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Band_GetOverview" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    CPLErrorReset();
    result = (GDALRasterBandShadow *)GDALRasterBandShadow_GetOverview(arg1,arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_GDALRasterBandShadow,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Band_Checksum(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 = (int) 0 ;
  int arg3 = (int) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int temp4 ;
  int res4 = 0 ;
  int temp5 ;
  int res5 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o|oooo:osgeo::Band_Checksum self ?xoff? ?yoff? ?xsize? ?ysize? ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_Checksum" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
  if (objc > 2) {
    ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Band_Checksum" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  if (objc > 3) {
    ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Band_Checksum" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  if (objc > 4) {
    if (!(SWIG_IsOK((res4 = SWIG_ConvertPtr(objv[4],SWIG_as_voidptrptr(&arg4),SWIGTYPE_p_int,0))))) {
      int val; 
      int ecode = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val);
      if (!SWIG_IsOK(ecode)) {
        SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Band_Checksum" "', argument " "4"" of type '" "int""'");
      }
      temp4 = static_cast< int >(val);
      arg4 = &temp4;
      res4 = SWIG_AddTmpMask(ecode);
    }
  }
  if (objc > 5) {
    if (!(SWIG_IsOK((res5 = SWIG_ConvertPtr(objv[5],SWIG_as_voidptrptr(&arg5),SWIGTYPE_p_int,0))))) {
      int val; 
      int ecode = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[5], &val);
      if (!SWIG_IsOK(ecode)) {
        SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Band_Checksum" "', argument " "5"" of type '" "int""'");
      }
      temp5 = static_cast< int >(val);
      arg5 = &temp5;
      res5 = SWIG_AddTmpMask(ecode);
    }
  }
  {
    CPLErrorReset();
    result = (int)GDALRasterBandShadow_Checksum(arg1,arg2,arg3,arg4,arg5);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Band_ComputeRasterMinMax(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double *arg2 ;
  int arg3 = (int) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double argout2[2] ;
  int val3 ;
  int ecode3 = 0 ;
  
  {
    /* %typemap(in,numinputs=0) (double argout2[ANY]) */
    arg2 = argout2;
  }
  if (SWIG_GetArgs(interp, objc, objv,"o|o:osgeo::Band_ComputeRasterMinMax self ?approx_ok? ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_ComputeRasterMinMax" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
  if (objc > 2) {
    ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Band_ComputeRasterMinMax" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  {
    CPLErrorReset();
    GDALRasterBandShadow_ComputeRasterMinMax(arg1,arg2,arg3);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  {
    /* %typemap(argout) (double argout[ANY]) */
    Tcl_Obj *out = CreateListFromDoubleArray( interp, arg2, 2 );
    if (out == NULL) SWIG_fail;
    Tcl_ListObjAppendElement(interp,Tcl_GetObjResult(interp),out);
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Band_ComputeBandStats(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double *arg2 ;
  int arg3 = (int) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double argout2[2] ;
  int val3 ;
  int ecode3 = 0 ;
  
  {
    /* %typemap(in,numinputs=0) (double argout2[ANY]) */
    arg2 = argout2;
  }
  if (SWIG_GetArgs(interp, objc, objv,"o|o:osgeo::Band_ComputeBandStats self ?samplestep? ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_ComputeBandStats" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
  if (objc > 2) {
    ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Band_ComputeBandStats" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  {
    CPLErrorReset();
    GDALRasterBandShadow_ComputeBandStats(arg1,arg2,arg3);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  {
    /* %typemap(argout) (double argout[ANY]) */
    Tcl_Obj *out = CreateListFromDoubleArray( interp, arg2, 2 );
    if (out == NULL) SWIG_fail;
    Tcl_ListObjAppendElement(interp,Tcl_GetObjResult(interp),out);
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Band_Fill(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double arg2 ;
  double arg3 = (double) 0.0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  CPLErr result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo|o:osgeo::Band_Fill self real_fill ?imag_fill? ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_Fill" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Band_Fill" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (objc > 3) {
    ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Band_Fill" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
  }
  {
    CPLErrorReset();
    result = (CPLErr)GDALRasterBandShadow_Fill(arg1,arg2,arg3);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Band_ReadRaster(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int *arg6 = (int *) 0 ;
  char **arg7 = (char **) 0 ;
  int *arg8 = (int *) 0 ;
  int *arg9 = (int *) 0 ;
  int *arg10 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int nLen6 = 0 ;
  char *pBuf6 = 0 ;
  int temp8 ;
  int res8 = 0 ;
  int temp9 ;
  int res9 = 0 ;
  int temp10 ;
  int res10 = 0 ;
  CPLErr result;
  
  {
    /* %typemap(in,numinputs=0) (int *nLen6, char **pBuf6 ) */
    arg6 = &nLen6;
    arg7 = &pBuf6;
  }
  if (SWIG_GetArgs(interp, objc, objv,"ooooo|ooo:osgeo::Band_ReadRaster self xoff yoff xsize ysize ?buf? ?buf_xsize? ?buf_ysize? ?buf_type? ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_ReadRaster" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Band_ReadRaster" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Band_ReadRaster" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Band_ReadRaster" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Band_ReadRaster" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  if (objc > 6) {
    if (!(SWIG_IsOK((res8 = SWIG_ConvertPtr(objv[6],SWIG_as_voidptrptr(&arg8),SWIGTYPE_p_int,0))))) {
      int val; 
      int ecode = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[6], &val);
      if (!SWIG_IsOK(ecode)) {
        SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Band_ReadRaster" "', argument " "8"" of type '" "int""'");
      }
      temp8 = static_cast< int >(val);
      arg8 = &temp8;
      res8 = SWIG_AddTmpMask(ecode);
    }
  }
  if (objc > 7) {
    if (!(SWIG_IsOK((res9 = SWIG_ConvertPtr(objv[7],SWIG_as_voidptrptr(&arg9),SWIGTYPE_p_int,0))))) {
      int val; 
      int ecode = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[7], &val);
      if (!SWIG_IsOK(ecode)) {
        SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Band_ReadRaster" "', argument " "9"" of type '" "int""'");
      }
      temp9 = static_cast< int >(val);
      arg9 = &temp9;
      res9 = SWIG_AddTmpMask(ecode);
    }
  }
  if (objc > 8) {
    if (!(SWIG_IsOK((res10 = SWIG_ConvertPtr(objv[8],SWIG_as_voidptrptr(&arg10),SWIGTYPE_p_int,0))))) {
      int val; 
      int ecode = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[8], &val);
      if (!SWIG_IsOK(ecode)) {
        SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Band_ReadRaster" "', argument " "10"" of type '" "int""'");
      }
      temp10 = static_cast< int >(val);
      arg10 = &temp10;
      res10 = SWIG_AddTmpMask(ecode);
    }
  }
  {
    CPLErrorReset();
    result = (CPLErr)GDALRasterBandShadow_ReadRaster(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  {
    /* %typemap(argout) (int *nLen, char **pBuf ) */
    Tcl_SetObjResult(interp, Tcl_NewByteArrayObj( (unsigned char*) *arg7, *arg6 ));
  }
  if (SWIG_IsNewObj(res8)) delete arg8;
  if (SWIG_IsNewObj(res9)) delete arg9;
  if (SWIG_IsNewObj(res10)) delete arg10;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res8)) delete arg8;
  if (SWIG_IsNewObj(res9)) delete arg9;
  if (SWIG_IsNewObj(res10)) delete arg10;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Band_WriteRaster(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  char *arg7 = (char *) 0 ;
  int *arg8 = (int *) 0 ;
  int *arg9 = (int *) 0 ;
  int *arg10 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int temp8 ;
  int res8 = 0 ;
  int temp9 ;
  int res9 = 0 ;
  int temp10 ;
  int res10 = 0 ;
  CPLErr result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooooo|ooo:osgeo::Band_WriteRaster self xoff yoff xsize ysize buf_len ?buf_string? ?buf_xsize? ?buf_ysize? ?buf_type? ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_WriteRaster" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Band_WriteRaster" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Band_WriteRaster" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Band_WriteRaster" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Band_WriteRaster" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    /* %typemap(in,numinputs=1) (int nLen, char *pBuf ) */
    /* Storage is handled by the respective Tcl_Obj. It should considered read-only. */
    arg7 = Tcl_GetStringFromObj(objv[6], &arg6);
  }
  if (objc > 7) {
    if (!(SWIG_IsOK((res8 = SWIG_ConvertPtr(objv[7],SWIG_as_voidptrptr(&arg8),SWIGTYPE_p_int,0))))) {
      int val; 
      int ecode = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[7], &val);
      if (!SWIG_IsOK(ecode)) {
        SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Band_WriteRaster" "', argument " "8"" of type '" "int""'");
      }
      temp8 = static_cast< int >(val);
      arg8 = &temp8;
      res8 = SWIG_AddTmpMask(ecode);
    }
  }
  if (objc > 8) {
    if (!(SWIG_IsOK((res9 = SWIG_ConvertPtr(objv[8],SWIG_as_voidptrptr(&arg9),SWIGTYPE_p_int,0))))) {
      int val; 
      int ecode = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[8], &val);
      if (!SWIG_IsOK(ecode)) {
        SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Band_WriteRaster" "', argument " "9"" of type '" "int""'");
      }
      temp9 = static_cast< int >(val);
      arg9 = &temp9;
      res9 = SWIG_AddTmpMask(ecode);
    }
  }
  if (objc > 9) {
    if (!(SWIG_IsOK((res10 = SWIG_ConvertPtr(objv[9],SWIG_as_voidptrptr(&arg10),SWIGTYPE_p_int,0))))) {
      int val; 
      int ecode = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[9], &val);
      if (!SWIG_IsOK(ecode)) {
        SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Band_WriteRaster" "', argument " "10"" of type '" "int""'");
      }
      temp10 = static_cast< int >(val);
      arg10 = &temp10;
      res10 = SWIG_AddTmpMask(ecode);
    }
  }
  {
    CPLErrorReset();
    result = (CPLErr)GDALRasterBandShadow_WriteRaster(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  if (SWIG_IsNewObj(res8)) delete arg8;
  if (SWIG_IsNewObj(res9)) delete arg9;
  if (SWIG_IsNewObj(res10)) delete arg10;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res8)) delete arg8;
  if (SWIG_IsNewObj(res9)) delete arg9;
  if (SWIG_IsNewObj(res10)) delete arg10;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Band_FlushCache(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::Band_FlushCache self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_FlushCache" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
  {
    CPLErrorReset();
    GDALRasterBandShadow_FlushCache(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Band_GetRasterColorTable(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GDALColorTableShadow *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::Band_GetRasterColorTable self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_GetRasterColorTable" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
  {
    CPLErrorReset();
    result = (GDALColorTableShadow *)GDALRasterBandShadow_GetRasterColorTable(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_GDALColorTableShadow,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Band_GetColorTable(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GDALColorTableShadow *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::Band_GetColorTable self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_GetColorTable" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
  {
    CPLErrorReset();
    result = (GDALColorTableShadow *)GDALRasterBandShadow_GetColorTable(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_GDALColorTableShadow,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Band_SetRasterColorTable(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALColorTableShadow *arg2 = (GDALColorTableShadow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::Band_SetRasterColorTable self arg ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_SetRasterColorTable" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_GDALColorTableShadow, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Band_SetRasterColorTable" "', argument " "2"" of type '" "GDALColorTableShadow *""'"); 
  }
  arg2 = reinterpret_cast< GDALColorTableShadow * >(argp2);
  {
    CPLErrorReset();
    result = (int)GDALRasterBandShadow_SetRasterColorTable(arg1,arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Band_SetColorTable(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALColorTableShadow *arg2 = (GDALColorTableShadow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::Band_SetColorTable self arg ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_SetColorTable" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_GDALColorTableShadow, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Band_SetColorTable" "', argument " "2"" of type '" "GDALColorTableShadow *""'"); 
  }
  arg2 = reinterpret_cast< GDALColorTableShadow * >(argp2);
  {
    CPLErrorReset();
    result = (int)GDALRasterBandShadow_SetColorTable(arg1,arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Band_GetDefaultRAT(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GDALRasterAttributeTableShadow *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::Band_GetDefaultRAT self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_GetDefaultRAT" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
  {
    CPLErrorReset();
    result = (GDALRasterAttributeTableShadow *)GDALRasterBandShadow_GetDefaultRAT(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_GDALRasterAttributeTableShadow,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Band_SetDefaultRAT(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALRasterAttributeTableShadow *arg2 = (GDALRasterAttributeTableShadow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::Band_SetDefaultRAT self table ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_SetDefaultRAT" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_GDALRasterAttributeTableShadow, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Band_SetDefaultRAT" "', argument " "2"" of type '" "GDALRasterAttributeTableShadow *""'"); 
  }
  arg2 = reinterpret_cast< GDALRasterAttributeTableShadow * >(argp2);
  {
    CPLErrorReset();
    result = (int)GDALRasterBandShadow_SetDefaultRAT(arg1,arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Band_GetMaskBand(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GDALRasterBandShadow *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::Band_GetMaskBand self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_GetMaskBand" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
  {
    CPLErrorReset();
    result = (GDALRasterBandShadow *)GDALRasterBandShadow_GetMaskBand(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_GDALRasterBandShadow,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Band_GetMaskFlags(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::Band_GetMaskFlags self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_GetMaskFlags" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
  {
    CPLErrorReset();
    result = (int)GDALRasterBandShadow_GetMaskFlags(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Band_CreateMaskBand(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  CPLErr result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::Band_CreateMaskBand self nFlags ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_CreateMaskBand" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Band_CreateMaskBand" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    CPLErrorReset();
    result = (CPLErr)GDALRasterBandShadow_CreateMaskBand(arg1,arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Band_GetHistogram(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double arg2 = (double) -0.5 ;
  double arg3 = (double) 255.5 ;
  int arg4 = (int) 256 ;
  int *arg5 = (int *) NULL ;
  int arg6 = (int) 0 ;
  int arg7 = (int) 1 ;
  GDALProgressFunc arg8 = (GDALProgressFunc) NULL ;
  void *arg9 = (void *) NULL ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  CPLErr result;
  
  {
    /* %typemap(in) int buckets, int* panHistogram -> list */
    arg5 = (int *) CPLCalloc(sizeof(int),arg4);
  }
  /* %typemap(arginit) ( const char* callback_data=NULL)  */
  TclProgressData *psProgressInfo;
  psProgressInfo = (TclProgressData *) CPLCalloc(1,sizeof(TclProgressData));
  psProgressInfo->nLastReported = -1;
  psProgressInfo->interp = interp;
  psProgressInfo->psTclCallback = NULL;
  psProgressInfo->psTclCallbackData = NULL;
  if (SWIG_GetArgs(interp, objc, objv,"o|ooooooo:osgeo::Band_GetHistogram self ?min? ?max? ?buckets? ?panHistogram? ?include_out_of_range? ?approx_ok? ?callback? ?callback_data? ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_GetHistogram" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
  if (objc > 2) {
    ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Band_GetHistogram" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
  }
  if (objc > 3) {
    ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Band_GetHistogram" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
  }
  if (objc > 4) {
    {
      /* %typemap(in) int buckets, int* panHistogram -> list */
      int requested_buckets;
      SWIG_AsVal_int(interp, objv[4], &requested_buckets);
      if( requested_buckets != arg4 )
      {
        arg4 = requested_buckets;
        arg5 = (int *) CPLRealloc(arg5,sizeof(int) * requested_buckets);
      }
    }
  }
  if (objc > 5) {
    ecode6 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[5], &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Band_GetHistogram" "', argument " "6"" of type '" "int""'");
    } 
    arg6 = static_cast< int >(val6);
  }
  if (objc > 6) {
    ecode7 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[6], &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Band_GetHistogram" "', argument " "7"" of type '" "int""'");
    } 
    arg7 = static_cast< int >(val7);
  }
  if (objc > 7) {
    {
      /* %typemap(in) (GDALProgressFunc callback = NULL) */
      /* callback_func typemap */
      if (objv[7] && !strcmp(Tcl_GetString(objv[7]), "")) {
        void* cbfunction = NULL;
        SWIG_ConvertPtr( objv[7], 
          (void**)&cbfunction, 
          SWIGTYPE_p_f_double_p_q_const__char_p_void__int, 
          SWIG_POINTER_EXCEPTION | 0 );
        
        if ( cbfunction == GDALTermProgress ) {
          arg8 = GDALTermProgress;
        } else if ( cbfunction == GDALDummyProgress) {
          arg8 = GDALDummyProgress;
        } else if ( cbfunction == GDALScaledProgress) {
          arg8 = GDALScaledProgress;
        } else {
          psProgressInfo->psTclCallback = objv[7];
          Tcl_IncrRefCount(psProgressInfo->psTclCallback);
          arg8 = TclProgressProxy;
        }
      }
    }
  }
  if (objc > 8) {
    {
      /* %typemap(in) ( void* callback_data=NULL)  */
      psProgressInfo->psTclCallbackData = objv[8];
      Tcl_IncrRefCount(psProgressInfo->psTclCallbackData);
      arg9 = psProgressInfo;
      
    }
  }
  {
    CPLErrorReset();
    result = (CPLErr)GDALRasterBandShadow_GetHistogram(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  {
    /* %typemap(out) int buckets, int* panHistogram -> list */
    int *integerarray = arg5;
    if ( integerarray == NULL ) {
      Tcl_ResetResult(interp); /* NONE = Empty string */
    } else {
      Tcl_Obj *out = Tcl_NewListObj(0, NULL);
      for( int i=0; i < arg4; i++ ) {
        Tcl_Obj *o = Tcl_NewLongObj( integerarray[i] );
        if (Tcl_ListObjAppendElement(interp, out, o) != TCL_OK) {
          Tcl_DecrRefCount(o);
          Tcl_DecrRefCount(out);
          /* Error msg in interp result */
          SWIG_fail;
        }
      }
      Tcl_SetObjResult(interp, out);
    }
  }
  {
    /* %typemap(freearg) (int buckets, int* panHistogram)*/
    if ( arg5 ) {
      CPLFree( arg5 );
    }
  }
  {
    /* %typemap(freearg) ( void* callback_data=NULL)  */
    Tcl_DecrRefCount(psProgressInfo->psTclCallback);
    Tcl_DecrRefCount(psProgressInfo->psTclCallbackData);
    CPLFree(psProgressInfo);
  }
  return TCL_OK;
fail:
  {
    /* %typemap(freearg) (int buckets, int* panHistogram)*/
    if ( arg5 ) {
      CPLFree( arg5 );
    }
  }
  {
    /* %typemap(freearg) ( void* callback_data=NULL)  */
    Tcl_DecrRefCount(psProgressInfo->psTclCallback);
    Tcl_DecrRefCount(psProgressInfo->psTclCallbackData);
    CPLFree(psProgressInfo);
  }
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Band_GetDefaultHistogram(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double *arg2 = (double *) NULL ;
  double *arg3 = (double *) NULL ;
  int *arg4 = (int *) NULL ;
  int **arg5 = (int **) NULL ;
  int arg6 = (int) 1 ;
  GDALProgressFunc arg7 = (GDALProgressFunc) NULL ;
  void *arg8 = (void *) NULL ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  CPLErr result;
  
  double min_val, max_val;
  int buckets_val;
  int *panHistogram;
  
  /* frankwdebug */
  
  arg2 = &min_val;
  arg3 = &max_val;
  arg4 = &buckets_val;
  arg5 = &panHistogram;
  /* %typemap(arginit) ( const char* callback_data=NULL)  */
  TclProgressData *psProgressInfo;
  psProgressInfo = (TclProgressData *) CPLCalloc(1,sizeof(TclProgressData));
  psProgressInfo->nLastReported = -1;
  psProgressInfo->interp = interp;
  psProgressInfo->psTclCallback = NULL;
  psProgressInfo->psTclCallbackData = NULL;
  if (SWIG_GetArgs(interp, objc, objv,"o|ooooooo:osgeo::Band_GetDefaultHistogram self ?min_ret? ?max_ret? ?buckets_ret? ?ppanHistogram? ?force? ?callback? ?callback_data? ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_GetDefaultHistogram" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
  if (objc > 2) {
    res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_double, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Band_GetDefaultHistogram" "', argument " "2"" of type '" "double *""'"); 
    }
    arg2 = reinterpret_cast< double * >(argp2);
  }
  if (objc > 3) {
    res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_double, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Band_GetDefaultHistogram" "', argument " "3"" of type '" "double *""'"); 
    }
    arg3 = reinterpret_cast< double * >(argp3);
  }
  if (objc > 4) {
    res4 = SWIG_ConvertPtr(objv[4], &argp4,SWIGTYPE_p_int, 0 |  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Band_GetDefaultHistogram" "', argument " "4"" of type '" "int *""'"); 
    }
    arg4 = reinterpret_cast< int * >(argp4);
  }
  if (objc > 5) {
    res5 = SWIG_ConvertPtr(objv[5], &argp5,SWIGTYPE_p_p_int, 0 |  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Band_GetDefaultHistogram" "', argument " "5"" of type '" "int **""'"); 
    }
    arg5 = reinterpret_cast< int ** >(argp5);
  }
  if (objc > 6) {
    ecode6 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[6], &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Band_GetDefaultHistogram" "', argument " "6"" of type '" "int""'");
    } 
    arg6 = static_cast< int >(val6);
  }
  if (objc > 7) {
    {
      /* %typemap(in) (GDALProgressFunc callback = NULL) */
      /* callback_func typemap */
      if (objv[7] && !strcmp(Tcl_GetString(objv[7]), "")) {
        void* cbfunction = NULL;
        SWIG_ConvertPtr( objv[7], 
          (void**)&cbfunction, 
          SWIGTYPE_p_f_double_p_q_const__char_p_void__int, 
          SWIG_POINTER_EXCEPTION | 0 );
        
        if ( cbfunction == GDALTermProgress ) {
          arg7 = GDALTermProgress;
        } else if ( cbfunction == GDALDummyProgress) {
          arg7 = GDALDummyProgress;
        } else if ( cbfunction == GDALScaledProgress) {
          arg7 = GDALScaledProgress;
        } else {
          psProgressInfo->psTclCallback = objv[7];
          Tcl_IncrRefCount(psProgressInfo->psTclCallback);
          arg7 = TclProgressProxy;
        }
      }
    }
  }
  if (objc > 8) {
    {
      /* %typemap(in) ( void* callback_data=NULL)  */
      psProgressInfo->psTclCallbackData = objv[8];
      Tcl_IncrRefCount(psProgressInfo->psTclCallbackData);
      arg8 = psProgressInfo;
      
    }
  }
  {
    CPLErrorReset();
    result = (CPLErr)GDALRasterBandShadow_GetDefaultHistogram(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  {
    int i;
    Tcl_Obj *o, *psList = NULL;
    
    /* frankwdebug */
    
    psList = Tcl_NewListObj(0, NULL);
    
    o = Tcl_NewDoubleObj( min_val );
    if (Tcl_ListObjAppendElement(interp, psList, o) != TCL_OK) {
      Tcl_DecrRefCount(o);
      Tcl_DecrRefCount(psList);
      /* Error msg in interp result */
      SWIG_fail;
    }
    o = Tcl_NewDoubleObj( max_val );
    if (Tcl_ListObjAppendElement(interp, psList, o) != TCL_OK) {
      Tcl_DecrRefCount(o);
      Tcl_DecrRefCount(psList);
      /* Error msg in interp result */
      SWIG_fail;
    }
    o = Tcl_NewLongObj( buckets_val );
    if (Tcl_ListObjAppendElement(interp, psList, o) != TCL_OK) {
      Tcl_DecrRefCount(o);
      Tcl_DecrRefCount(psList);
      /* Error msg in interp result */
      SWIG_fail;
    }
    
    for( i = 0; i < buckets_val; i++ ) {
      o = Tcl_NewLongObj( panHistogram[i] );
      if (Tcl_ListObjAppendElement(interp, psList, o) != TCL_OK) {
        Tcl_DecrRefCount(o);
        Tcl_DecrRefCount(psList);
        /* Error msg in interp result */
        SWIG_fail;
      }
    }
    
    Tcl_SetObjResult(interp, psList);
    CPLFree( panHistogram );
  }
  {
    /* %typemap(freearg) ( void* callback_data=NULL)  */
    Tcl_DecrRefCount(psProgressInfo->psTclCallback);
    Tcl_DecrRefCount(psProgressInfo->psTclCallbackData);
    CPLFree(psProgressInfo);
  }
  return TCL_OK;
fail:
  {
    /* %typemap(freearg) ( void* callback_data=NULL)  */
    Tcl_DecrRefCount(psProgressInfo->psTclCallback);
    Tcl_DecrRefCount(psProgressInfo->psTclCallbackData);
    CPLFree(psProgressInfo);
  }
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Band_SetDefaultHistogram(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double arg2 ;
  double arg3 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  CPLErr result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooo:osgeo::Band_SetDefaultHistogram self min max buckets_in panHistogram_in ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_SetDefaultHistogram" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Band_SetDefaultHistogram" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Band_SetDefaultHistogram" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Band_SetDefaultHistogram" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(objv[5], &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Band_SetDefaultHistogram" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  {
    CPLErrorReset();
    result = (CPLErr)GDALRasterBandShadow_SetDefaultHistogram(arg1,arg2,arg3,arg4,arg5);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


static swig_method swig_GDALRasterBandShadow_methods[] = {
    {"GetBlockSize", _wrap_Band_GetBlockSize}, 
    {"GetRasterColorInterpretation", _wrap_Band_GetRasterColorInterpretation}, 
    {"SetRasterColorInterpretation", _wrap_Band_SetRasterColorInterpretation}, 
    {"GetNoDataValue", _wrap_Band_GetNoDataValue}, 
    {"SetNoDataValue", _wrap_Band_SetNoDataValue}, 
    {"GetRasterCategoryNames", _wrap_Band_GetRasterCategoryNames}, 
    {"SetRasterCategoryNames", _wrap_Band_SetRasterCategoryNames}, 
    {"GetMinimum", _wrap_Band_GetMinimum}, 
    {"GetMaximum", _wrap_Band_GetMaximum}, 
    {"GetOffset", _wrap_Band_GetOffset}, 
    {"GetScale", _wrap_Band_GetScale}, 
    {"GetStatistics", _wrap_Band_GetStatistics}, 
    {"SetStatistics", _wrap_Band_SetStatistics}, 
    {"GetOverviewCount", _wrap_Band_GetOverviewCount}, 
    {"GetOverview", _wrap_Band_GetOverview}, 
    {"Checksum", _wrap_Band_Checksum}, 
    {"ComputeRasterMinMax", _wrap_Band_ComputeRasterMinMax}, 
    {"ComputeBandStats", _wrap_Band_ComputeBandStats}, 
    {"Fill", _wrap_Band_Fill}, 
    {"ReadRaster", _wrap_Band_ReadRaster}, 
    {"WriteRaster", _wrap_Band_WriteRaster}, 
    {"FlushCache", _wrap_Band_FlushCache}, 
    {"GetRasterColorTable", _wrap_Band_GetRasterColorTable}, 
    {"GetColorTable", _wrap_Band_GetColorTable}, 
    {"SetRasterColorTable", _wrap_Band_SetRasterColorTable}, 
    {"SetColorTable", _wrap_Band_SetColorTable}, 
    {"GetDefaultRAT", _wrap_Band_GetDefaultRAT}, 
    {"SetDefaultRAT", _wrap_Band_SetDefaultRAT}, 
    {"GetMaskBand", _wrap_Band_GetMaskBand}, 
    {"GetMaskFlags", _wrap_Band_GetMaskFlags}, 
    {"CreateMaskBand", _wrap_Band_CreateMaskBand}, 
    {"GetHistogram", _wrap_Band_GetHistogram}, 
    {"GetDefaultHistogram", _wrap_Band_GetDefaultHistogram}, 
    {"SetDefaultHistogram", _wrap_Band_SetDefaultHistogram}, 
    {0,0}
};
static swig_attribute swig_GDALRasterBandShadow_attributes[] = {
    { "-XSize",_wrap_Band_XSize_get, 0 },
    { "-YSize",_wrap_Band_YSize_get, 0 },
    { "-DataType",_wrap_Band_DataType_get, 0 },
    {0,0,0}
};
static swig_class *swig_GDALRasterBandShadow_bases[] = {0,0};
static const char * swig_GDALRasterBandShadow_base_names[] = {"GDALMajorObjectShadow *",0};
static swig_class _wrap_class_GDALRasterBandShadow = { "Band", &SWIGTYPE_p_GDALRasterBandShadow,0,0, swig_GDALRasterBandShadow_methods, swig_GDALRasterBandShadow_attributes, swig_GDALRasterBandShadow_bases,swig_GDALRasterBandShadow_base_names, &swig_module };
SWIGINTERN int
_wrap_new_ColorTable(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALPaletteInterp arg1 = (GDALPaletteInterp) GPI_RGB ;
  int val1 ;
  int ecode1 = 0 ;
  GDALColorTableShadow *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"|o:osgeo::new_ColorTable ?palette? ",(void *)0) == TCL_ERROR) SWIG_fail;
  if (objc > 1) {
    ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ColorTable" "', argument " "1"" of type '" "GDALPaletteInterp""'");
    } 
    arg1 = static_cast< GDALPaletteInterp >(val1);
  }
  {
    CPLErrorReset();
    result = (GDALColorTableShadow *)new_GDALColorTableShadow(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_GDALColorTableShadow,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_ColorTable(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALColorTableShadow *arg1 = (GDALColorTableShadow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::delete_ColorTable self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALColorTableShadow, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ColorTable" "', argument " "1"" of type '" "GDALColorTableShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALColorTableShadow * >(argp1);
  {
    CPLErrorReset();
    delete_GDALColorTableShadow(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ColorTable_Clone(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALColorTableShadow *arg1 = (GDALColorTableShadow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GDALColorTableShadow *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::ColorTable_Clone self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALColorTableShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorTable_Clone" "', argument " "1"" of type '" "GDALColorTableShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALColorTableShadow * >(argp1);
  {
    CPLErrorReset();
    result = (GDALColorTableShadow *)GDALColorTableShadow_Clone(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_GDALColorTableShadow,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ColorTable_GetPaletteInterpretation(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALColorTableShadow *arg1 = (GDALColorTableShadow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GDALPaletteInterp result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::ColorTable_GetPaletteInterpretation self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALColorTableShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorTable_GetPaletteInterpretation" "', argument " "1"" of type '" "GDALColorTableShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALColorTableShadow * >(argp1);
  {
    CPLErrorReset();
    result = (GDALPaletteInterp)GDALColorTableShadow_GetPaletteInterpretation(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ColorTable_GetCount(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALColorTableShadow *arg1 = (GDALColorTableShadow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::ColorTable_GetCount self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALColorTableShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorTable_GetCount" "', argument " "1"" of type '" "GDALColorTableShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALColorTableShadow * >(argp1);
  {
    CPLErrorReset();
    result = (int)GDALColorTableShadow_GetColorEntryCount(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ColorTable_GetColorEntry(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALColorTableShadow *arg1 = (GDALColorTableShadow *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  GDALColorEntry *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::ColorTable_GetColorEntry self entry ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALColorTableShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorTable_GetColorEntry" "', argument " "1"" of type '" "GDALColorTableShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALColorTableShadow * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ColorTable_GetColorEntry" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    CPLErrorReset();
    result = (GDALColorEntry *)GDALColorTableShadow_GetColorEntry(arg1,arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  {
    /* %typemap(out) GDALColorEntry* */
    Tcl_Obj *out = Tcl_NewListObj(0, NULL);
    Tcl_Obj *val;
    val  = Tcl_NewIntObj((*result).c1);
    if (Tcl_ListObjAppendElement(interp, out, val) != TCL_OK) {
      Tcl_DecrRefCount(val);
      Tcl_DecrRefCount(out);
      SWIG_fail;
    }
    val = Tcl_NewIntObj((*result).c2);
    if (Tcl_ListObjAppendElement(interp, out, val) != TCL_OK) {
      Tcl_DecrRefCount(val);
      Tcl_DecrRefCount(out);
      SWIG_fail;
    }
    val = Tcl_NewIntObj((*result).c3);
    if (Tcl_ListObjAppendElement(interp, out, val) != TCL_OK) {
      Tcl_DecrRefCount(val);
      Tcl_DecrRefCount(out);
      SWIG_fail;
    }
    val = Tcl_NewIntObj((*result).c4);
    if (Tcl_ListObjAppendElement(interp, out, val) != TCL_OK) {
      Tcl_DecrRefCount(val);
      Tcl_DecrRefCount(out);
      SWIG_fail;
    }
    Tcl_SetObjResult(interp, out);
    
    /* More compact: (If used, the next typemap must be modified as well)
           Tcl_SetObjResult(interp, Tcl_ObjPrintf("%x%x%x%x", (*result).c1, (*result).c2, (*result).c3, (*result).c4));
         */
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ColorTable_GetColorEntryAsRGB(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALColorTableShadow *arg1 = (GDALColorTableShadow *) 0 ;
  int arg2 ;
  GDALColorEntry *arg3 = (GDALColorEntry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  GDALColorEntry ce3 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:osgeo::ColorTable_GetColorEntryAsRGB self entry centry ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALColorTableShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorTable_GetColorEntryAsRGB" "', argument " "1"" of type '" "GDALColorTableShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALColorTableShadow * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ColorTable_GetColorEntryAsRGB" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    /* %typemap(in) GDALColorEntry* */
    ce3.c1 = 0;
    ce3.c2 = 0;
    ce3.c3 = 0;
    ce3.c4 = 255;
    /* The following also checks if input is a list */
    int size;
    if (Tcl_ListObjLength(interp, objv[3], &size) != TCL_OK) {
      /* Error msg in interp result */
      SWIG_fail;
    }
    if ( size > 4 ) {
      Tcl_SetResult(interp, (char*) "ColorEntry sequence too long", TCL_STATIC);
      SWIG_fail;
    }
    if ( size < 3 ) {
      Tcl_SetResult(interp, (char*) "ColorEntry sequence too short", TCL_STATIC);
      SWIG_fail;
    }
    for( int i = 0; i<size; i++ ) {
      Tcl_Obj **o = NULL;
      int val;
      /* The reference count for the list element is not incremented with the following */
      if (Tcl_ListObjIndex(interp, objv[3], i, o) != TCL_OK) {
        /* Error msg in interp result */
        SWIG_fail;
      }
      
      if (Tcl_GetIntFromObj(interp, *o, &val) != TCL_OK) {
        /* Error msg in interp result */
        SWIG_fail;
      }
      switch (i) {
        case 1: ce3.c1 = (short) val; break;
        case 2: ce3.c2 = (short) val; break;
        case 3: ce3.c3 = (short) val; break;
        case 4: ce3.c4 = (short) val; break;
      }
    }
    arg3 = &ce3;
  }
  {
    CPLErrorReset();
    result = (int)GDALColorTableShadow_GetColorEntryAsRGB(arg1,arg2,arg3);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ColorTable_SetColorEntry(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALColorTableShadow *arg1 = (GDALColorTableShadow *) 0 ;
  int arg2 ;
  GDALColorEntry *arg3 = (GDALColorEntry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  GDALColorEntry ce3 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:osgeo::ColorTable_SetColorEntry self entry centry ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALColorTableShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorTable_SetColorEntry" "', argument " "1"" of type '" "GDALColorTableShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALColorTableShadow * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ColorTable_SetColorEntry" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    /* %typemap(in) GDALColorEntry* */
    ce3.c1 = 0;
    ce3.c2 = 0;
    ce3.c3 = 0;
    ce3.c4 = 255;
    /* The following also checks if input is a list */
    int size;
    if (Tcl_ListObjLength(interp, objv[3], &size) != TCL_OK) {
      /* Error msg in interp result */
      SWIG_fail;
    }
    if ( size > 4 ) {
      Tcl_SetResult(interp, (char*) "ColorEntry sequence too long", TCL_STATIC);
      SWIG_fail;
    }
    if ( size < 3 ) {
      Tcl_SetResult(interp, (char*) "ColorEntry sequence too short", TCL_STATIC);
      SWIG_fail;
    }
    for( int i = 0; i<size; i++ ) {
      Tcl_Obj **o = NULL;
      int val;
      /* The reference count for the list element is not incremented with the following */
      if (Tcl_ListObjIndex(interp, objv[3], i, o) != TCL_OK) {
        /* Error msg in interp result */
        SWIG_fail;
      }
      
      if (Tcl_GetIntFromObj(interp, *o, &val) != TCL_OK) {
        /* Error msg in interp result */
        SWIG_fail;
      }
      switch (i) {
        case 1: ce3.c1 = (short) val; break;
        case 2: ce3.c2 = (short) val; break;
        case 3: ce3.c3 = (short) val; break;
        case 4: ce3.c4 = (short) val; break;
      }
    }
    arg3 = &ce3;
  }
  {
    CPLErrorReset();
    GDALColorTableShadow_SetColorEntry(arg1,arg2,(GDALColorEntry const *)arg3);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ColorTable_CreateColorRamp(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALColorTableShadow *arg1 = (GDALColorTableShadow *) 0 ;
  int arg2 ;
  GDALColorEntry *arg3 = (GDALColorEntry *) 0 ;
  int arg4 ;
  GDALColorEntry *arg5 = (GDALColorEntry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  GDALColorEntry ce3 ;
  int val4 ;
  int ecode4 = 0 ;
  GDALColorEntry ce5 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooo:osgeo::ColorTable_CreateColorRamp self nStartIndex startcolor nEndIndex endcolor ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALColorTableShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorTable_CreateColorRamp" "', argument " "1"" of type '" "GDALColorTableShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALColorTableShadow * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ColorTable_CreateColorRamp" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    /* %typemap(in) GDALColorEntry* */
    ce3.c1 = 0;
    ce3.c2 = 0;
    ce3.c3 = 0;
    ce3.c4 = 255;
    /* The following also checks if input is a list */
    int size;
    if (Tcl_ListObjLength(interp, objv[3], &size) != TCL_OK) {
      /* Error msg in interp result */
      SWIG_fail;
    }
    if ( size > 4 ) {
      Tcl_SetResult(interp, (char*) "ColorEntry sequence too long", TCL_STATIC);
      SWIG_fail;
    }
    if ( size < 3 ) {
      Tcl_SetResult(interp, (char*) "ColorEntry sequence too short", TCL_STATIC);
      SWIG_fail;
    }
    for( int i = 0; i<size; i++ ) {
      Tcl_Obj **o = NULL;
      int val;
      /* The reference count for the list element is not incremented with the following */
      if (Tcl_ListObjIndex(interp, objv[3], i, o) != TCL_OK) {
        /* Error msg in interp result */
        SWIG_fail;
      }
      
      if (Tcl_GetIntFromObj(interp, *o, &val) != TCL_OK) {
        /* Error msg in interp result */
        SWIG_fail;
      }
      switch (i) {
        case 1: ce3.c1 = (short) val; break;
        case 2: ce3.c2 = (short) val; break;
        case 3: ce3.c3 = (short) val; break;
        case 4: ce3.c4 = (short) val; break;
      }
    }
    arg3 = &ce3;
  }
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ColorTable_CreateColorRamp" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    /* %typemap(in) GDALColorEntry* */
    ce5.c1 = 0;
    ce5.c2 = 0;
    ce5.c3 = 0;
    ce5.c4 = 255;
    /* The following also checks if input is a list */
    int size;
    if (Tcl_ListObjLength(interp, objv[5], &size) != TCL_OK) {
      /* Error msg in interp result */
      SWIG_fail;
    }
    if ( size > 4 ) {
      Tcl_SetResult(interp, (char*) "ColorEntry sequence too long", TCL_STATIC);
      SWIG_fail;
    }
    if ( size < 3 ) {
      Tcl_SetResult(interp, (char*) "ColorEntry sequence too short", TCL_STATIC);
      SWIG_fail;
    }
    for( int i = 0; i<size; i++ ) {
      Tcl_Obj **o = NULL;
      int val;
      /* The reference count for the list element is not incremented with the following */
      if (Tcl_ListObjIndex(interp, objv[5], i, o) != TCL_OK) {
        /* Error msg in interp result */
        SWIG_fail;
      }
      
      if (Tcl_GetIntFromObj(interp, *o, &val) != TCL_OK) {
        /* Error msg in interp result */
        SWIG_fail;
      }
      switch (i) {
        case 1: ce5.c1 = (short) val; break;
        case 2: ce5.c2 = (short) val; break;
        case 3: ce5.c3 = (short) val; break;
        case 4: ce5.c4 = (short) val; break;
      }
    }
    arg5 = &ce5;
  }
  {
    CPLErrorReset();
    GDALColorTableShadow_CreateColorRamp(arg1,arg2,(GDALColorEntry const *)arg3,arg4,(GDALColorEntry const *)arg5);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_ColorTable(void *obj) {
GDALColorTableShadow *arg1 = (GDALColorTableShadow *) obj;
delete_GDALColorTableShadow(arg1);
}
static swig_method swig_GDALColorTableShadow_methods[] = {
    {"Clone", _wrap_ColorTable_Clone}, 
    {"GetPaletteInterpretation", _wrap_ColorTable_GetPaletteInterpretation}, 
    {"GetCount", _wrap_ColorTable_GetCount}, 
    {"GetColorEntry", _wrap_ColorTable_GetColorEntry}, 
    {"GetColorEntryAsRGB", _wrap_ColorTable_GetColorEntryAsRGB}, 
    {"SetColorEntry", _wrap_ColorTable_SetColorEntry}, 
    {"CreateColorRamp", _wrap_ColorTable_CreateColorRamp}, 
    {0,0}
};
static swig_attribute swig_GDALColorTableShadow_attributes[] = {
    {0,0,0}
};
static swig_class *swig_GDALColorTableShadow_bases[] = {0};
static const char * swig_GDALColorTableShadow_base_names[] = {0};
static swig_class _wrap_class_GDALColorTableShadow = { "ColorTable", &SWIGTYPE_p_GDALColorTableShadow,_wrap_new_ColorTable, swig_delete_ColorTable, swig_GDALColorTableShadow_methods, swig_GDALColorTableShadow_attributes, swig_GDALColorTableShadow_bases,swig_GDALColorTableShadow_base_names, &swig_module };
SWIGINTERN int
_wrap_new_RasterAttributeTable(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterAttributeTableShadow *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":osgeo::new_RasterAttributeTable ") == TCL_ERROR) SWIG_fail;
  {
    CPLErrorReset();
    result = (GDALRasterAttributeTableShadow *)new_GDALRasterAttributeTableShadow();
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_GDALRasterAttributeTableShadow,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_RasterAttributeTable(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::delete_RasterAttributeTable self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterAttributeTableShadow, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RasterAttributeTable" "', argument " "1"" of type '" "GDALRasterAttributeTableShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterAttributeTableShadow * >(argp1);
  {
    CPLErrorReset();
    delete_GDALRasterAttributeTableShadow(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_RasterAttributeTable_Clone(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GDALRasterAttributeTableShadow *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::RasterAttributeTable_Clone self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterAttributeTableShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterAttributeTable_Clone" "', argument " "1"" of type '" "GDALRasterAttributeTableShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterAttributeTableShadow * >(argp1);
  {
    CPLErrorReset();
    result = (GDALRasterAttributeTableShadow *)GDALRasterAttributeTableShadow_Clone(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_GDALRasterAttributeTableShadow,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_RasterAttributeTable_GetColumnCount(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::RasterAttributeTable_GetColumnCount self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterAttributeTableShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterAttributeTable_GetColumnCount" "', argument " "1"" of type '" "GDALRasterAttributeTableShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterAttributeTableShadow * >(argp1);
  {
    CPLErrorReset();
    result = (int)GDALRasterAttributeTableShadow_GetColumnCount(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_RasterAttributeTable_GetNameOfCol(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::RasterAttributeTable_GetNameOfCol self iCol ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterAttributeTableShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterAttributeTable_GetNameOfCol" "', argument " "1"" of type '" "GDALRasterAttributeTableShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterAttributeTableShadow * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterAttributeTable_GetNameOfCol" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    CPLErrorReset();
    result = (char *)GDALRasterAttributeTableShadow_GetNameOfCol(arg1,arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_RasterAttributeTable_GetUsageOfCol(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  GDALRATFieldUsage result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::RasterAttributeTable_GetUsageOfCol self iCol ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterAttributeTableShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterAttributeTable_GetUsageOfCol" "', argument " "1"" of type '" "GDALRasterAttributeTableShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterAttributeTableShadow * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterAttributeTable_GetUsageOfCol" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    CPLErrorReset();
    result = (GDALRATFieldUsage)GDALRasterAttributeTableShadow_GetUsageOfCol(arg1,arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_RasterAttributeTable_GetTypeOfCol(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  GDALRATFieldType result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::RasterAttributeTable_GetTypeOfCol self iCol ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterAttributeTableShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterAttributeTable_GetTypeOfCol" "', argument " "1"" of type '" "GDALRasterAttributeTableShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterAttributeTableShadow * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterAttributeTable_GetTypeOfCol" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    CPLErrorReset();
    result = (GDALRATFieldType)GDALRasterAttributeTableShadow_GetTypeOfCol(arg1,arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_RasterAttributeTable_GetColOfUsage(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  GDALRATFieldUsage arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::RasterAttributeTable_GetColOfUsage self eUsage ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterAttributeTableShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterAttributeTable_GetColOfUsage" "', argument " "1"" of type '" "GDALRasterAttributeTableShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterAttributeTableShadow * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterAttributeTable_GetColOfUsage" "', argument " "2"" of type '" "GDALRATFieldUsage""'");
  } 
  arg2 = static_cast< GDALRATFieldUsage >(val2);
  {
    CPLErrorReset();
    result = (int)GDALRasterAttributeTableShadow_GetColOfUsage(arg1,arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_RasterAttributeTable_GetRowCount(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::RasterAttributeTable_GetRowCount self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterAttributeTableShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterAttributeTable_GetRowCount" "', argument " "1"" of type '" "GDALRasterAttributeTableShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterAttributeTableShadow * >(argp1);
  {
    CPLErrorReset();
    result = (int)GDALRasterAttributeTableShadow_GetRowCount(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_RasterAttributeTable_GetValueAsString(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:osgeo::RasterAttributeTable_GetValueAsString self iRow iCol ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterAttributeTableShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterAttributeTable_GetValueAsString" "', argument " "1"" of type '" "GDALRasterAttributeTableShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterAttributeTableShadow * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterAttributeTable_GetValueAsString" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RasterAttributeTable_GetValueAsString" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    CPLErrorReset();
    result = (char *)GDALRasterAttributeTableShadow_GetValueAsString(arg1,arg2,arg3);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_RasterAttributeTable_GetValueAsInt(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:osgeo::RasterAttributeTable_GetValueAsInt self iRow iCol ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterAttributeTableShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterAttributeTable_GetValueAsInt" "', argument " "1"" of type '" "GDALRasterAttributeTableShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterAttributeTableShadow * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterAttributeTable_GetValueAsInt" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RasterAttributeTable_GetValueAsInt" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    CPLErrorReset();
    result = (int)GDALRasterAttributeTableShadow_GetValueAsInt(arg1,arg2,arg3);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_RasterAttributeTable_GetValueAsDouble(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:osgeo::RasterAttributeTable_GetValueAsDouble self iRow iCol ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterAttributeTableShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterAttributeTable_GetValueAsDouble" "', argument " "1"" of type '" "GDALRasterAttributeTableShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterAttributeTableShadow * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterAttributeTable_GetValueAsDouble" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RasterAttributeTable_GetValueAsDouble" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    CPLErrorReset();
    result = (double)GDALRasterAttributeTableShadow_GetValueAsDouble(arg1,arg2,arg3);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_RasterAttributeTable_SetValueAsString(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:osgeo::RasterAttributeTable_SetValueAsString self iRow iCol pszValue ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterAttributeTableShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterAttributeTable_SetValueAsString" "', argument " "1"" of type '" "GDALRasterAttributeTableShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterAttributeTableShadow * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterAttributeTable_SetValueAsString" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RasterAttributeTable_SetValueAsString" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    /* %typemap(in) (tostring argin) */
    arg4 = Tcl_GetString( objv[4] ); 
  }
  {
    CPLErrorReset();
    GDALRasterAttributeTableShadow_SetValueAsString(arg1,arg2,arg3,(char const *)arg4);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_RasterAttributeTable_SetValueAsInt(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:osgeo::RasterAttributeTable_SetValueAsInt self iRow iCol nValue ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterAttributeTableShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterAttributeTable_SetValueAsInt" "', argument " "1"" of type '" "GDALRasterAttributeTableShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterAttributeTableShadow * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterAttributeTable_SetValueAsInt" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RasterAttributeTable_SetValueAsInt" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RasterAttributeTable_SetValueAsInt" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    CPLErrorReset();
    GDALRasterAttributeTableShadow_SetValueAsInt(arg1,arg2,arg3,arg4);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_RasterAttributeTable_SetValueAsDouble(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:osgeo::RasterAttributeTable_SetValueAsDouble self iRow iCol dfValue ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterAttributeTableShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterAttributeTable_SetValueAsDouble" "', argument " "1"" of type '" "GDALRasterAttributeTableShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterAttributeTableShadow * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterAttributeTable_SetValueAsDouble" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RasterAttributeTable_SetValueAsDouble" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RasterAttributeTable_SetValueAsDouble" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    CPLErrorReset();
    GDALRasterAttributeTableShadow_SetValueAsDouble(arg1,arg2,arg3,arg4);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_RasterAttributeTable_SetRowCount(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::RasterAttributeTable_SetRowCount self nCount ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterAttributeTableShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterAttributeTable_SetRowCount" "', argument " "1"" of type '" "GDALRasterAttributeTableShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterAttributeTableShadow * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterAttributeTable_SetRowCount" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    CPLErrorReset();
    GDALRasterAttributeTableShadow_SetRowCount(arg1,arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_RasterAttributeTable_CreateColumn(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  GDALRATFieldType arg3 ;
  GDALRATFieldUsage arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:osgeo::RasterAttributeTable_CreateColumn self pszName eType eUsage ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterAttributeTableShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterAttributeTable_CreateColumn" "', argument " "1"" of type '" "GDALRasterAttributeTableShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterAttributeTableShadow * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RasterAttributeTable_CreateColumn" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RasterAttributeTable_CreateColumn" "', argument " "3"" of type '" "GDALRATFieldType""'");
  } 
  arg3 = static_cast< GDALRATFieldType >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RasterAttributeTable_CreateColumn" "', argument " "4"" of type '" "GDALRATFieldUsage""'");
  } 
  arg4 = static_cast< GDALRATFieldUsage >(val4);
  {
    CPLErrorReset();
    result = (int)GDALRasterAttributeTableShadow_CreateColumn(arg1,(char const *)arg2,arg3,arg4);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_RasterAttributeTable_GetRowOfValue(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:osgeo::RasterAttributeTable_GetRowOfValue self dfValue ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterAttributeTableShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterAttributeTable_GetRowOfValue" "', argument " "1"" of type '" "GDALRasterAttributeTableShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterAttributeTableShadow * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterAttributeTable_GetRowOfValue" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    CPLErrorReset();
    result = (int)GDALRasterAttributeTableShadow_GetRowOfValue(arg1,arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_RasterAttributeTable(void *obj) {
GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) obj;
delete_GDALRasterAttributeTableShadow(arg1);
}
static swig_method swig_GDALRasterAttributeTableShadow_methods[] = {
    {"Clone", _wrap_RasterAttributeTable_Clone}, 
    {"GetColumnCount", _wrap_RasterAttributeTable_GetColumnCount}, 
    {"GetNameOfCol", _wrap_RasterAttributeTable_GetNameOfCol}, 
    {"GetUsageOfCol", _wrap_RasterAttributeTable_GetUsageOfCol}, 
    {"GetTypeOfCol", _wrap_RasterAttributeTable_GetTypeOfCol}, 
    {"GetColOfUsage", _wrap_RasterAttributeTable_GetColOfUsage}, 
    {"GetRowCount", _wrap_RasterAttributeTable_GetRowCount}, 
    {"GetValueAsString", _wrap_RasterAttributeTable_GetValueAsString}, 
    {"GetValueAsInt", _wrap_RasterAttributeTable_GetValueAsInt}, 
    {"GetValueAsDouble", _wrap_RasterAttributeTable_GetValueAsDouble}, 
    {"SetValueAsString", _wrap_RasterAttributeTable_SetValueAsString}, 
    {"SetValueAsInt", _wrap_RasterAttributeTable_SetValueAsInt}, 
    {"SetValueAsDouble", _wrap_RasterAttributeTable_SetValueAsDouble}, 
    {"SetRowCount", _wrap_RasterAttributeTable_SetRowCount}, 
    {"CreateColumn", _wrap_RasterAttributeTable_CreateColumn}, 
    {"GetRowOfValue", _wrap_RasterAttributeTable_GetRowOfValue}, 
    {0,0}
};
static swig_attribute swig_GDALRasterAttributeTableShadow_attributes[] = {
    {0,0,0}
};
static swig_class *swig_GDALRasterAttributeTableShadow_bases[] = {0};
static const char * swig_GDALRasterAttributeTableShadow_base_names[] = {0};
static swig_class _wrap_class_GDALRasterAttributeTableShadow = { "RasterAttributeTable", &SWIGTYPE_p_GDALRasterAttributeTableShadow,_wrap_new_RasterAttributeTable, swig_delete_RasterAttributeTable, swig_GDALRasterAttributeTableShadow_methods, swig_GDALRasterAttributeTableShadow_attributes, swig_GDALRasterAttributeTableShadow_bases,swig_GDALRasterAttributeTableShadow_base_names, &swig_module };
SWIGINTERN int
_wrap_TermProgress_nocb(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) NULL ;
  void *arg3 = (void *) NULL ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o|oo:osgeo::TermProgress_nocb dfProgress ?pszMessage? ?pData? ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "TermProgress_nocb" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  if (objc > 2) {
    res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TermProgress_nocb" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
  }
  if (objc > 3) {
    res3 = SWIG_ConvertPtr(objv[3],SWIG_as_voidptrptr(&arg3), 0, 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TermProgress_nocb" "', argument " "3"" of type '" "void *""'"); 
    }
  }
  {
    CPLErrorReset();
    result = (int)GDALTermProgress_nocb(arg1,(char const *)arg2,arg3);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ComputeMedianCutPCT(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg3 = (GDALRasterBandShadow *) 0 ;
  int arg4 ;
  GDALColorTableShadow *arg5 = (GDALColorTableShadow *) 0 ;
  GDALProgressFunc arg6 = (GDALProgressFunc) NULL ;
  void *arg7 = (void *) NULL ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int result;
  
  /* %typemap(arginit) ( const char* callback_data=NULL)  */
  TclProgressData *psProgressInfo;
  psProgressInfo = (TclProgressData *) CPLCalloc(1,sizeof(TclProgressData));
  psProgressInfo->nLastReported = -1;
  psProgressInfo->interp = interp;
  psProgressInfo->psTclCallback = NULL;
  psProgressInfo->psTclCallbackData = NULL;
  if (SWIG_GetArgs(interp, objc, objv,"ooooo|oo:osgeo::ComputeMedianCutPCT red green blue num_colors colors ?callback? ?callback_data? ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComputeMedianCutPCT" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComputeMedianCutPCT" "', argument " "2"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg2 = reinterpret_cast< GDALRasterBandShadow * >(argp2);
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ComputeMedianCutPCT" "', argument " "3"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg3 = reinterpret_cast< GDALRasterBandShadow * >(argp3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ComputeMedianCutPCT" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(objv[5], &argp5,SWIGTYPE_p_GDALColorTableShadow, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ComputeMedianCutPCT" "', argument " "5"" of type '" "GDALColorTableShadow *""'"); 
  }
  arg5 = reinterpret_cast< GDALColorTableShadow * >(argp5);
  if (objc > 6) {
    {
      /* %typemap(in) (GDALProgressFunc callback = NULL) */
      /* callback_func typemap */
      if (objv[6] && !strcmp(Tcl_GetString(objv[6]), "")) {
        void* cbfunction = NULL;
        SWIG_ConvertPtr( objv[6], 
          (void**)&cbfunction, 
          SWIGTYPE_p_f_double_p_q_const__char_p_void__int, 
          SWIG_POINTER_EXCEPTION | 0 );
        
        if ( cbfunction == GDALTermProgress ) {
          arg6 = GDALTermProgress;
        } else if ( cbfunction == GDALDummyProgress) {
          arg6 = GDALDummyProgress;
        } else if ( cbfunction == GDALScaledProgress) {
          arg6 = GDALScaledProgress;
        } else {
          psProgressInfo->psTclCallback = objv[6];
          Tcl_IncrRefCount(psProgressInfo->psTclCallback);
          arg6 = TclProgressProxy;
        }
      }
    }
  }
  if (objc > 7) {
    {
      /* %typemap(in) ( void* callback_data=NULL)  */
      psProgressInfo->psTclCallbackData = objv[7];
      Tcl_IncrRefCount(psProgressInfo->psTclCallbackData);
      arg7 = psProgressInfo;
      
    }
  }
  {
    CPLErrorReset();
    result = (int)ComputeMedianCutPCT(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  {
    /* %typemap(freearg) ( void* callback_data=NULL)  */
    Tcl_DecrRefCount(psProgressInfo->psTclCallback);
    Tcl_DecrRefCount(psProgressInfo->psTclCallbackData);
    CPLFree(psProgressInfo);
  }
  return TCL_OK;
fail:
  {
    /* %typemap(freearg) ( void* callback_data=NULL)  */
    Tcl_DecrRefCount(psProgressInfo->psTclCallback);
    Tcl_DecrRefCount(psProgressInfo->psTclCallbackData);
    CPLFree(psProgressInfo);
  }
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_DitherRGB2PCT(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg3 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg4 = (GDALRasterBandShadow *) 0 ;
  GDALColorTableShadow *arg5 = (GDALColorTableShadow *) 0 ;
  GDALProgressFunc arg6 = (GDALProgressFunc) NULL ;
  void *arg7 = (void *) NULL ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int result;
  
  /* %typemap(arginit) ( const char* callback_data=NULL)  */
  TclProgressData *psProgressInfo;
  psProgressInfo = (TclProgressData *) CPLCalloc(1,sizeof(TclProgressData));
  psProgressInfo->nLastReported = -1;
  psProgressInfo->interp = interp;
  psProgressInfo->psTclCallback = NULL;
  psProgressInfo->psTclCallbackData = NULL;
  if (SWIG_GetArgs(interp, objc, objv,"ooooo|oo:osgeo::DitherRGB2PCT red green blue target colors ?callback? ?callback_data? ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DitherRGB2PCT" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DitherRGB2PCT" "', argument " "2"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg2 = reinterpret_cast< GDALRasterBandShadow * >(argp2);
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DitherRGB2PCT" "', argument " "3"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg3 = reinterpret_cast< GDALRasterBandShadow * >(argp3);
  res4 = SWIG_ConvertPtr(objv[4], &argp4,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DitherRGB2PCT" "', argument " "4"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg4 = reinterpret_cast< GDALRasterBandShadow * >(argp4);
  res5 = SWIG_ConvertPtr(objv[5], &argp5,SWIGTYPE_p_GDALColorTableShadow, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DitherRGB2PCT" "', argument " "5"" of type '" "GDALColorTableShadow *""'"); 
  }
  arg5 = reinterpret_cast< GDALColorTableShadow * >(argp5);
  if (objc > 6) {
    {
      /* %typemap(in) (GDALProgressFunc callback = NULL) */
      /* callback_func typemap */
      if (objv[6] && !strcmp(Tcl_GetString(objv[6]), "")) {
        void* cbfunction = NULL;
        SWIG_ConvertPtr( objv[6], 
          (void**)&cbfunction, 
          SWIGTYPE_p_f_double_p_q_const__char_p_void__int, 
          SWIG_POINTER_EXCEPTION | 0 );
        
        if ( cbfunction == GDALTermProgress ) {
          arg6 = GDALTermProgress;
        } else if ( cbfunction == GDALDummyProgress) {
          arg6 = GDALDummyProgress;
        } else if ( cbfunction == GDALScaledProgress) {
          arg6 = GDALScaledProgress;
        } else {
          psProgressInfo->psTclCallback = objv[6];
          Tcl_IncrRefCount(psProgressInfo->psTclCallback);
          arg6 = TclProgressProxy;
        }
      }
    }
  }
  if (objc > 7) {
    {
      /* %typemap(in) ( void* callback_data=NULL)  */
      psProgressInfo->psTclCallbackData = objv[7];
      Tcl_IncrRefCount(psProgressInfo->psTclCallbackData);
      arg7 = psProgressInfo;
      
    }
  }
  {
    CPLErrorReset();
    result = (int)DitherRGB2PCT(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  {
    /* %typemap(freearg) ( void* callback_data=NULL)  */
    Tcl_DecrRefCount(psProgressInfo->psTclCallback);
    Tcl_DecrRefCount(psProgressInfo->psTclCallbackData);
    CPLFree(psProgressInfo);
  }
  return TCL_OK;
fail:
  {
    /* %typemap(freearg) ( void* callback_data=NULL)  */
    Tcl_DecrRefCount(psProgressInfo->psTclCallback);
    Tcl_DecrRefCount(psProgressInfo->psTclCallbackData);
    CPLFree(psProgressInfo);
  }
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ReprojectImage(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
  char *arg3 = (char *) NULL ;
  char *arg4 = (char *) NULL ;
  GDALResampleAlg arg5 = (GDALResampleAlg) GRA_NearestNeighbour ;
  double arg6 = (double) 0.0 ;
  double arg7 = (double) 0.0 ;
  GDALProgressFunc arg8 = (GDALProgressFunc) NULL ;
  void *arg9 = (void *) NULL ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  CPLErr result;
  
  /* %typemap(arginit) ( const char* callback_data=NULL)  */
  TclProgressData *psProgressInfo;
  psProgressInfo = (TclProgressData *) CPLCalloc(1,sizeof(TclProgressData));
  psProgressInfo->nLastReported = -1;
  psProgressInfo->interp = interp;
  psProgressInfo->psTclCallback = NULL;
  psProgressInfo->psTclCallbackData = NULL;
  if (SWIG_GetArgs(interp, objc, objv,"oo|ooooooo:osgeo::ReprojectImage src_ds dst_ds ?src_wkt? ?dst_wkt? ?eResampleAlg? ?WarpMemoryLimit? ?maxerror? ?callback? ?callback_data? ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReprojectImage" "', argument " "1"" of type '" "GDALDatasetShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALDatasetShadow * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ReprojectImage" "', argument " "2"" of type '" "GDALDatasetShadow *""'"); 
  }
  arg2 = reinterpret_cast< GDALDatasetShadow * >(argp2);
  if (objc > 3) {
    res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ReprojectImage" "', argument " "3"" of type '" "char const *""'");
    }
    arg3 = reinterpret_cast< char * >(buf3);
  }
  if (objc > 4) {
    res4 = SWIG_AsCharPtrAndSize(objv[4], &buf4, NULL, &alloc4);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ReprojectImage" "', argument " "4"" of type '" "char const *""'");
    }
    arg4 = reinterpret_cast< char * >(buf4);
  }
  if (objc > 5) {
    ecode5 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ReprojectImage" "', argument " "5"" of type '" "GDALResampleAlg""'");
    } 
    arg5 = static_cast< GDALResampleAlg >(val5);
  }
  if (objc > 6) {
    ecode6 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[6], &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ReprojectImage" "', argument " "6"" of type '" "double""'");
    } 
    arg6 = static_cast< double >(val6);
  }
  if (objc > 7) {
    ecode7 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[7], &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ReprojectImage" "', argument " "7"" of type '" "double""'");
    } 
    arg7 = static_cast< double >(val7);
  }
  if (objc > 8) {
    {
      /* %typemap(in) (GDALProgressFunc callback = NULL) */
      /* callback_func typemap */
      if (objv[8] && !strcmp(Tcl_GetString(objv[8]), "")) {
        void* cbfunction = NULL;
        SWIG_ConvertPtr( objv[8], 
          (void**)&cbfunction, 
          SWIGTYPE_p_f_double_p_q_const__char_p_void__int, 
          SWIG_POINTER_EXCEPTION | 0 );
        
        if ( cbfunction == GDALTermProgress ) {
          arg8 = GDALTermProgress;
        } else if ( cbfunction == GDALDummyProgress) {
          arg8 = GDALDummyProgress;
        } else if ( cbfunction == GDALScaledProgress) {
          arg8 = GDALScaledProgress;
        } else {
          psProgressInfo->psTclCallback = objv[8];
          Tcl_IncrRefCount(psProgressInfo->psTclCallback);
          arg8 = TclProgressProxy;
        }
      }
    }
  }
  if (objc > 9) {
    {
      /* %typemap(in) ( void* callback_data=NULL)  */
      psProgressInfo->psTclCallbackData = objv[9];
      Tcl_IncrRefCount(psProgressInfo->psTclCallbackData);
      arg9 = psProgressInfo;
      
    }
  }
  {
    CPLErrorReset();
    result = (CPLErr)ReprojectImage(arg1,arg2,(char const *)arg3,(char const *)arg4,arg5,arg6,arg7,arg8,arg9);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  {
    /* %typemap(freearg) ( void* callback_data=NULL)  */
    Tcl_DecrRefCount(psProgressInfo->psTclCallback);
    Tcl_DecrRefCount(psProgressInfo->psTclCallbackData);
    CPLFree(psProgressInfo);
  }
  return TCL_OK;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  {
    /* %typemap(freearg) ( void* callback_data=NULL)  */
    Tcl_DecrRefCount(psProgressInfo->psTclCallback);
    Tcl_DecrRefCount(psProgressInfo->psTclCallbackData);
    CPLFree(psProgressInfo);
  }
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ComputeProximity(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
  char **arg3 = (char **) NULL ;
  GDALProgressFunc arg4 = (GDALProgressFunc) NULL ;
  void *arg5 = (void *) NULL ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  /* %typemap(arginit) ( const char* callback_data=NULL)  */
  TclProgressData *psProgressInfo;
  psProgressInfo = (TclProgressData *) CPLCalloc(1,sizeof(TclProgressData));
  psProgressInfo->nLastReported = -1;
  psProgressInfo->interp = interp;
  psProgressInfo->psTclCallback = NULL;
  psProgressInfo->psTclCallbackData = NULL;
  if (SWIG_GetArgs(interp, objc, objv,"oo|ooo:osgeo::ComputeProximity srcBand proximityBand ?options? ?callback? ?callback_data? ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComputeProximity" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComputeProximity" "', argument " "2"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg2 = reinterpret_cast< GDALRasterBandShadow * >(argp2);
  if (objc > 3) {
    {
      /* %typemap(in) char **options */
      int size;
      if (Tcl_ListObjLength(interp, objv[3], &size) != TCL_OK) {
        /* Error msg in interp result */
        SWIG_fail;
      }
      if ( !size ) {
        Tcl_SetResult(interp, (char*) "Input list mustn't be empty", TCL_STATIC);
        SWIG_fail;
      }
      
      for (int i = 0; i < size; i++) {
        Tcl_Obj **o = NULL;
        /* The reference count for the list element is not incremented with the following */
        if (Tcl_ListObjIndex(interp, objv[3], i, o) != TCL_OK) {
          /* Error msg in interp result */
          SWIG_fail;
        }
        char *pszItem = Tcl_GetString(*o);
        arg3 = CSLAddString( arg3, pszItem );
      }
    }
  }
  if (objc > 4) {
    {
      /* %typemap(in) (GDALProgressFunc callback = NULL) */
      /* callback_func typemap */
      if (objv[4] && !strcmp(Tcl_GetString(objv[4]), "")) {
        void* cbfunction = NULL;
        SWIG_ConvertPtr( objv[4], 
          (void**)&cbfunction, 
          SWIGTYPE_p_f_double_p_q_const__char_p_void__int, 
          SWIG_POINTER_EXCEPTION | 0 );
        
        if ( cbfunction == GDALTermProgress ) {
          arg4 = GDALTermProgress;
        } else if ( cbfunction == GDALDummyProgress) {
          arg4 = GDALDummyProgress;
        } else if ( cbfunction == GDALScaledProgress) {
          arg4 = GDALScaledProgress;
        } else {
          psProgressInfo->psTclCallback = objv[4];
          Tcl_IncrRefCount(psProgressInfo->psTclCallback);
          arg4 = TclProgressProxy;
        }
      }
    }
  }
  if (objc > 5) {
    {
      /* %typemap(in) ( void* callback_data=NULL)  */
      psProgressInfo->psTclCallbackData = objv[5];
      Tcl_IncrRefCount(psProgressInfo->psTclCallbackData);
      arg5 = psProgressInfo;
      
    }
  }
  {
    CPLErrorReset();
    result = (int)ComputeProximity(arg1,arg2,arg3,arg4,arg5);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg3 );
  }
  {
    /* %typemap(freearg) ( void* callback_data=NULL)  */
    Tcl_DecrRefCount(psProgressInfo->psTclCallback);
    Tcl_DecrRefCount(psProgressInfo->psTclCallbackData);
    CPLFree(psProgressInfo);
  }
  return TCL_OK;
fail:
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg3 );
  }
  {
    /* %typemap(freearg) ( void* callback_data=NULL)  */
    Tcl_DecrRefCount(psProgressInfo->psTclCallback);
    Tcl_DecrRefCount(psProgressInfo->psTclCallbackData);
    CPLFree(psProgressInfo);
  }
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_RasterizeLayer(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  OGRLayerShadow *arg4 = (OGRLayerShadow *) 0 ;
  void *arg5 = (void *) NULL ;
  void *arg6 = (void *) NULL ;
  int arg7 = (int) 0 ;
  double *arg8 = (double *) NULL ;
  char **arg9 = (char **) NULL ;
  GDALProgressFunc arg10 = (GDALProgressFunc) NULL ;
  void *arg11 = (void *) NULL ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int res5 ;
  int res6 ;
  int result;
  
  /* %typemap(arginit) ( const char* callback_data=NULL)  */
  TclProgressData *psProgressInfo;
  psProgressInfo = (TclProgressData *) CPLCalloc(1,sizeof(TclProgressData));
  psProgressInfo->nLastReported = -1;
  psProgressInfo->interp = interp;
  psProgressInfo->psTclCallback = NULL;
  psProgressInfo->psTclCallbackData = NULL;
  if (SWIG_GetArgs(interp, objc, objv,"ooo|oooooo:osgeo::RasterizeLayer dataset bands band_list ?layer? ?pfnTransformer? ?pTransformArg? ?burn_values? ?burn_values_list? ?options? ?callback? ?callback_data? ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterizeLayer" "', argument " "1"" of type '" "GDALDatasetShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALDatasetShadow * >(argp1);
  {
    /* %typemap(in,numinputs=1) (int nList, int* pList)*/
    /* The following also checks if input is a list */
    if (Tcl_ListObjLength(interp, objv[2], &arg2) != TCL_OK) {
      /* Error msg in interp result */
      SWIG_fail;
    }
    if ( !arg2 ) {
      Tcl_SetResult(interp, (char*) "Input list mustn't be empty", TCL_STATIC);
      SWIG_fail;
    }
    
    arg3 = (int*) CPLMalloc(arg2*sizeof(int));
    
    for( int i = 0; i<arg2; i++ ) {
      Tcl_Obj **o = NULL;
      if (Tcl_ListObjIndex(interp, objv[2], i, o) != TCL_OK) {
        /* ref count is not incremented */
        /* Error msg in interp result */
        SWIG_fail;
      }
      
      int val;
      if (Tcl_GetIntFromObj(interp, *o, &val ) != TCL_OK) {
        /* Error msg in interp result */
        SWIG_fail;
      }
      arg3[i] = val;
    }
  }
  res4 = SWIG_ConvertPtr(objv[3], &argp4,SWIGTYPE_p_OGRLayerShadow, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RasterizeLayer" "', argument " "4"" of type '" "OGRLayerShadow *""'"); 
  }
  arg4 = reinterpret_cast< OGRLayerShadow * >(argp4);
  if (objc > 4) {
    res5 = SWIG_ConvertPtr(objv[4],SWIG_as_voidptrptr(&arg5), 0, 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "RasterizeLayer" "', argument " "5"" of type '" "void *""'"); 
    }
  }
  if (objc > 5) {
    res6 = SWIG_ConvertPtr(objv[5],SWIG_as_voidptrptr(&arg6), 0, 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "RasterizeLayer" "', argument " "6"" of type '" "void *""'"); 
    }
  }
  if (objc > 6) {
    {
      /* %typemap(in,numinputs=1) (int nList, double* pList)*/
      /* The following also checks if input is a list */
      if (Tcl_ListObjLength(interp, objv[6], &arg7) != TCL_OK) {
        /* Error msg in interp result */
        SWIG_fail;
      }
      if ( !arg7 ) {
        Tcl_SetResult(interp, (char*) "Input list mustn't be empty", TCL_STATIC);
        SWIG_fail;
      }
      
      arg8 = (double*) CPLMalloc(arg7*sizeof(double));
      
      for( int i = 0; i<arg7; i++ ) {
        Tcl_Obj **o = NULL;
        if (Tcl_ListObjIndex(interp, objv[6], i, o) != TCL_OK) {
          /* ref count is not incremented */
          /* Error msg in interp result */
          SWIG_fail;
        }
        
        double val;
        if (Tcl_GetDoubleFromObj(interp, *o, &val ) != TCL_OK) {
          /* Error msg in interp result */
          SWIG_fail;
        }
        arg8[i] = val;
      }
    }
  }
  if (objc > 7) {
    {
      /* %typemap(in) char **options */
      int size;
      if (Tcl_ListObjLength(interp, objv[7], &size) != TCL_OK) {
        /* Error msg in interp result */
        SWIG_fail;
      }
      if ( !size ) {
        Tcl_SetResult(interp, (char*) "Input list mustn't be empty", TCL_STATIC);
        SWIG_fail;
      }
      
      for (int i = 0; i < size; i++) {
        Tcl_Obj **o = NULL;
        /* The reference count for the list element is not incremented with the following */
        if (Tcl_ListObjIndex(interp, objv[7], i, o) != TCL_OK) {
          /* Error msg in interp result */
          SWIG_fail;
        }
        char *pszItem = Tcl_GetString(*o);
        arg9 = CSLAddString( arg9, pszItem );
      }
    }
  }
  if (objc > 8) {
    {
      /* %typemap(in) (GDALProgressFunc callback = NULL) */
      /* callback_func typemap */
      if (objv[8] && !strcmp(Tcl_GetString(objv[8]), "")) {
        void* cbfunction = NULL;
        SWIG_ConvertPtr( objv[8], 
          (void**)&cbfunction, 
          SWIGTYPE_p_f_double_p_q_const__char_p_void__int, 
          SWIG_POINTER_EXCEPTION | 0 );
        
        if ( cbfunction == GDALTermProgress ) {
          arg10 = GDALTermProgress;
        } else if ( cbfunction == GDALDummyProgress) {
          arg10 = GDALDummyProgress;
        } else if ( cbfunction == GDALScaledProgress) {
          arg10 = GDALScaledProgress;
        } else {
          psProgressInfo->psTclCallback = objv[8];
          Tcl_IncrRefCount(psProgressInfo->psTclCallback);
          arg10 = TclProgressProxy;
        }
      }
    }
  }
  if (objc > 9) {
    {
      /* %typemap(in) ( void* callback_data=NULL)  */
      psProgressInfo->psTclCallbackData = objv[9];
      Tcl_IncrRefCount(psProgressInfo->psTclCallbackData);
      arg11 = psProgressInfo;
      
    }
  }
  {
    CPLErrorReset();
    result = (int)RasterizeLayer(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg3) {
      CPLFree((void*) arg3);
    }
  }
  {
    /* %typemap(freearg) (int nList, double* pList) */
    if (arg8) {
      CPLFree((void*) arg8);
    }
  }
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg9 );
  }
  {
    /* %typemap(freearg) ( void* callback_data=NULL)  */
    Tcl_DecrRefCount(psProgressInfo->psTclCallback);
    Tcl_DecrRefCount(psProgressInfo->psTclCallbackData);
    CPLFree(psProgressInfo);
  }
  return TCL_OK;
fail:
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg3) {
      CPLFree((void*) arg3);
    }
  }
  {
    /* %typemap(freearg) (int nList, double* pList) */
    if (arg8) {
      CPLFree((void*) arg8);
    }
  }
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg9 );
  }
  {
    /* %typemap(freearg) ( void* callback_data=NULL)  */
    Tcl_DecrRefCount(psProgressInfo->psTclCallback);
    Tcl_DecrRefCount(psProgressInfo->psTclCallbackData);
    CPLFree(psProgressInfo);
  }
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Polygonize(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
  OGRLayerShadow *arg3 = (OGRLayerShadow *) 0 ;
  int arg4 ;
  char **arg5 = (char **) NULL ;
  GDALProgressFunc arg6 = (GDALProgressFunc) NULL ;
  void *arg7 = (void *) NULL ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int result;
  
  /* %typemap(arginit) ( const char* callback_data=NULL)  */
  TclProgressData *psProgressInfo;
  psProgressInfo = (TclProgressData *) CPLCalloc(1,sizeof(TclProgressData));
  psProgressInfo->nLastReported = -1;
  psProgressInfo->interp = interp;
  psProgressInfo->psTclCallback = NULL;
  psProgressInfo->psTclCallbackData = NULL;
  if (SWIG_GetArgs(interp, objc, objv,"oooo|ooo:osgeo::Polygonize srcBand maskBand outLayer iPixValField ?options? ?callback? ?callback_data? ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Polygonize" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Polygonize" "', argument " "2"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg2 = reinterpret_cast< GDALRasterBandShadow * >(argp2);
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_OGRLayerShadow, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Polygonize" "', argument " "3"" of type '" "OGRLayerShadow *""'"); 
  }
  arg3 = reinterpret_cast< OGRLayerShadow * >(argp3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Polygonize" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  if (objc > 5) {
    {
      /* %typemap(in) char **options */
      int size;
      if (Tcl_ListObjLength(interp, objv[5], &size) != TCL_OK) {
        /* Error msg in interp result */
        SWIG_fail;
      }
      if ( !size ) {
        Tcl_SetResult(interp, (char*) "Input list mustn't be empty", TCL_STATIC);
        SWIG_fail;
      }
      
      for (int i = 0; i < size; i++) {
        Tcl_Obj **o = NULL;
        /* The reference count for the list element is not incremented with the following */
        if (Tcl_ListObjIndex(interp, objv[5], i, o) != TCL_OK) {
          /* Error msg in interp result */
          SWIG_fail;
        }
        char *pszItem = Tcl_GetString(*o);
        arg5 = CSLAddString( arg5, pszItem );
      }
    }
  }
  if (objc > 6) {
    {
      /* %typemap(in) (GDALProgressFunc callback = NULL) */
      /* callback_func typemap */
      if (objv[6] && !strcmp(Tcl_GetString(objv[6]), "")) {
        void* cbfunction = NULL;
        SWIG_ConvertPtr( objv[6], 
          (void**)&cbfunction, 
          SWIGTYPE_p_f_double_p_q_const__char_p_void__int, 
          SWIG_POINTER_EXCEPTION | 0 );
        
        if ( cbfunction == GDALTermProgress ) {
          arg6 = GDALTermProgress;
        } else if ( cbfunction == GDALDummyProgress) {
          arg6 = GDALDummyProgress;
        } else if ( cbfunction == GDALScaledProgress) {
          arg6 = GDALScaledProgress;
        } else {
          psProgressInfo->psTclCallback = objv[6];
          Tcl_IncrRefCount(psProgressInfo->psTclCallback);
          arg6 = TclProgressProxy;
        }
      }
    }
  }
  if (objc > 7) {
    {
      /* %typemap(in) ( void* callback_data=NULL)  */
      psProgressInfo->psTclCallbackData = objv[7];
      Tcl_IncrRefCount(psProgressInfo->psTclCallbackData);
      arg7 = psProgressInfo;
      
    }
  }
  {
    CPLErrorReset();
    result = (int)Polygonize(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg5 );
  }
  {
    /* %typemap(freearg) ( void* callback_data=NULL)  */
    Tcl_DecrRefCount(psProgressInfo->psTclCallback);
    Tcl_DecrRefCount(psProgressInfo->psTclCallbackData);
    CPLFree(psProgressInfo);
  }
  return TCL_OK;
fail:
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg5 );
  }
  {
    /* %typemap(freearg) ( void* callback_data=NULL)  */
    Tcl_DecrRefCount(psProgressInfo->psTclCallback);
    Tcl_DecrRefCount(psProgressInfo->psTclCallbackData);
    CPLFree(psProgressInfo);
  }
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SieveFilter(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg3 = (GDALRasterBandShadow *) 0 ;
  int arg4 ;
  int arg5 = (int) 4 ;
  char **arg6 = (char **) NULL ;
  GDALProgressFunc arg7 = (GDALProgressFunc) NULL ;
  void *arg8 = (void *) NULL ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int result;
  
  /* %typemap(arginit) ( const char* callback_data=NULL)  */
  TclProgressData *psProgressInfo;
  psProgressInfo = (TclProgressData *) CPLCalloc(1,sizeof(TclProgressData));
  psProgressInfo->nLastReported = -1;
  psProgressInfo->interp = interp;
  psProgressInfo->psTclCallback = NULL;
  psProgressInfo->psTclCallbackData = NULL;
  if (SWIG_GetArgs(interp, objc, objv,"oooo|oooo:osgeo::SieveFilter srcBand maskBand dstBand threshold ?connectedness? ?options? ?callback? ?callback_data? ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SieveFilter" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SieveFilter" "', argument " "2"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg2 = reinterpret_cast< GDALRasterBandShadow * >(argp2);
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SieveFilter" "', argument " "3"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg3 = reinterpret_cast< GDALRasterBandShadow * >(argp3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SieveFilter" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  if (objc > 5) {
    ecode5 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "SieveFilter" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
  }
  if (objc > 6) {
    {
      /* %typemap(in) char **options */
      int size;
      if (Tcl_ListObjLength(interp, objv[6], &size) != TCL_OK) {
        /* Error msg in interp result */
        SWIG_fail;
      }
      if ( !size ) {
        Tcl_SetResult(interp, (char*) "Input list mustn't be empty", TCL_STATIC);
        SWIG_fail;
      }
      
      for (int i = 0; i < size; i++) {
        Tcl_Obj **o = NULL;
        /* The reference count for the list element is not incremented with the following */
        if (Tcl_ListObjIndex(interp, objv[6], i, o) != TCL_OK) {
          /* Error msg in interp result */
          SWIG_fail;
        }
        char *pszItem = Tcl_GetString(*o);
        arg6 = CSLAddString( arg6, pszItem );
      }
    }
  }
  if (objc > 7) {
    {
      /* %typemap(in) (GDALProgressFunc callback = NULL) */
      /* callback_func typemap */
      if (objv[7] && !strcmp(Tcl_GetString(objv[7]), "")) {
        void* cbfunction = NULL;
        SWIG_ConvertPtr( objv[7], 
          (void**)&cbfunction, 
          SWIGTYPE_p_f_double_p_q_const__char_p_void__int, 
          SWIG_POINTER_EXCEPTION | 0 );
        
        if ( cbfunction == GDALTermProgress ) {
          arg7 = GDALTermProgress;
        } else if ( cbfunction == GDALDummyProgress) {
          arg7 = GDALDummyProgress;
        } else if ( cbfunction == GDALScaledProgress) {
          arg7 = GDALScaledProgress;
        } else {
          psProgressInfo->psTclCallback = objv[7];
          Tcl_IncrRefCount(psProgressInfo->psTclCallback);
          arg7 = TclProgressProxy;
        }
      }
    }
  }
  if (objc > 8) {
    {
      /* %typemap(in) ( void* callback_data=NULL)  */
      psProgressInfo->psTclCallbackData = objv[8];
      Tcl_IncrRefCount(psProgressInfo->psTclCallbackData);
      arg8 = psProgressInfo;
      
    }
  }
  {
    CPLErrorReset();
    result = (int)SieveFilter(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg6 );
  }
  {
    /* %typemap(freearg) ( void* callback_data=NULL)  */
    Tcl_DecrRefCount(psProgressInfo->psTclCallback);
    Tcl_DecrRefCount(psProgressInfo->psTclCallbackData);
    CPLFree(psProgressInfo);
  }
  return TCL_OK;
fail:
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg6 );
  }
  {
    /* %typemap(freearg) ( void* callback_data=NULL)  */
    Tcl_DecrRefCount(psProgressInfo->psTclCallback);
    Tcl_DecrRefCount(psProgressInfo->psTclCallbackData);
    CPLFree(psProgressInfo);
  }
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_RegenerateOverviews(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  GDALRasterBandShadow **arg3 = (GDALRasterBandShadow **) 0 ;
  char *arg4 = (char *) "average" ;
  GDALProgressFunc arg5 = (GDALProgressFunc) NULL ;
  void *arg6 = (void *) NULL ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int result;
  
  /* %typemap(arginit) ( const char* callback_data=NULL)  */
  TclProgressData *psProgressInfo;
  psProgressInfo = (TclProgressData *) CPLCalloc(1,sizeof(TclProgressData));
  psProgressInfo->nLastReported = -1;
  psProgressInfo->interp = interp;
  psProgressInfo->psTclCallback = NULL;
  psProgressInfo->psTclCallbackData = NULL;
  if (SWIG_GetArgs(interp, objc, objv,"oo|ooo:osgeo::RegenerateOverviews srcBand overviewBandCount ?overviewBands? ?resampling? ?callback? ?callback_data? ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegenerateOverviews" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
  {
    /*  OBJECT_LIST_INPUT %typemap(in) (int itemcount, GDALRasterBandShadow *optional_##GDALRasterBandShadow)*/
    if (Tcl_ListObjLength(interp, objv[2], &arg2) != TCL_OK) {
      /* Error msg in interp result */
      SWIG_fail;
    }
    if ( !arg2 ) {
      Tcl_SetResult(interp, (char*) "Input list mustn't be empty", TCL_STATIC);
      SWIG_fail;
    }
    
    arg3 = (GDALRasterBandShadow**) CPLMalloc(arg2*sizeof(GDALRasterBandShadow*));
    
    for( int i = 0; i<arg2; i++ ) {
      Tcl_Obj **o = NULL;
      if (Tcl_ListObjIndex(interp, objv[2], i, o) != TCL_OK) {
        /* ref count is not incremented */
        /* Error msg in interp result */
        SWIG_fail;
      }
      /* No equivalent of SWIG_Python_GetSwigThis for Tcl in SWIG, but we can still use this */
      //XXX
      GDALRasterBandShadow* pointer = NULL;
      SWIG_ConvertPtr( *o, (void**)&pointer, SWIGTYPE_p_GDALRasterBandShadow, SWIG_POINTER_EXCEPTION | 0 );
      if (!pointer) {
        SWIG_fail;
      }
      arg3[i] = pointer;
    }
  }
  if (objc > 3) {
    res4 = SWIG_AsCharPtrAndSize(objv[3], &buf4, NULL, &alloc4);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RegenerateOverviews" "', argument " "4"" of type '" "char *""'");
    }
    arg4 = reinterpret_cast< char * >(buf4);
  }
  if (objc > 4) {
    {
      /* %typemap(in) (GDALProgressFunc callback = NULL) */
      /* callback_func typemap */
      if (objv[4] && !strcmp(Tcl_GetString(objv[4]), "")) {
        void* cbfunction = NULL;
        SWIG_ConvertPtr( objv[4], 
          (void**)&cbfunction, 
          SWIGTYPE_p_f_double_p_q_const__char_p_void__int, 
          SWIG_POINTER_EXCEPTION | 0 );
        
        if ( cbfunction == GDALTermProgress ) {
          arg5 = GDALTermProgress;
        } else if ( cbfunction == GDALDummyProgress) {
          arg5 = GDALDummyProgress;
        } else if ( cbfunction == GDALScaledProgress) {
          arg5 = GDALScaledProgress;
        } else {
          psProgressInfo->psTclCallback = objv[4];
          Tcl_IncrRefCount(psProgressInfo->psTclCallback);
          arg5 = TclProgressProxy;
        }
      }
    }
  }
  if (objc > 5) {
    {
      /* %typemap(in) ( void* callback_data=NULL)  */
      psProgressInfo->psTclCallbackData = objv[5];
      Tcl_IncrRefCount(psProgressInfo->psTclCallbackData);
      arg6 = psProgressInfo;
      
    }
  }
  {
    CPLErrorReset();
    result = (int)RegenerateOverviews(arg1,arg2,arg3,arg4,arg5,arg6);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  {
    /* OBJECT_LIST_INPUT %typemap(freearg) (int object_list_count, GDALRasterBandShadow **poObjects)*/
    CPLFree( arg3 );
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  {
    /* %typemap(freearg) ( void* callback_data=NULL)  */
    Tcl_DecrRefCount(psProgressInfo->psTclCallback);
    Tcl_DecrRefCount(psProgressInfo->psTclCallbackData);
    CPLFree(psProgressInfo);
  }
  return TCL_OK;
fail:
  {
    /* OBJECT_LIST_INPUT %typemap(freearg) (int object_list_count, GDALRasterBandShadow **poObjects)*/
    CPLFree( arg3 );
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  {
    /* %typemap(freearg) ( void* callback_data=NULL)  */
    Tcl_DecrRefCount(psProgressInfo->psTclCallback);
    Tcl_DecrRefCount(psProgressInfo->psTclCallbackData);
    CPLFree(psProgressInfo);
  }
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_RegenerateOverview(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
  char *arg3 = (char *) 0 ;
  GDALProgressFunc arg4 = (GDALProgressFunc) NULL ;
  void *arg5 = (void *) NULL ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int result;
  
  /* %typemap(arginit) ( const char* callback_data=NULL)  */
  TclProgressData *psProgressInfo;
  psProgressInfo = (TclProgressData *) CPLCalloc(1,sizeof(TclProgressData));
  psProgressInfo->nLastReported = -1;
  psProgressInfo->interp = interp;
  psProgressInfo->psTclCallback = NULL;
  psProgressInfo->psTclCallbackData = NULL;
  if (SWIG_GetArgs(interp, objc, objv,"ooo|oo:osgeo::RegenerateOverview srcBand overviewBand resampling ?callback? ?callback_data? ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegenerateOverview" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegenerateOverview" "', argument " "2"" of type '" "GDALRasterBandShadow *""'"); 
  }
  arg2 = reinterpret_cast< GDALRasterBandShadow * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RegenerateOverview" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  if (objc > 4) {
    {
      /* %typemap(in) (GDALProgressFunc callback = NULL) */
      /* callback_func typemap */
      if (objv[4] && !strcmp(Tcl_GetString(objv[4]), "")) {
        void* cbfunction = NULL;
        SWIG_ConvertPtr( objv[4], 
          (void**)&cbfunction, 
          SWIGTYPE_p_f_double_p_q_const__char_p_void__int, 
          SWIG_POINTER_EXCEPTION | 0 );
        
        if ( cbfunction == GDALTermProgress ) {
          arg4 = GDALTermProgress;
        } else if ( cbfunction == GDALDummyProgress) {
          arg4 = GDALDummyProgress;
        } else if ( cbfunction == GDALScaledProgress) {
          arg4 = GDALScaledProgress;
        } else {
          psProgressInfo->psTclCallback = objv[4];
          Tcl_IncrRefCount(psProgressInfo->psTclCallback);
          arg4 = TclProgressProxy;
        }
      }
    }
  }
  if (objc > 5) {
    {
      /* %typemap(in) ( void* callback_data=NULL)  */
      psProgressInfo->psTclCallbackData = objv[5];
      Tcl_IncrRefCount(psProgressInfo->psTclCallbackData);
      arg5 = psProgressInfo;
      
    }
  }
  {
    CPLErrorReset();
    result = (int)RegenerateOverview(arg1,arg2,arg3,arg4,arg5);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    /* %typemap(freearg) ( void* callback_data=NULL)  */
    Tcl_DecrRefCount(psProgressInfo->psTclCallback);
    Tcl_DecrRefCount(psProgressInfo->psTclCallbackData);
    CPLFree(psProgressInfo);
  }
  return TCL_OK;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    /* %typemap(freearg) ( void* callback_data=NULL)  */
    Tcl_DecrRefCount(psProgressInfo->psTclCallback);
    Tcl_DecrRefCount(psProgressInfo->psTclCallbackData);
    CPLFree(psProgressInfo);
  }
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_AutoCreateWarpedVRT(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  GDALResampleAlg arg4 = (GDALResampleAlg) GRA_NearestNeighbour ;
  double arg5 = (double) 0.0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  GDALDatasetShadow *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o|oooo:osgeo::AutoCreateWarpedVRT src_ds ?src_wkt? ?dst_wkt? ?eResampleAlg? ?maxerror? ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AutoCreateWarpedVRT" "', argument " "1"" of type '" "GDALDatasetShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALDatasetShadow * >(argp1);
  if (objc > 2) {
    res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AutoCreateWarpedVRT" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
  }
  if (objc > 3) {
    res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AutoCreateWarpedVRT" "', argument " "3"" of type '" "char const *""'");
    }
    arg3 = reinterpret_cast< char * >(buf3);
  }
  if (objc > 4) {
    ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AutoCreateWarpedVRT" "', argument " "4"" of type '" "GDALResampleAlg""'");
    } 
    arg4 = static_cast< GDALResampleAlg >(val4);
  }
  if (objc > 5) {
    ecode5 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AutoCreateWarpedVRT" "', argument " "5"" of type '" "double""'");
    } 
    arg5 = static_cast< double >(val5);
  }
  {
    CPLErrorReset();
    result = (GDALDatasetShadow *)AutoCreateWarpedVRT(arg1,(char const *)arg2,(char const *)arg3,arg4,arg5);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_GDALDatasetShadow,0));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_Transformer(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
  char **arg3 = (char **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  GDALTransformerInfoShadow *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:osgeo::new_Transformer src dst options ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Transformer" "', argument " "1"" of type '" "GDALDatasetShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALDatasetShadow * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Transformer" "', argument " "2"" of type '" "GDALDatasetShadow *""'"); 
  }
  arg2 = reinterpret_cast< GDALDatasetShadow * >(argp2);
  {
    /* %typemap(in) char **options */
    int size;
    if (Tcl_ListObjLength(interp, objv[3], &size) != TCL_OK) {
      /* Error msg in interp result */
      SWIG_fail;
    }
    if ( !size ) {
      Tcl_SetResult(interp, (char*) "Input list mustn't be empty", TCL_STATIC);
      SWIG_fail;
    }
    
    for (int i = 0; i < size; i++) {
      Tcl_Obj **o = NULL;
      /* The reference count for the list element is not incremented with the following */
      if (Tcl_ListObjIndex(interp, objv[3], i, o) != TCL_OK) {
        /* Error msg in interp result */
        SWIG_fail;
      }
      char *pszItem = Tcl_GetString(*o);
      arg3 = CSLAddString( arg3, pszItem );
    }
  }
  {
    CPLErrorReset();
    result = (GDALTransformerInfoShadow *)new_GDALTransformerInfoShadow(arg1,arg2,arg3);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_GDALTransformerInfoShadow,0));
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg3 );
  }
  return TCL_OK;
fail:
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg3 );
  }
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_Transformer(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALTransformerInfoShadow *arg1 = (GDALTransformerInfoShadow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::delete_Transformer self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALTransformerInfoShadow, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Transformer" "', argument " "1"" of type '" "GDALTransformerInfoShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALTransformerInfoShadow * >(argp1);
  {
    CPLErrorReset();
    delete_GDALTransformerInfoShadow(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Transformer_TransformPoint__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALTransformerInfoShadow *arg1 = (GDALTransformerInfoShadow *) 0 ;
  int arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double argin3[3] ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:osgeo::Transformer_TransformPoint self bDstToSrc inout ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALTransformerInfoShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transformer_TransformPoint" "', argument " "1"" of type '" "GDALTransformerInfoShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALTransformerInfoShadow * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Transformer_TransformPoint" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    /* %typemap(in) (double argin3[ANY]) */
    arg3 = argin3;
    int lst_size;
    /* The following also checks if input is a list */
    if (Tcl_ListObjLength(interp, objv[3], &lst_size) != TCL_OK) {
      /* Error msg in interp result */
      SWIG_fail;
    }
    if ( lst_size != 3 ) {
      Tcl_SetResult(interp, (char*) "List must have length ##size", TCL_STATIC);
      SWIG_fail;
    }
    for (unsigned int i=0; i<3; i++) {
      Tcl_Obj **o = NULL;
      if (Tcl_ListObjIndex(interp, objv[3], i, o) != TCL_OK) {
        /* ref count is not incremented */
        /* Error msg in interp result */
        SWIG_fail;
      }
      
      double val;
      if (Tcl_GetDoubleFromObj(interp, *o, &val ) != TCL_OK) {
        /* Error msg in interp result */
        SWIG_fail;
      }
      arg3[i] = val;
    }
  }
  {
    CPLErrorReset();
    result = (int)GDALTransformerInfoShadow_TransformPoint__SWIG_0(arg1,arg2,arg3);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  {
    /* %typemap(argout) (double argout[ANY]) */
    Tcl_Obj *out = CreateListFromDoubleArray( interp, arg3, 3 );
    if (out == NULL) SWIG_fail;
    Tcl_ListObjAppendElement(interp,Tcl_GetObjResult(interp),out);
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Transformer_TransformPoint__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALTransformerInfoShadow *arg1 = (GDALTransformerInfoShadow *) 0 ;
  double *arg2 ;
  int arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 = (double) 0.0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double argout2[3] ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  int result;
  
  {
    /* %typemap(in,numinputs=0) (double argout2[ANY]) */
    arg2 = argout2;
  }
  if (SWIG_GetArgs(interp, objc, objv,"oooo|o:osgeo::Transformer_TransformPoint self bDstToSrc x y ?z? ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALTransformerInfoShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transformer_TransformPoint" "', argument " "1"" of type '" "GDALTransformerInfoShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALTransformerInfoShadow * >(argp1);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Transformer_TransformPoint" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Transformer_TransformPoint" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Transformer_TransformPoint" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  if (objc > 5) {
    ecode6 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[5], &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Transformer_TransformPoint" "', argument " "6"" of type '" "double""'");
    } 
    arg6 = static_cast< double >(val6);
  }
  {
    CPLErrorReset();
    result = (int)GDALTransformerInfoShadow_TransformPoint__SWIG_1(arg1,arg2,arg3,arg4,arg5,arg6);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  {
    /* %typemap(argout) (double argout[ANY]) */
    Tcl_Obj *out = CreateListFromDoubleArray( interp, arg2, 3 );
    if (out == NULL) SWIG_fail;
    Tcl_ListObjAppendElement(interp,Tcl_GetObjResult(interp),out);
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Transformer_TransformPoint(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GDALTransformerInfoShadow, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Transformer_TransformPoint__SWIG_0(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  if ((argc >= 4) && (argc <= 5)) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GDALTransformerInfoShadow, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            if (argc <= 4) {
              return _wrap_Transformer_TransformPoint__SWIG_1(clientData, interp, objc, argv - 1);
            }
            {
              int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Transformer_TransformPoint__SWIG_1(clientData, interp, objc, argv - 1);
            }
          }
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'Transformer_TransformPoint'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Transformer_TransformPoints(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALTransformerInfoShadow *arg1 = (GDALTransformerInfoShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  int *arg7 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:osgeo::Transformer_TransformPoints self bDstToSrc nCount ?x? ?y? ?z? ?panSuccess? ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_GDALTransformerInfoShadow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transformer_TransformPoints" "', argument " "1"" of type '" "GDALTransformerInfoShadow *""'"); 
  }
  arg1 = reinterpret_cast< GDALTransformerInfoShadow * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Transformer_TransformPoints" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    /*  typemap(in,numinputs=1) (int nCount, double *x, double *y, double *z, int* panSuccess) */
    /* The following also checks if input is a list */
    if (Tcl_ListObjLength(interp, objv[3], &arg3) != TCL_OK) {
      /* Error msg in interp result */
      SWIG_fail;
    }
    if ( !arg3 ) {
      Tcl_SetResult(interp, (char*) "Input list mustn't be empty", TCL_STATIC);
      SWIG_fail;
    }
    arg4 = (double*) CPLMalloc(arg3*sizeof(double));
    arg5 = (double*) CPLMalloc(arg3*sizeof(double));
    arg6 = (double*) CPLMalloc(arg3*sizeof(double));
    arg7 = (int*) CPLMalloc(arg3*sizeof(int));
    
    for( int i = 0; i<arg3; i++ ) {
      Tcl_Obj **o = NULL;
      if (Tcl_ListObjIndex(interp, objv[3], i, o) != TCL_OK) {
        /* ref count is not incremented */
        /* Error msg in interp result */
        SWIG_fail;
      }
      
      int size;
      if (Tcl_ListObjLength(interp, *o, &size) != TCL_OK) {
        /* Error msg in interp result */
        SWIG_fail;
      }
      if ( size < 2 || size > 3 ) {
        Tcl_SetResult(interp, (char*) "Not a list of 2 or 3 doubles", TCL_STATIC);
        SWIG_fail;
      }
      
      double x, y, z = 0;
      Tcl_Obj **o2 = NULL;
      if (Tcl_ListObjIndex(interp, *o, 0, o2) != TCL_OK) {
        /* ref count is not incremented */
        /* Error msg in interp result */
        SWIG_fail;
      }
      if (Tcl_GetDoubleFromObj(interp, *o2, &x ) != TCL_OK) {
        /* Error msg in interp result */
        SWIG_fail;
      }
      
      if (Tcl_ListObjIndex(interp, *o, 1, o2) != TCL_OK) {
        /* ref count is not incremented */
        /* Error msg in interp result */
        SWIG_fail;
      }
      if (Tcl_GetDoubleFromObj(interp, *o2, &y ) != TCL_OK) {
        /* Error msg in interp result */
        SWIG_fail;
      }
      
      if (size == 3) {
        if (Tcl_ListObjIndex(interp, *o, 2, o2) != TCL_OK) {
          /* ref count is not incremented */
          /* Error msg in interp result */
          SWIG_fail;
        }
        if (Tcl_GetDoubleFromObj(interp, *o2, &z ) != TCL_OK) {
          /* Error msg in interp result */
          SWIG_fail;
        }
      }
      
      (arg4)[i] = x;
      (arg5)[i] = y;
      (arg6)[i] = z;
    }
  }
  {
    CPLErrorReset();
    result = (int)GDALTransformerInfoShadow_TransformPoints(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  {
    /* %typemap(argout)  (int nCount, double *x, double *y, double *z, int* panSuccess) */
    Tcl_Obj *xyz = Tcl_NewListObj(0, NULL);
    Tcl_Obj *success = Tcl_NewListObj(0, NULL);
    for( int i=0; i< arg3; i++ ) {
      Tcl_Obj *tuple = Tcl_NewListObj(0, NULL);
      Tcl_Obj *val = Tcl_NewDoubleObj((arg4)[i] );
      if (Tcl_ListObjAppendElement(interp, tuple, val) != TCL_OK) {
        Tcl_DecrRefCount(val);
        Tcl_DecrRefCount(tuple);
        Tcl_DecrRefCount(xyz);
        Tcl_DecrRefCount(success);
        /* Error msg in interp result */
        SWIG_fail;
      }
      val = Tcl_NewDoubleObj((arg5)[i] );
      if (Tcl_ListObjAppendElement(interp, tuple, val) != TCL_OK) {
        Tcl_DecrRefCount(val);
        Tcl_DecrRefCount(tuple);
        Tcl_DecrRefCount(xyz);
        Tcl_DecrRefCount(success);
        /* Error msg in interp result */
        SWIG_fail;
      }
      val = Tcl_NewDoubleObj((arg6)[i] );
      if (Tcl_ListObjAppendElement(interp, tuple, val) != TCL_OK) {
        Tcl_DecrRefCount(val);
        Tcl_DecrRefCount(tuple);
        Tcl_DecrRefCount(xyz);
        Tcl_DecrRefCount(success);
        /* Error msg in interp result */
        SWIG_fail;
      }
      
      if (Tcl_ListObjAppendElement(interp, xyz, tuple) != TCL_OK) {
        Tcl_DecrRefCount(tuple);
        Tcl_DecrRefCount(xyz);
        Tcl_DecrRefCount(success);
        /* Error msg in interp result */
        SWIG_fail;
      }
      
      val = Tcl_NewIntObj((arg7)[i] );
      if (Tcl_ListObjAppendElement(interp, success, val) != TCL_OK) {
        Tcl_DecrRefCount(val);
        Tcl_DecrRefCount(xyz);
        Tcl_DecrRefCount(success);
        /* Error msg in interp result */
        SWIG_fail;
      }
    }
    
    Tcl_Obj *out = Tcl_NewListObj(0, NULL);
    if (Tcl_ListObjAppendElement(interp, out, xyz) != TCL_OK) {
      Tcl_DecrRefCount(xyz);
      Tcl_DecrRefCount(out);
      Tcl_DecrRefCount(success);
      /* Error msg in interp result */
      SWIG_fail;
    }
    if (Tcl_ListObjAppendElement(interp, out, success) != TCL_OK) {
      Tcl_DecrRefCount(success);
      Tcl_DecrRefCount(out);
      /* Error msg in interp result */
      SWIG_fail;
    }
    Tcl_SetObjResult(interp, out);
  }
  {
    /* %typemap(freearg)  (int nCount, double *x, double *y, double *z, int* panSuccess) */
    CPLFree(arg4);
    CPLFree(arg5);
    CPLFree(arg6);
    CPLFree(arg7);
  }
  return TCL_OK;
fail:
  {
    /* %typemap(freearg)  (int nCount, double *x, double *y, double *z, int* panSuccess) */
    CPLFree(arg4);
    CPLFree(arg5);
    CPLFree(arg6);
    CPLFree(arg7);
  }
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_Transformer(void *obj) {
GDALTransformerInfoShadow *arg1 = (GDALTransformerInfoShadow *) obj;
delete_GDALTransformerInfoShadow(arg1);
}
static swig_method swig_GDALTransformerInfoShadow_methods[] = {
    {"TransformPoint", _wrap_Transformer_TransformPoint}, 
    {"TransformPoints", _wrap_Transformer_TransformPoints}, 
    {0,0}
};
static swig_attribute swig_GDALTransformerInfoShadow_attributes[] = {
    {0,0,0}
};
static swig_class *swig_GDALTransformerInfoShadow_bases[] = {0};
static const char * swig_GDALTransformerInfoShadow_base_names[] = {0};
static swig_class _wrap_class_GDALTransformerInfoShadow = { "Transformer", &SWIGTYPE_p_GDALTransformerInfoShadow,_wrap_new_Transformer, swig_delete_Transformer, swig_GDALTransformerInfoShadow_methods, swig_GDALTransformerInfoShadow_attributes, swig_GDALTransformerInfoShadow_bases,swig_GDALTransformerInfoShadow_base_names, &swig_module };
SWIGINTERN int
_wrap_VersionInfo(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) "VERSION_NUM" ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"|o:osgeo::VersionInfo ?request? ",(void *)0) == TCL_ERROR) SWIG_fail;
  if (objc > 1) {
    res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VersionInfo" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
  }
  {
    CPLErrorReset();
    result = (char *)GDALVersionInfo((char const *)arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_AllRegister(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  if (SWIG_GetArgs(interp, objc, objv,":osgeo::AllRegister ") == TCL_ERROR) SWIG_fail;
  {
    CPLErrorReset();
    GDALAllRegister();
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GDALDestroyDriverManager(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  if (SWIG_GetArgs(interp, objc, objv,":osgeo::GDALDestroyDriverManager ") == TCL_ERROR) SWIG_fail;
  {
    CPLErrorReset();
    GDALDestroyDriverManager();
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetCacheMax(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,":osgeo::GetCacheMax ") == TCL_ERROR) SWIG_fail;
  {
    CPLErrorReset();
    result = (int)GDALGetCacheMax();
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetCacheMax(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::SetCacheMax nBytes ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetCacheMax" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    CPLErrorReset();
    GDALSetCacheMax(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetCacheUsed(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,":osgeo::GetCacheUsed ") == TCL_ERROR) SWIG_fail;
  {
    CPLErrorReset();
    result = (int)GDALGetCacheUsed();
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetDataTypeSize(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALDataType arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::GetDataTypeSize GDALDataType ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetDataTypeSize" "', argument " "1"" of type '" "GDALDataType""'");
  } 
  arg1 = static_cast< GDALDataType >(val1);
  {
    CPLErrorReset();
    result = (int)GDALGetDataTypeSize(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_DataTypeIsComplex(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALDataType arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::DataTypeIsComplex GDALDataType ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DataTypeIsComplex" "', argument " "1"" of type '" "GDALDataType""'");
  } 
  arg1 = static_cast< GDALDataType >(val1);
  {
    CPLErrorReset();
    result = (int)GDALDataTypeIsComplex(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetDataTypeName(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALDataType arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::GetDataTypeName GDALDataType ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetDataTypeName" "', argument " "1"" of type '" "GDALDataType""'");
  } 
  arg1 = static_cast< GDALDataType >(val1);
  {
    CPLErrorReset();
    result = (char *)GDALGetDataTypeName(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetDataTypeByName(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  GDALDataType result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::GetDataTypeByName char const * ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetDataTypeByName" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    CPLErrorReset();
    result = (GDALDataType)GDALGetDataTypeByName((char const *)arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetColorInterpretationName(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALColorInterp arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::GetColorInterpretationName GDALColorInterp ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetColorInterpretationName" "', argument " "1"" of type '" "GDALColorInterp""'");
  } 
  arg1 = static_cast< GDALColorInterp >(val1);
  {
    CPLErrorReset();
    result = (char *)GDALGetColorInterpretationName(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetPaletteInterpretationName(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GDALPaletteInterp arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::GetPaletteInterpretationName GDALPaletteInterp ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetPaletteInterpretationName" "', argument " "1"" of type '" "GDALPaletteInterp""'");
  } 
  arg1 = static_cast< GDALPaletteInterp >(val1);
  {
    CPLErrorReset();
    result = (char *)GDALGetPaletteInterpretationName(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_DecToDMS(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 = (int) 2 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo|o:osgeo::DecToDMS double char const * ?int? ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DecToDMS" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecToDMS" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (objc > 3) {
    ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DecToDMS" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  {
    CPLErrorReset();
    result = (char *)GDALDecToDMS(arg1,(char const *)arg2,arg3);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_PackedDMSToDec(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::PackedDMSToDec double ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PackedDMSToDec" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    CPLErrorReset();
    result = (double)GDALPackedDMSToDec(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_DecToPackedDMS(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::DecToPackedDMS double ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DecToPackedDMS" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    CPLErrorReset();
    result = (double)GDALDecToPackedDMS(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ParseXMLString(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  CPLXMLNode *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::ParseXMLString char * ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParseXMLString" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    CPLErrorReset();
    result = (CPLXMLNode *)CPLParseXMLString(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  {
    /* %typemap(out) (CPLXMLNode*) */
    
    Tcl_Obj *out;
    CPLXMLNode *psXMLTree = result;
    int         bFakeRoot = FALSE;
    
    if( psXMLTree != NULL && psXMLTree->psNext != NULL )
    {
      CPLXMLNode *psFirst = psXMLTree;
      
      /* create a "pseudo" root if we have multiple elements */
      psXMLTree = CPLCreateXMLNode( NULL, CXT_Element, "" );
      psXMLTree->psChild = psFirst;
      bFakeRoot = TRUE;
    }
    
    out = XMLTreeToTclList( interp, psXMLTree );
    if ( !out ) SWIG_fail;
    
    if( bFakeRoot )
    {
      psXMLTree->psChild = NULL;
      CPLDestroyXMLNode( psXMLTree );
    }
    
    Tcl_SetObjResult(interp, out);
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    /* %typemap(ret) (CPLXMLNode*) */
    if ( result ) CPLDestroyXMLNode( result );
  }
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SerializeXMLTree(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CPLXMLNode *arg1 = (CPLXMLNode *) 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::SerializeXMLTree xmlnode ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    /* %typemap(tcl,in) (CPLXMLNode* xmlnode ) */
    arg1 = TclListToXMLTree( interp, objv[1] );
    if ( !arg1 ) SWIG_fail;
  }
  {
    CPLErrorReset();
    result = (char *)CPLSerializeXMLTree(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  {
    /* %typemap(freearg) (CPLXMLNode *xmlnode) */
    if ( arg1 ) CPLDestroyXMLNode( arg1 );
  }
  return TCL_OK;
fail:
  {
    /* %typemap(freearg) (CPLXMLNode *xmlnode) */
    if ( arg1 ) CPLDestroyXMLNode( arg1 );
  }
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetDriverCount(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,":osgeo::GetDriverCount ") == TCL_ERROR) SWIG_fail;
  {
    CPLErrorReset();
    result = (int)GetDriverCount();
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetDriverByName(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  GDALDriverShadow *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::GetDriverByName name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetDriverByName" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    CPLErrorReset();
    result = (GDALDriverShadow *)GetDriverByName((char const *)arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_GDALDriverShadow,0));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetDriver(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  GDALDriverShadow *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:osgeo::GetDriver i ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetDriver" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    CPLErrorReset();
    result = (GDALDriverShadow *)GetDriver(arg1);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_GDALDriverShadow,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Open(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  GDALAccess arg2 = (GDALAccess) GA_ReadOnly ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  GDALDatasetShadow *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o|o:osgeo::Open name ?eAccess? ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Open" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  if (objc > 2) {
    ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Open" "', argument " "2"" of type '" "GDALAccess""'");
    } 
    arg2 = static_cast< GDALAccess >(val2);
  }
  {
    CPLErrorReset();
    result = (GDALDatasetShadow *)Open((char const *)arg1,arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_GDALDatasetShadow,0));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_OpenShared(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  GDALAccess arg2 = (GDALAccess) GA_ReadOnly ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  GDALDatasetShadow *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o|o:osgeo::OpenShared name ?eAccess? ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenShared" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  if (objc > 2) {
    ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OpenShared" "', argument " "2"" of type '" "GDALAccess""'");
    } 
    arg2 = static_cast< GDALAccess >(val2);
  }
  {
    CPLErrorReset();
    result = (GDALDatasetShadow *)OpenShared((char const *)arg1,arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_GDALDatasetShadow,0));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IdentifyDriver(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char **arg2 = (char **) NULL ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  GDALDriverShadow *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o|o:osgeo::IdentifyDriver pszDatasource ?papszSiblings? ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IdentifyDriver" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  if (objc > 2) {
    {
      /* %typemap(in) char **options */
      int size;
      if (Tcl_ListObjLength(interp, objv[2], &size) != TCL_OK) {
        /* Error msg in interp result */
        SWIG_fail;
      }
      if ( !size ) {
        Tcl_SetResult(interp, (char*) "Input list mustn't be empty", TCL_STATIC);
        SWIG_fail;
      }
      
      for (int i = 0; i < size; i++) {
        Tcl_Obj **o = NULL;
        /* The reference count for the list element is not incremented with the following */
        if (Tcl_ListObjIndex(interp, objv[2], i, o) != TCL_OK) {
          /* Error msg in interp result */
          SWIG_fail;
        }
        char *pszItem = Tcl_GetString(*o);
        arg2 = CSLAddString( arg2, pszItem );
      }
    }
  }
  {
    CPLErrorReset();
    result = (GDALDriverShadow *)IdentifyDriver((char const *)arg1,arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_GDALDriverShadow,0));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg2 );
  }
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg2 );
  }
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GeneralCmdLineProcessor(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char **arg1 = (char **) 0 ;
  int arg2 = (int) 0 ;
  int val2 ;
  int ecode2 = 0 ;
  char **result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o|o:osgeo::GeneralCmdLineProcessor papszArgv ?nOptions? ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  {
    /* %typemap(in) char **options */
    int size;
    if (Tcl_ListObjLength(interp, objv[1], &size) != TCL_OK) {
      /* Error msg in interp result */
      SWIG_fail;
    }
    if ( !size ) {
      Tcl_SetResult(interp, (char*) "Input list mustn't be empty", TCL_STATIC);
      SWIG_fail;
    }
    
    for (int i = 0; i < size; i++) {
      Tcl_Obj **o = NULL;
      /* The reference count for the list element is not incremented with the following */
      if (Tcl_ListObjIndex(interp, objv[1], i, o) != TCL_OK) {
        /* Error msg in interp result */
        SWIG_fail;
      }
      char *pszItem = Tcl_GetString(*o);
      arg1 = CSLAddString( arg1, pszItem );
    }
  }
  if (objc > 2) {
    ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GeneralCmdLineProcessor" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  {
    CPLErrorReset();
    result = (char **)GeneralCmdLineProcessor(arg1,arg2);
    CPLErr eclass = CPLGetLastErrorType();
    if ( eclass == CE_Failure || eclass == CE_Fatal ) {
      SWIG_exception( SWIG_RuntimeError, CPLGetLastErrorMsg() );
      
    }
    
    
    
    
    
    
    
    
    
    
    
  }
  {
    /* %typemap(out) char **options -> ( string ) */
    char **stringarray = result;
    if ( stringarray == NULL ) {
      Tcl_ResetResult(interp); /* NONE = Empty string */
    } else {
      int len = CSLCount( stringarray );
      Tcl_Obj *out = Tcl_NewListObj(0, NULL);
      for ( int i = 0; i < len; ++i ) {
        Tcl_Obj *o = Tcl_NewStringObj( stringarray[i], -1 );
        if (Tcl_ListObjAppendElement(interp, out, o) != TCL_OK) {
          Tcl_DecrRefCount(o);
          Tcl_DecrRefCount(out);
          /* Error msg in interp result */
          SWIG_fail;
        }
      }
      Tcl_SetObjResult(interp, out);
    }
  }
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg1 );
  }
  return TCL_OK;
fail:
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg1 );
  }
  return TCL_ERROR;
}



static swig_command_info swig_commands[] = {
    { SWIG_prefix "DataTypeUnion", (swig_wrapper_func) _wrap_DataTypeUnion, NULL},
    { SWIG_prefix "UseExceptions", (swig_wrapper_func) _wrap_UseExceptions, NULL},
    { SWIG_prefix "DontUseExceptions", (swig_wrapper_func) _wrap_DontUseExceptions, NULL},
    { SWIG_prefix "Debug", (swig_wrapper_func) _wrap_Debug, NULL},
    { SWIG_prefix "Error", (swig_wrapper_func) _wrap_Error, NULL},
    { SWIG_prefix "PushErrorHandler", (swig_wrapper_func) _wrap_PushErrorHandler, NULL},
    { SWIG_prefix "PopErrorHandler", (swig_wrapper_func) _wrap_PopErrorHandler, NULL},
    { SWIG_prefix "ErrorReset", (swig_wrapper_func) _wrap_ErrorReset, NULL},
    { SWIG_prefix "EscapeString", (swig_wrapper_func) _wrap_EscapeString, NULL},
    { SWIG_prefix "GetLastErrorNo", (swig_wrapper_func) _wrap_GetLastErrorNo, NULL},
    { SWIG_prefix "GetLastErrorType", (swig_wrapper_func) _wrap_GetLastErrorType, NULL},
    { SWIG_prefix "GetLastErrorMsg", (swig_wrapper_func) _wrap_GetLastErrorMsg, NULL},
    { SWIG_prefix "PushFinderLocation", (swig_wrapper_func) _wrap_PushFinderLocation, NULL},
    { SWIG_prefix "PopFinderLocation", (swig_wrapper_func) _wrap_PopFinderLocation, NULL},
    { SWIG_prefix "FinderClean", (swig_wrapper_func) _wrap_FinderClean, NULL},
    { SWIG_prefix "FindFile", (swig_wrapper_func) _wrap_FindFile, NULL},
    { SWIG_prefix "ReadDir", (swig_wrapper_func) _wrap_ReadDir, NULL},
    { SWIG_prefix "SetConfigOption", (swig_wrapper_func) _wrap_SetConfigOption, NULL},
    { SWIG_prefix "GetConfigOption", (swig_wrapper_func) _wrap_GetConfigOption, NULL},
    { SWIG_prefix "CPLBinaryToHex", (swig_wrapper_func) _wrap_CPLBinaryToHex, NULL},
    { SWIG_prefix "CPLHexToBinary", (swig_wrapper_func) _wrap_CPLHexToBinary, NULL},
    { SWIG_prefix "MajorObject_GetDescription", (swig_wrapper_func) _wrap_MajorObject_GetDescription, NULL},
    { SWIG_prefix "MajorObject_SetDescription", (swig_wrapper_func) _wrap_MajorObject_SetDescription, NULL},
    { SWIG_prefix "MajorObject_GetMetadata_Dict", (swig_wrapper_func) _wrap_MajorObject_GetMetadata_Dict, NULL},
    { SWIG_prefix "MajorObject_GetMetadata_List", (swig_wrapper_func) _wrap_MajorObject_GetMetadata_List, NULL},
    { SWIG_prefix "MajorObject_SetMetadata", (swig_wrapper_func) _wrap_MajorObject_SetMetadata, NULL},
    { SWIG_prefix "MajorObject_GetMetadataItem", (swig_wrapper_func) _wrap_MajorObject_GetMetadataItem, NULL},
    { SWIG_prefix "MajorObject_SetMetadataItem", (swig_wrapper_func) _wrap_MajorObject_SetMetadataItem, NULL},
    { SWIG_prefix "MajorObject", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_GDALMajorObjectShadow},
    { SWIG_prefix "Driver_ShortName_get", (swig_wrapper_func) _wrap_Driver_ShortName_get, NULL},
    { SWIG_prefix "Driver_LongName_get", (swig_wrapper_func) _wrap_Driver_LongName_get, NULL},
    { SWIG_prefix "Driver_HelpTopic_get", (swig_wrapper_func) _wrap_Driver_HelpTopic_get, NULL},
    { SWIG_prefix "Driver_Create", (swig_wrapper_func) _wrap_Driver_Create, NULL},
    { SWIG_prefix "Driver_CreateCopy", (swig_wrapper_func) _wrap_Driver_CreateCopy, NULL},
    { SWIG_prefix "Driver_Delete", (swig_wrapper_func) _wrap_Driver_Delete, NULL},
    { SWIG_prefix "Driver_Rename", (swig_wrapper_func) _wrap_Driver_Rename, NULL},
    { SWIG_prefix "Driver_Register", (swig_wrapper_func) _wrap_Driver_Register, NULL},
    { SWIG_prefix "Driver_Deregister", (swig_wrapper_func) _wrap_Driver_Deregister, NULL},
    { SWIG_prefix "Driver", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_GDALDriverShadow},
    { SWIG_prefix "ColorEntry_c1_set", (swig_wrapper_func) _wrap_ColorEntry_c1_set, NULL},
    { SWIG_prefix "ColorEntry_c1_get", (swig_wrapper_func) _wrap_ColorEntry_c1_get, NULL},
    { SWIG_prefix "ColorEntry_c2_set", (swig_wrapper_func) _wrap_ColorEntry_c2_set, NULL},
    { SWIG_prefix "ColorEntry_c2_get", (swig_wrapper_func) _wrap_ColorEntry_c2_get, NULL},
    { SWIG_prefix "ColorEntry_c3_set", (swig_wrapper_func) _wrap_ColorEntry_c3_set, NULL},
    { SWIG_prefix "ColorEntry_c3_get", (swig_wrapper_func) _wrap_ColorEntry_c3_get, NULL},
    { SWIG_prefix "ColorEntry_c4_set", (swig_wrapper_func) _wrap_ColorEntry_c4_set, NULL},
    { SWIG_prefix "ColorEntry_c4_get", (swig_wrapper_func) _wrap_ColorEntry_c4_get, NULL},
    { SWIG_prefix "new_ColorEntry", (swig_wrapper_func) _wrap_new_ColorEntry, NULL},
    { SWIG_prefix "delete_ColorEntry", (swig_wrapper_func) _wrap_delete_ColorEntry, NULL},
    { SWIG_prefix "ColorEntry", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_GDALColorEntry},
    { SWIG_prefix "GCP_GCPX_set", (swig_wrapper_func) _wrap_GCP_GCPX_set, NULL},
    { SWIG_prefix "GCP_GCPX_get", (swig_wrapper_func) _wrap_GCP_GCPX_get, NULL},
    { SWIG_prefix "GCP_GCPY_set", (swig_wrapper_func) _wrap_GCP_GCPY_set, NULL},
    { SWIG_prefix "GCP_GCPY_get", (swig_wrapper_func) _wrap_GCP_GCPY_get, NULL},
    { SWIG_prefix "GCP_GCPZ_set", (swig_wrapper_func) _wrap_GCP_GCPZ_set, NULL},
    { SWIG_prefix "GCP_GCPZ_get", (swig_wrapper_func) _wrap_GCP_GCPZ_get, NULL},
    { SWIG_prefix "GCP_GCPPixel_set", (swig_wrapper_func) _wrap_GCP_GCPPixel_set, NULL},
    { SWIG_prefix "GCP_GCPPixel_get", (swig_wrapper_func) _wrap_GCP_GCPPixel_get, NULL},
    { SWIG_prefix "GCP_GCPLine_set", (swig_wrapper_func) _wrap_GCP_GCPLine_set, NULL},
    { SWIG_prefix "GCP_GCPLine_get", (swig_wrapper_func) _wrap_GCP_GCPLine_get, NULL},
    { SWIG_prefix "GCP_Info_set", (swig_wrapper_func) _wrap_GCP_Info_set, NULL},
    { SWIG_prefix "GCP_Info_get", (swig_wrapper_func) _wrap_GCP_Info_get, NULL},
    { SWIG_prefix "GCP_Id_set", (swig_wrapper_func) _wrap_GCP_Id_set, NULL},
    { SWIG_prefix "GCP_Id_get", (swig_wrapper_func) _wrap_GCP_Id_get, NULL},
    { SWIG_prefix "new_GCP", (swig_wrapper_func) _wrap_new_GCP, NULL},
    { SWIG_prefix "delete_GCP", (swig_wrapper_func) _wrap_delete_GCP, NULL},
    { SWIG_prefix "GCP", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_GDAL_GCP},
    { SWIG_prefix "GDAL_GCP_GCPX_get", (swig_wrapper_func) _wrap_GDAL_GCP_GCPX_get, NULL},
    { SWIG_prefix "GDAL_GCP_GCPX_set", (swig_wrapper_func) _wrap_GDAL_GCP_GCPX_set, NULL},
    { SWIG_prefix "GDAL_GCP_GCPY_get", (swig_wrapper_func) _wrap_GDAL_GCP_GCPY_get, NULL},
    { SWIG_prefix "GDAL_GCP_GCPY_set", (swig_wrapper_func) _wrap_GDAL_GCP_GCPY_set, NULL},
    { SWIG_prefix "GDAL_GCP_GCPZ_get", (swig_wrapper_func) _wrap_GDAL_GCP_GCPZ_get, NULL},
    { SWIG_prefix "GDAL_GCP_GCPZ_set", (swig_wrapper_func) _wrap_GDAL_GCP_GCPZ_set, NULL},
    { SWIG_prefix "GDAL_GCP_GCPPixel_get", (swig_wrapper_func) _wrap_GDAL_GCP_GCPPixel_get, NULL},
    { SWIG_prefix "GDAL_GCP_GCPPixel_set", (swig_wrapper_func) _wrap_GDAL_GCP_GCPPixel_set, NULL},
    { SWIG_prefix "GDAL_GCP_GCPLine_get", (swig_wrapper_func) _wrap_GDAL_GCP_GCPLine_get, NULL},
    { SWIG_prefix "GDAL_GCP_GCPLine_set", (swig_wrapper_func) _wrap_GDAL_GCP_GCPLine_set, NULL},
    { SWIG_prefix "GDAL_GCP_Info_get", (swig_wrapper_func) _wrap_GDAL_GCP_Info_get, NULL},
    { SWIG_prefix "GDAL_GCP_Info_set", (swig_wrapper_func) _wrap_GDAL_GCP_Info_set, NULL},
    { SWIG_prefix "GDAL_GCP_Id_get", (swig_wrapper_func) _wrap_GDAL_GCP_Id_get, NULL},
    { SWIG_prefix "GDAL_GCP_Id_set", (swig_wrapper_func) _wrap_GDAL_GCP_Id_set, NULL},
    { SWIG_prefix "GDAL_GCP_get_GCPX", (swig_wrapper_func) _wrap_GDAL_GCP_get_GCPX, NULL},
    { SWIG_prefix "GDAL_GCP_set_GCPX", (swig_wrapper_func) _wrap_GDAL_GCP_set_GCPX, NULL},
    { SWIG_prefix "GDAL_GCP_get_GCPY", (swig_wrapper_func) _wrap_GDAL_GCP_get_GCPY, NULL},
    { SWIG_prefix "GDAL_GCP_set_GCPY", (swig_wrapper_func) _wrap_GDAL_GCP_set_GCPY, NULL},
    { SWIG_prefix "GDAL_GCP_get_GCPZ", (swig_wrapper_func) _wrap_GDAL_GCP_get_GCPZ, NULL},
    { SWIG_prefix "GDAL_GCP_set_GCPZ", (swig_wrapper_func) _wrap_GDAL_GCP_set_GCPZ, NULL},
    { SWIG_prefix "GDAL_GCP_get_GCPPixel", (swig_wrapper_func) _wrap_GDAL_GCP_get_GCPPixel, NULL},
    { SWIG_prefix "GDAL_GCP_set_GCPPixel", (swig_wrapper_func) _wrap_GDAL_GCP_set_GCPPixel, NULL},
    { SWIG_prefix "GDAL_GCP_get_GCPLine", (swig_wrapper_func) _wrap_GDAL_GCP_get_GCPLine, NULL},
    { SWIG_prefix "GDAL_GCP_set_GCPLine", (swig_wrapper_func) _wrap_GDAL_GCP_set_GCPLine, NULL},
    { SWIG_prefix "GDAL_GCP_get_Info", (swig_wrapper_func) _wrap_GDAL_GCP_get_Info, NULL},
    { SWIG_prefix "GDAL_GCP_set_Info", (swig_wrapper_func) _wrap_GDAL_GCP_set_Info, NULL},
    { SWIG_prefix "GDAL_GCP_get_Id", (swig_wrapper_func) _wrap_GDAL_GCP_get_Id, NULL},
    { SWIG_prefix "GDAL_GCP_set_Id", (swig_wrapper_func) _wrap_GDAL_GCP_set_Id, NULL},
    { SWIG_prefix "GCPsToGeoTransform", (swig_wrapper_func) _wrap_GCPsToGeoTransform, NULL},
    { SWIG_prefix "Dataset_RasterXSize_get", (swig_wrapper_func) _wrap_Dataset_RasterXSize_get, NULL},
    { SWIG_prefix "Dataset_RasterYSize_get", (swig_wrapper_func) _wrap_Dataset_RasterYSize_get, NULL},
    { SWIG_prefix "Dataset_RasterCount_get", (swig_wrapper_func) _wrap_Dataset_RasterCount_get, NULL},
    { SWIG_prefix "delete_Dataset", (swig_wrapper_func) _wrap_delete_Dataset, NULL},
    { SWIG_prefix "Dataset_GetDriver", (swig_wrapper_func) _wrap_Dataset_GetDriver, NULL},
    { SWIG_prefix "Dataset_GetRasterBand", (swig_wrapper_func) _wrap_Dataset_GetRasterBand, NULL},
    { SWIG_prefix "Dataset_GetProjection", (swig_wrapper_func) _wrap_Dataset_GetProjection, NULL},
    { SWIG_prefix "Dataset_GetProjectionRef", (swig_wrapper_func) _wrap_Dataset_GetProjectionRef, NULL},
    { SWIG_prefix "Dataset_SetProjection", (swig_wrapper_func) _wrap_Dataset_SetProjection, NULL},
    { SWIG_prefix "Dataset_GetGeoTransform", (swig_wrapper_func) _wrap_Dataset_GetGeoTransform, NULL},
    { SWIG_prefix "Dataset_SetGeoTransform", (swig_wrapper_func) _wrap_Dataset_SetGeoTransform, NULL},
    { SWIG_prefix "Dataset_BuildOverviews", (swig_wrapper_func) _wrap_Dataset_BuildOverviews, NULL},
    { SWIG_prefix "Dataset_GetGCPCount", (swig_wrapper_func) _wrap_Dataset_GetGCPCount, NULL},
    { SWIG_prefix "Dataset_GetGCPProjection", (swig_wrapper_func) _wrap_Dataset_GetGCPProjection, NULL},
    { SWIG_prefix "Dataset_GetGCPs", (swig_wrapper_func) _wrap_Dataset_GetGCPs, NULL},
    { SWIG_prefix "Dataset_SetGCPs", (swig_wrapper_func) _wrap_Dataset_SetGCPs, NULL},
    { SWIG_prefix "Dataset_FlushCache", (swig_wrapper_func) _wrap_Dataset_FlushCache, NULL},
    { SWIG_prefix "Dataset_AddBand", (swig_wrapper_func) _wrap_Dataset_AddBand, NULL},
    { SWIG_prefix "Dataset_CreateMaskBand", (swig_wrapper_func) _wrap_Dataset_CreateMaskBand, NULL},
    { SWIG_prefix "Dataset_GetFileList", (swig_wrapper_func) _wrap_Dataset_GetFileList, NULL},
    { SWIG_prefix "Dataset_WriteRaster", (swig_wrapper_func) _wrap_Dataset_WriteRaster, NULL},
    { SWIG_prefix "Dataset_ReadRaster", (swig_wrapper_func) _wrap_Dataset_ReadRaster, NULL},
    { SWIG_prefix "Dataset", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_GDALDatasetShadow},
    { SWIG_prefix "Band_XSize_get", (swig_wrapper_func) _wrap_Band_XSize_get, NULL},
    { SWIG_prefix "Band_YSize_get", (swig_wrapper_func) _wrap_Band_YSize_get, NULL},
    { SWIG_prefix "Band_DataType_get", (swig_wrapper_func) _wrap_Band_DataType_get, NULL},
    { SWIG_prefix "Band_GetBlockSize", (swig_wrapper_func) _wrap_Band_GetBlockSize, NULL},
    { SWIG_prefix "Band_GetRasterColorInterpretation", (swig_wrapper_func) _wrap_Band_GetRasterColorInterpretation, NULL},
    { SWIG_prefix "Band_SetRasterColorInterpretation", (swig_wrapper_func) _wrap_Band_SetRasterColorInterpretation, NULL},
    { SWIG_prefix "Band_GetNoDataValue", (swig_wrapper_func) _wrap_Band_GetNoDataValue, NULL},
    { SWIG_prefix "Band_SetNoDataValue", (swig_wrapper_func) _wrap_Band_SetNoDataValue, NULL},
    { SWIG_prefix "Band_GetRasterCategoryNames", (swig_wrapper_func) _wrap_Band_GetRasterCategoryNames, NULL},
    { SWIG_prefix "Band_SetRasterCategoryNames", (swig_wrapper_func) _wrap_Band_SetRasterCategoryNames, NULL},
    { SWIG_prefix "Band_GetMinimum", (swig_wrapper_func) _wrap_Band_GetMinimum, NULL},
    { SWIG_prefix "Band_GetMaximum", (swig_wrapper_func) _wrap_Band_GetMaximum, NULL},
    { SWIG_prefix "Band_GetOffset", (swig_wrapper_func) _wrap_Band_GetOffset, NULL},
    { SWIG_prefix "Band_GetScale", (swig_wrapper_func) _wrap_Band_GetScale, NULL},
    { SWIG_prefix "Band_GetStatistics", (swig_wrapper_func) _wrap_Band_GetStatistics, NULL},
    { SWIG_prefix "Band_SetStatistics", (swig_wrapper_func) _wrap_Band_SetStatistics, NULL},
    { SWIG_prefix "Band_GetOverviewCount", (swig_wrapper_func) _wrap_Band_GetOverviewCount, NULL},
    { SWIG_prefix "Band_GetOverview", (swig_wrapper_func) _wrap_Band_GetOverview, NULL},
    { SWIG_prefix "Band_Checksum", (swig_wrapper_func) _wrap_Band_Checksum, NULL},
    { SWIG_prefix "Band_ComputeRasterMinMax", (swig_wrapper_func) _wrap_Band_ComputeRasterMinMax, NULL},
    { SWIG_prefix "Band_ComputeBandStats", (swig_wrapper_func) _wrap_Band_ComputeBandStats, NULL},
    { SWIG_prefix "Band_Fill", (swig_wrapper_func) _wrap_Band_Fill, NULL},
    { SWIG_prefix "Band_ReadRaster", (swig_wrapper_func) _wrap_Band_ReadRaster, NULL},
    { SWIG_prefix "Band_WriteRaster", (swig_wrapper_func) _wrap_Band_WriteRaster, NULL},
    { SWIG_prefix "Band_FlushCache", (swig_wrapper_func) _wrap_Band_FlushCache, NULL},
    { SWIG_prefix "Band_GetRasterColorTable", (swig_wrapper_func) _wrap_Band_GetRasterColorTable, NULL},
    { SWIG_prefix "Band_GetColorTable", (swig_wrapper_func) _wrap_Band_GetColorTable, NULL},
    { SWIG_prefix "Band_SetRasterColorTable", (swig_wrapper_func) _wrap_Band_SetRasterColorTable, NULL},
    { SWIG_prefix "Band_SetColorTable", (swig_wrapper_func) _wrap_Band_SetColorTable, NULL},
    { SWIG_prefix "Band_GetDefaultRAT", (swig_wrapper_func) _wrap_Band_GetDefaultRAT, NULL},
    { SWIG_prefix "Band_SetDefaultRAT", (swig_wrapper_func) _wrap_Band_SetDefaultRAT, NULL},
    { SWIG_prefix "Band_GetMaskBand", (swig_wrapper_func) _wrap_Band_GetMaskBand, NULL},
    { SWIG_prefix "Band_GetMaskFlags", (swig_wrapper_func) _wrap_Band_GetMaskFlags, NULL},
    { SWIG_prefix "Band_CreateMaskBand", (swig_wrapper_func) _wrap_Band_CreateMaskBand, NULL},
    { SWIG_prefix "Band_GetHistogram", (swig_wrapper_func) _wrap_Band_GetHistogram, NULL},
    { SWIG_prefix "Band_GetDefaultHistogram", (swig_wrapper_func) _wrap_Band_GetDefaultHistogram, NULL},
    { SWIG_prefix "Band_SetDefaultHistogram", (swig_wrapper_func) _wrap_Band_SetDefaultHistogram, NULL},
    { SWIG_prefix "Band", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_GDALRasterBandShadow},
    { SWIG_prefix "new_ColorTable", (swig_wrapper_func) _wrap_new_ColorTable, NULL},
    { SWIG_prefix "delete_ColorTable", (swig_wrapper_func) _wrap_delete_ColorTable, NULL},
    { SWIG_prefix "ColorTable_Clone", (swig_wrapper_func) _wrap_ColorTable_Clone, NULL},
    { SWIG_prefix "ColorTable_GetPaletteInterpretation", (swig_wrapper_func) _wrap_ColorTable_GetPaletteInterpretation, NULL},
    { SWIG_prefix "ColorTable_GetCount", (swig_wrapper_func) _wrap_ColorTable_GetCount, NULL},
    { SWIG_prefix "ColorTable_GetColorEntry", (swig_wrapper_func) _wrap_ColorTable_GetColorEntry, NULL},
    { SWIG_prefix "ColorTable_GetColorEntryAsRGB", (swig_wrapper_func) _wrap_ColorTable_GetColorEntryAsRGB, NULL},
    { SWIG_prefix "ColorTable_SetColorEntry", (swig_wrapper_func) _wrap_ColorTable_SetColorEntry, NULL},
    { SWIG_prefix "ColorTable_CreateColorRamp", (swig_wrapper_func) _wrap_ColorTable_CreateColorRamp, NULL},
    { SWIG_prefix "ColorTable", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_GDALColorTableShadow},
    { SWIG_prefix "new_RasterAttributeTable", (swig_wrapper_func) _wrap_new_RasterAttributeTable, NULL},
    { SWIG_prefix "delete_RasterAttributeTable", (swig_wrapper_func) _wrap_delete_RasterAttributeTable, NULL},
    { SWIG_prefix "RasterAttributeTable_Clone", (swig_wrapper_func) _wrap_RasterAttributeTable_Clone, NULL},
    { SWIG_prefix "RasterAttributeTable_GetColumnCount", (swig_wrapper_func) _wrap_RasterAttributeTable_GetColumnCount, NULL},
    { SWIG_prefix "RasterAttributeTable_GetNameOfCol", (swig_wrapper_func) _wrap_RasterAttributeTable_GetNameOfCol, NULL},
    { SWIG_prefix "RasterAttributeTable_GetUsageOfCol", (swig_wrapper_func) _wrap_RasterAttributeTable_GetUsageOfCol, NULL},
    { SWIG_prefix "RasterAttributeTable_GetTypeOfCol", (swig_wrapper_func) _wrap_RasterAttributeTable_GetTypeOfCol, NULL},
    { SWIG_prefix "RasterAttributeTable_GetColOfUsage", (swig_wrapper_func) _wrap_RasterAttributeTable_GetColOfUsage, NULL},
    { SWIG_prefix "RasterAttributeTable_GetRowCount", (swig_wrapper_func) _wrap_RasterAttributeTable_GetRowCount, NULL},
    { SWIG_prefix "RasterAttributeTable_GetValueAsString", (swig_wrapper_func) _wrap_RasterAttributeTable_GetValueAsString, NULL},
    { SWIG_prefix "RasterAttributeTable_GetValueAsInt", (swig_wrapper_func) _wrap_RasterAttributeTable_GetValueAsInt, NULL},
    { SWIG_prefix "RasterAttributeTable_GetValueAsDouble", (swig_wrapper_func) _wrap_RasterAttributeTable_GetValueAsDouble, NULL},
    { SWIG_prefix "RasterAttributeTable_SetValueAsString", (swig_wrapper_func) _wrap_RasterAttributeTable_SetValueAsString, NULL},
    { SWIG_prefix "RasterAttributeTable_SetValueAsInt", (swig_wrapper_func) _wrap_RasterAttributeTable_SetValueAsInt, NULL},
    { SWIG_prefix "RasterAttributeTable_SetValueAsDouble", (swig_wrapper_func) _wrap_RasterAttributeTable_SetValueAsDouble, NULL},
    { SWIG_prefix "RasterAttributeTable_SetRowCount", (swig_wrapper_func) _wrap_RasterAttributeTable_SetRowCount, NULL},
    { SWIG_prefix "RasterAttributeTable_CreateColumn", (swig_wrapper_func) _wrap_RasterAttributeTable_CreateColumn, NULL},
    { SWIG_prefix "RasterAttributeTable_GetRowOfValue", (swig_wrapper_func) _wrap_RasterAttributeTable_GetRowOfValue, NULL},
    { SWIG_prefix "RasterAttributeTable", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_GDALRasterAttributeTableShadow},
    { SWIG_prefix "TermProgress_nocb", (swig_wrapper_func) _wrap_TermProgress_nocb, NULL},
    { SWIG_prefix "ComputeMedianCutPCT", (swig_wrapper_func) _wrap_ComputeMedianCutPCT, NULL},
    { SWIG_prefix "DitherRGB2PCT", (swig_wrapper_func) _wrap_DitherRGB2PCT, NULL},
    { SWIG_prefix "ReprojectImage", (swig_wrapper_func) _wrap_ReprojectImage, NULL},
    { SWIG_prefix "ComputeProximity", (swig_wrapper_func) _wrap_ComputeProximity, NULL},
    { SWIG_prefix "RasterizeLayer", (swig_wrapper_func) _wrap_RasterizeLayer, NULL},
    { SWIG_prefix "Polygonize", (swig_wrapper_func) _wrap_Polygonize, NULL},
    { SWIG_prefix "SieveFilter", (swig_wrapper_func) _wrap_SieveFilter, NULL},
    { SWIG_prefix "RegenerateOverviews", (swig_wrapper_func) _wrap_RegenerateOverviews, NULL},
    { SWIG_prefix "RegenerateOverview", (swig_wrapper_func) _wrap_RegenerateOverview, NULL},
    { SWIG_prefix "AutoCreateWarpedVRT", (swig_wrapper_func) _wrap_AutoCreateWarpedVRT, NULL},
    { SWIG_prefix "new_Transformer", (swig_wrapper_func) _wrap_new_Transformer, NULL},
    { SWIG_prefix "delete_Transformer", (swig_wrapper_func) _wrap_delete_Transformer, NULL},
    { SWIG_prefix "Transformer_TransformPoint", (swig_wrapper_func) _wrap_Transformer_TransformPoint, NULL},
    { SWIG_prefix "Transformer_TransformPoints", (swig_wrapper_func) _wrap_Transformer_TransformPoints, NULL},
    { SWIG_prefix "Transformer", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_GDALTransformerInfoShadow},
    { SWIG_prefix "VersionInfo", (swig_wrapper_func) _wrap_VersionInfo, NULL},
    { SWIG_prefix "AllRegister", (swig_wrapper_func) _wrap_AllRegister, NULL},
    { SWIG_prefix "GDALDestroyDriverManager", (swig_wrapper_func) _wrap_GDALDestroyDriverManager, NULL},
    { SWIG_prefix "GetCacheMax", (swig_wrapper_func) _wrap_GetCacheMax, NULL},
    { SWIG_prefix "SetCacheMax", (swig_wrapper_func) _wrap_SetCacheMax, NULL},
    { SWIG_prefix "GetCacheUsed", (swig_wrapper_func) _wrap_GetCacheUsed, NULL},
    { SWIG_prefix "GetDataTypeSize", (swig_wrapper_func) _wrap_GetDataTypeSize, NULL},
    { SWIG_prefix "DataTypeIsComplex", (swig_wrapper_func) _wrap_DataTypeIsComplex, NULL},
    { SWIG_prefix "GetDataTypeName", (swig_wrapper_func) _wrap_GetDataTypeName, NULL},
    { SWIG_prefix "GetDataTypeByName", (swig_wrapper_func) _wrap_GetDataTypeByName, NULL},
    { SWIG_prefix "GetColorInterpretationName", (swig_wrapper_func) _wrap_GetColorInterpretationName, NULL},
    { SWIG_prefix "GetPaletteInterpretationName", (swig_wrapper_func) _wrap_GetPaletteInterpretationName, NULL},
    { SWIG_prefix "DecToDMS", (swig_wrapper_func) _wrap_DecToDMS, NULL},
    { SWIG_prefix "PackedDMSToDec", (swig_wrapper_func) _wrap_PackedDMSToDec, NULL},
    { SWIG_prefix "DecToPackedDMS", (swig_wrapper_func) _wrap_DecToPackedDMS, NULL},
    { SWIG_prefix "ParseXMLString", (swig_wrapper_func) _wrap_ParseXMLString, NULL},
    { SWIG_prefix "SerializeXMLTree", (swig_wrapper_func) _wrap_SerializeXMLTree, NULL},
    { SWIG_prefix "GetDriverCount", (swig_wrapper_func) _wrap_GetDriverCount, NULL},
    { SWIG_prefix "GetDriverByName", (swig_wrapper_func) _wrap_GetDriverByName, NULL},
    { SWIG_prefix "GetDriver", (swig_wrapper_func) _wrap_GetDriver, NULL},
    { SWIG_prefix "Open", (swig_wrapper_func) _wrap_Open, NULL},
    { SWIG_prefix "OpenShared", (swig_wrapper_func) _wrap_OpenShared, NULL},
    { SWIG_prefix "IdentifyDriver", (swig_wrapper_func) _wrap_IdentifyDriver, NULL},
    { SWIG_prefix "GeneralCmdLineProcessor", (swig_wrapper_func) _wrap_GeneralCmdLineProcessor, NULL},
    {0, 0, 0}
};

static swig_var_info swig_variables[] = {
    {0,0,0,0}
};

static swig_const_info swig_constants[] = {
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_GDALDriverShadowTo_p_GDALMajorObjectShadow(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GDALMajorObjectShadow *)  ((GDALDriverShadow *) x));
}
static void *_p_GDALDatasetShadowTo_p_GDALMajorObjectShadow(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GDALMajorObjectShadow *)  ((GDALDatasetShadow *) x));
}
static void *_p_GDALRasterBandShadowTo_p_GDALMajorObjectShadow(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GDALMajorObjectShadow *)  ((GDALRasterBandShadow *) x));
}
static swig_type_info _swigt__p_CPLErrorHandler = {"_p_CPLErrorHandler", "CPLErrorHandler *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CPLXMLNode = {"_p_CPLXMLNode", "CPLXMLNode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GByte = {"_p_GByte", "GByte *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GDALColorEntry = {"_p_GDALColorEntry", "GDALColorEntry *", 0, 0, (void*)&_wrap_class_GDALColorEntry, 0};
static swig_type_info _swigt__p_GDALColorTableShadow = {"_p_GDALColorTableShadow", "GDALColorTableShadow *", 0, 0, (void*)&_wrap_class_GDALColorTableShadow, 0};
static swig_type_info _swigt__p_GDALDatasetShadow = {"_p_GDALDatasetShadow", "GDALDatasetShadow *", 0, 0, (void*)&_wrap_class_GDALDatasetShadow, 0};
static swig_type_info _swigt__p_GDALDriverShadow = {"_p_GDALDriverShadow", "GDALDriverShadow *", 0, 0, (void*)&_wrap_class_GDALDriverShadow, 0};
static swig_type_info _swigt__p_GDALMajorObjectShadow = {"_p_GDALMajorObjectShadow", "GDALMajorObjectShadow *", 0, 0, (void*)&_wrap_class_GDALMajorObjectShadow, 0};
static swig_type_info _swigt__p_GDALProgressFunc = {"_p_GDALProgressFunc", "GDALProgressFunc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GDALRasterAttributeTableShadow = {"_p_GDALRasterAttributeTableShadow", "GDALRasterAttributeTableShadow *", 0, 0, (void*)&_wrap_class_GDALRasterAttributeTableShadow, 0};
static swig_type_info _swigt__p_GDALRasterBandShadow = {"_p_GDALRasterBandShadow", "GDALRasterBandShadow *", 0, 0, (void*)&_wrap_class_GDALRasterBandShadow, 0};
static swig_type_info _swigt__p_GDALTransformerInfoShadow = {"_p_GDALTransformerInfoShadow", "GDALTransformerInfoShadow *", 0, 0, (void*)&_wrap_class_GDALTransformerInfoShadow, 0};
static swig_type_info _swigt__p_GDAL_GCP = {"_p_GDAL_GCP", "GDAL_GCP *", 0, 0, (void*)&_wrap_class_GDAL_GCP, 0};
static swig_type_info _swigt__p_OGRLayerShadow = {"_p_OGRLayerShadow", "OGRLayerShadow *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_double_p_q_const__char_p_void__int = {"_p_f_double_p_q_const__char_p_void__int", "int (*)(double,char const *,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "CPLErr *|GDALRATFieldType *|int *|GDALColorInterp *|GDALAccess *|GDALPaletteInterp *|GDALDataType *|GDALRATFieldUsage *|GDALResampleAlg *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_GDALRasterBandShadow = {"_p_p_GDALRasterBandShadow", "GDALRasterBandShadow **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_GDAL_GCP = {"_p_p_GDAL_GCP", "GDAL_GCP **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "char **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_int = {"_p_p_int", "int **", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_CPLErrorHandler,
  &_swigt__p_CPLXMLNode,
  &_swigt__p_GByte,
  &_swigt__p_GDALColorEntry,
  &_swigt__p_GDALColorTableShadow,
  &_swigt__p_GDALDatasetShadow,
  &_swigt__p_GDALDriverShadow,
  &_swigt__p_GDALMajorObjectShadow,
  &_swigt__p_GDALProgressFunc,
  &_swigt__p_GDALRasterAttributeTableShadow,
  &_swigt__p_GDALRasterBandShadow,
  &_swigt__p_GDALTransformerInfoShadow,
  &_swigt__p_GDAL_GCP,
  &_swigt__p_OGRLayerShadow,
  &_swigt__p_char,
  &_swigt__p_double,
  &_swigt__p_f_double_p_q_const__char_p_void__int,
  &_swigt__p_int,
  &_swigt__p_p_GDALRasterBandShadow,
  &_swigt__p_p_GDAL_GCP,
  &_swigt__p_p_char,
  &_swigt__p_p_int,
};

static swig_cast_info _swigc__p_CPLErrorHandler[] = {  {&_swigt__p_CPLErrorHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CPLXMLNode[] = {  {&_swigt__p_CPLXMLNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GByte[] = {  {&_swigt__p_GByte, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GDALColorEntry[] = {  {&_swigt__p_GDALColorEntry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GDALColorTableShadow[] = {  {&_swigt__p_GDALColorTableShadow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GDALDatasetShadow[] = {  {&_swigt__p_GDALDatasetShadow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GDALDriverShadow[] = {  {&_swigt__p_GDALDriverShadow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GDALMajorObjectShadow[] = {  {&_swigt__p_GDALMajorObjectShadow, 0, 0, 0},  {&_swigt__p_GDALDriverShadow, _p_GDALDriverShadowTo_p_GDALMajorObjectShadow, 0, 0},  {&_swigt__p_GDALDatasetShadow, _p_GDALDatasetShadowTo_p_GDALMajorObjectShadow, 0, 0},  {&_swigt__p_GDALRasterBandShadow, _p_GDALRasterBandShadowTo_p_GDALMajorObjectShadow, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GDALProgressFunc[] = {  {&_swigt__p_GDALProgressFunc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GDALRasterAttributeTableShadow[] = {  {&_swigt__p_GDALRasterAttributeTableShadow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GDALRasterBandShadow[] = {  {&_swigt__p_GDALRasterBandShadow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GDALTransformerInfoShadow[] = {  {&_swigt__p_GDALTransformerInfoShadow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GDAL_GCP[] = {  {&_swigt__p_GDAL_GCP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OGRLayerShadow[] = {  {&_swigt__p_OGRLayerShadow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_double_p_q_const__char_p_void__int[] = {  {&_swigt__p_f_double_p_q_const__char_p_void__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_GDALRasterBandShadow[] = {  {&_swigt__p_p_GDALRasterBandShadow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_GDAL_GCP[] = {  {&_swigt__p_p_GDAL_GCP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_int[] = {  {&_swigt__p_p_int, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_CPLErrorHandler,
  _swigc__p_CPLXMLNode,
  _swigc__p_GByte,
  _swigc__p_GDALColorEntry,
  _swigc__p_GDALColorTableShadow,
  _swigc__p_GDALDatasetShadow,
  _swigc__p_GDALDriverShadow,
  _swigc__p_GDALMajorObjectShadow,
  _swigc__p_GDALProgressFunc,
  _swigc__p_GDALRasterAttributeTableShadow,
  _swigc__p_GDALRasterBandShadow,
  _swigc__p_GDALTransformerInfoShadow,
  _swigc__p_GDAL_GCP,
  _swigc__p_OGRLayerShadow,
  _swigc__p_char,
  _swigc__p_double,
  _swigc__p_f_double_p_q_const__char_p_void__int,
  _swigc__p_int,
  _swigc__p_p_GDALRasterBandShadow,
  _swigc__p_p_GDAL_GCP,
  _swigc__p_p_char,
  _swigc__p_p_int,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  
  clientdata = clientdata;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpeters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif


#ifdef __cplusplus
extern "C" {
#endif
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  
  SWIGINTERN void
  SWIG_Tcl_InstallConstants(Tcl_Interp *interp, swig_const_info constants[]) {
    int i;
    Tcl_Obj *obj;
    
    if (!swigconstTableinit) {
      Tcl_InitHashTable(&swigconstTable, TCL_STRING_KEYS);
      swigconstTableinit = 1;
    }
    for (i = 0; constants[i].type; i++) {
      switch(constants[i].type) {
      case SWIG_TCL_POINTER:
        obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_TCL_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        SWIG_Tcl_SetConstantObj(interp, constants[i].name, obj);
      }
    }
  }
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

SWIGEXPORT int SWIG_init(Tcl_Interp *interp) {
  int i;
  if (interp == 0) return TCL_ERROR;
#ifdef USE_TCL_STUBS
  if (Tcl_InitStubs(interp, (char*)"8.1", 0) == NULL) {
    return TCL_ERROR;
  }
#endif  
  Tcl_PkgProvide(interp, (char*)SWIG_name, (char*)SWIG_version);
  
#ifdef SWIG_namespace
  Tcl_Eval(interp, "namespace eval " SWIG_namespace " { }");
#endif
  
  SWIG_InitializeModule((void *) interp);
  SWIG_PropagateClientData();
  
  for (i = 0; swig_commands[i].name; i++) {
    Tcl_CreateObjCommand(interp, (char *) swig_commands[i].name, (swig_wrapper_func) swig_commands[i].wrapper,
      swig_commands[i].clientdata, NULL);
  }
  for (i = 0; swig_variables[i].name; i++) {
    Tcl_SetVar(interp, (char *) swig_variables[i].name, (char *) "", TCL_GLOBAL_ONLY);
    Tcl_TraceVar(interp, (char *) swig_variables[i].name, TCL_TRACE_READS | TCL_GLOBAL_ONLY, 
      (Tcl_VarTraceProc *) swig_variables[i].get, (ClientData) swig_variables[i].addr);
    Tcl_TraceVar(interp, (char *) swig_variables[i].name, TCL_TRACE_WRITES | TCL_GLOBAL_ONLY, 
      (Tcl_VarTraceProc *) swig_variables[i].set, (ClientData) swig_variables[i].addr);
  }
  
  SWIG_Tcl_InstallConstants(interp, swig_constants);
  
  
  
  /* gdal_tcl.i %init code */
  if ( GDALGetDriverCount() == 0 ) {
    GDALAllRegister();
  }
  
  /* Setup exception handling */
  UseExceptions();
  
  SWIG_Tcl_SetConstantObj(interp, "osgeo::TermProgress", SWIG_NewFunctionPtrObj((void *)(int (*)(double,char const *,void *))(GDALTermProgress), SWIGTYPE_p_f_double_p_q_const__char_p_void__int));
  return TCL_OK;
}
SWIGEXPORT int Gdal_SafeInit(Tcl_Interp *interp) {
  return SWIG_init(interp);
}

